// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 22768;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_function_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([80,37,0,0,30,47,0,0,160,37,0,0,223,46,0,0,0,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,80,37,0,0,103,50,0,0,80,37,0,0,134,50,0,0,80,37,0,0,165,50,0,0,80,37,0,0,196,50,0,0,80,37,0,0,227,50,0,0,80,37,0,0,2,51,0,0,80,37,0,0,33,51,0,0,80,37,0,0,64,51,0,0,80,37,0,0,95,51,0,0,80,37,0,0,126,51,0,0,80,37,0,0,157,51,0,0,80,37,0,0,188,51,0,0,80,37,0,0,219,51,0,0,160,37,0,0,238,51,0,0,0,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,160,37,0,0,45,52,0,0,0,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,120,37,0,0,113,71,0,0,208,0,0,0,0,0,0,0,80,37,0,0,126,71,0,0,120,37,0,0,156,71,0,0,208,0,0,0,0,0,0,0,120,37,0,0,139,71,0,0,216,0,0,0,0,0,0,0,80,37,0,0,172,71,0,0,120,37,0,0,185,71,0,0,248,0,0,0,0,0,0,0,120,37,0,0,218,71,0,0,0,1,0,0,0,0,0,0,120,37,0,0,32,72,0,0,0,1,0,0,0,0,0,0,120,37,0,0,252,71,0,0,32,1,0,0,0,0,0,0,120,37,0,0,66,72,0,0,0,1,0,0,0,0,0,0,52,37,0,0,106,72,0,0,52,37,0,0,108,72,0,0,52,37,0,0,110,72,0,0,52,37,0,0,112,72,0,0,52,37,0,0,114,72,0,0,52,37,0,0,116,72,0,0,52,37,0,0,118,72,0,0,52,37,0,0,120,72,0,0,52,37,0,0,122,72,0,0,52,37,0,0,124,72,0,0,52,37,0,0,126,72,0,0,52,37,0,0,128,72,0,0,52,37,0,0,130,72,0,0,120,37,0,0,132,72,0,0,16,1,0,0,0,0,0,0,120,37,0,0,169,72,0,0,16,1,0,0,0,0,0,0,16,0,0,0,144,1,0,0,144,1,0,0,144,1,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,0,0,0,0,0,0,0,0,1,0,0,0,4,0,4,0,8,0,4,0,2,0,0,0,4,0,5,0,16,0,8,0,2,0,0,0,4,0,6,0,32,0,32,0,2,0,0,0,4,0,4,0,16,0,16,0,3,0,0,0,8,0,16,0,32,0,32,0,3,0,0,0,8,0,16,0,128,0,128,0,3,0,0,0,8,0,32,0,128,0,0,1,3,0,0,0,32,0,128,0,2,1,0,4,3,0,0,0,32,0,2,1,2,1,0,16,3,0,0,0,212,40,0,0,156,34,0,0,1,1,0,0,30,1,0,0,15,0,0,0,84,45,0,0,132,35,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,116,36,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,252,70,0,0,12,71,0,0,23,71,0,0,24,71,0,0,35,71,0,0,48,71,0,0,59,71,0,0,79,71,0,0,92,71,0,0,23,71,0,0,4,0,0,0,0,0,0,0,192,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,216,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,232,0,0,0,8,0,0,0,11,0,0,0,10,0,0,0,0,0,0,0,64,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,16,1,0,0,12,0,0,0,17,0,0,0,14,0,0,0,15,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,184,1,0,0,12,0,0,0,22,0,0,0,14,0,0,0,15,0,0,0,18,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,200,1,0,0,12,0,0,0,26,0,0,0,14,0,0,0,15,0,0,0,18,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,95,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,38,0,0,116,38,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,32,0,0,0,220,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,32,0,0,0,212,82,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,100,97,116,97,58,105,109,97,103,101,47,112,110,103,59,98,97,115,101,54,52,44,0,0,87,114,105,116,101,80,110,103,84,111,77,101,109,111,114,121,0,100,97,116,97,58,58,115,105,122,101,40,101,110,99,111,100,101,100,95,114,101,115,117,108,116,41,32,61,61,32,101,110,99,111,100,101,100,95,98,117,102,102,101,114,95,115,105,122,101,0,46,47,99,112,112,99,111,100,101,99,47,100,101,116,97,105,108,47,99,111,100,101,99,46,104,112,112,0,101,110,99,111,100,101,0,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,105,110,32,97,32,116,97,105,108,32,98,108,111,99,107,0,105,110,118,97,108,105,100,32,108,97,115,116,32,101,110,99,111,100,105,110,103,32,115,121,109,98,111,108,32,105,110,100,101,120,32,105,110,32,97,32,116,97,105,108,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,105,105,105,105,105,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0,49,46,54,46,49,55,0,65,112,112,108,105,99,97,116,105,111,110,32,98,117,105,108,116,32,119,105,116,104,32,108,105,98,112,110,103,45,0,32,98,117,116,32,114,117,110,110,105,110,103,32,119,105,116,104,32,0,117,110,101,120,112,101,99,116,101,100,32,122,108,105,98,32,114,101,116,117,114,110,32,99,111,100,101,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,76,90,32,115,116,114,101,97,109,0,109,105,115,115,105,110,103,32,76,90,32,100,105,99,116,105,111,110,97,114,121,0,122,108,105,98,32,73,79,32,101,114,114,111,114,0,98,97,100,32,112,97,114,97,109,101,116,101,114,115,32,116,111,32,122,108,105,98,0,100,97,109,97,103,101,100,32,76,90,32,115,116,114,101,97,109,0,116,114,117,110,99,97,116,101,100,0,117,110,115,117,112,112,111,114,116,101,100,32,122,108,105,98,32,118,101,114,115,105,111,110,0,117,110,101,120,112,101,99,116,101,100,32,122,108,105,98,32,114,101,116,117,114,110,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,105,110,32,73,72,68,82,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,116,104,105,115,32,97,114,99,104,105,116,101,99,116,117,114,101,0,73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,105,110,32,73,72,68,82,0,73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0,85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0,117,110,100,101,102,105,110,101,100,0,108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0,49,50,51,52,53,54,55,56,57,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,112,110,103,95,115,101,116,95,102,105,108,108,101,114,32,105,115,32,105,110,118,97,108,105,100,32,102,111,114,32,108,111,119,32,98,105,116,32,100,101,112,116,104,32,103,114,97,121,32,111,117,116,112,117,116,0,112,110,103,95,115,101,116,95,102,105,108,108,101,114,58,32,105,110,97,112,112,114,111,112,114,105,97,116,101,32,99,111,108,111,114,32,116,121,112,101,0,0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255,0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,67,97,108,108,32,116,111,32,78,85,76,76,32,119,114,105,116,101,32,102,117,110,99,116,105,111,110,0,87,114,105,116,101,32,69,114,114,111,114,0,67,97,110,39,116,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,0,77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0,112,114,111,102,105,108,101,32,109,97,116,99,104,101,115,32,115,82,71,66,32,98,117,116,32,119,114,105,116,105,110,103,32,105,67,67,80,32,105,110,115,116,101,97,100,0,87,114,105,116,105,110,103,32,122,101,114,111,45,108,101,110,103,116,104,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0,86,97,108,105,100,32,112,97,108,101,116,116,101,32,114,101,113,117,105,114,101,100,32,102,111,114,32,112,97,108,101,116,116,101,100,32,105,109,97,103,101,115,0,78,111,32,73,68,65,84,115,32,119,114,105,116,116,101,110,32,105,110,116,111,32,102,105,108,101,0,87,114,111,116,101,32,112,97,108,101,116,116,101,32,105,110,100,101,120,32,101,120,99,101,101,100,105,110,103,32,110,117,109,95,112,97,108,101,116,116,101,0,112,110,103,95,119,114,105,116,101,95,105,110,102,111,32,119,97,115,32,110,101,118,101,114,32,99,97,108,108,101,100,32,98,101,102,111,114,101,32,112,110,103,95,119,114,105,116,101,95,114,111,119,0,105,110,116,101,114,110,97,108,32,119,114,105,116,101,32,116,114,97,110,115,102,111,114,109,32,108,111,103,105,99,32,101,114,114,111,114,0,110,111,32,114,111,119,115,32,102,111,114,32,112,110,103,95,119,114,105,116,101,95,105,109,97,103,101,32,116,111,32,119,114,105,116,101,0,80,78,71,95,84,82,65,78,83,70,79,82,77,95,83,84,82,73,80,95,70,73,76,76,69,82,58,32,66,69,70,79,82,69,43,65,70,84,69,82,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,108,101,110,103,116,104,32,101,120,99,101,101,100,115,32,80,78,71,32,109,97,120,105,109,117,109,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,103,114,97,121,115,99,97,108,101,32,105,109,97,103,101,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,82,71,66,32,105,109,97,103,101,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,112,97,108,101,116,116,101,100,32,105,109,97,103,101,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,103,114,97,121,115,99,97,108,101,43,97,108,112,104,97,32,105,109,97,103,101,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,82,71,66,65,32,105,109,97,103,101,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,99,111,108,111,114,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,73,110,118,97,108,105,100,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,73,110,118,97,108,105,100,32,105,110,116,101,114,108,97,99,101,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,99,111,108,111,114,115,32,105,110,32,112,97,108,101,116,116,101,0,73,103,110,111,114,105,110,103,32,114,101,113,117,101,115,116,32,116,111,32,119,114,105,116,101,32,97,32,80,76,84,69,32,99,104,117,110,107,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,90,95,79,75,32,111,110,32,90,95,70,73,78,73,83,72,32,119,105,116,104,32,111,117,116,112,117,116,32,115,112,97,99,101,0,73,110,118,97,108,105,100,32,115,82,71,66,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,32,115,112,101,99,105,102,105,101,100,0,78,111,32,112,114,111,102,105,108,101,32,102,111,114,32,105,67,67,80,32,99,104,117,110,107,0,73,67,67,32,112,114,111,102,105,108,101,32,116,111,111,32,115,104,111,114,116,0,73,67,67,32,112,114,111,102,105,108,101,32,108,101,110,103,116,104,32,105,110,118,97,108,105,100,32,40,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,52,41,0,105,67,67,80,58,32,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,0,101,114,114,111,114,32,119,114,105,116,105,110,103,32,97,110,99,105,108,108,97,114,121,32,99,104,117,110,107,101,100,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,115,80,76,84,58,32,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,0,73,110,118,97,108,105,100,32,115,66,73,84,32,100,101,112,116,104,32,115,112,101,99,105,102,105,101,100,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,116,114,97,110,115,112,97,114,101,110,116,32,99,111,108,111,114,115,32,115,112,101,99,105,102,105,101,100,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,116,82,78,83,32,99,104,117,110,107,32,111,117,116,45,111,102,45,114,97,110,103,101,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,49,54,45,98,105,116,32,116,82,78,83,32,99,104,117,110,107,32,119,104,101,110,32,98,105,116,95,100,101,112,116,104,32,105,115,32,56,0,67,97,110,39,116,32,119,114,105,116,101,32,116,82,78,83,32,119,105,116,104,32,97,110,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0,73,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,112,97,108,101,116,116,101,32,105,110,100,101,120,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,49,54,45,98,105,116,32,98,75,71,68,32,99,104,117,110,107,32,119,104,101,110,32,98,105,116,95,100,101,112,116,104,32,105,115,32,56,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,98,75,71,68,32,99,104,117,110,107,32,111,117,116,45,111,102,45,114,97,110,103,101,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,104,105,115,116,111,103,114,97,109,32,101,110,116,114,105,101,115,32,115,112,101,99,105,102,105,101,100,0,116,69,88,116,58,32,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,0,116,69,88,116,58,32,116,101,120,116,32,116,111,111,32,108,111,110,103,0,122,84,88,116,58,32,105,110,118,97,108,105,100,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,0,122,84,88,116,58,32,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,0,105,84,88,116,58,32,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,0,105,84,88,116,58,32,105,110,118,97,108,105,100,32,99,111,109,112,114,101,115,115,105,111,110,0,105,84,88,116,58,32,117,110,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,32,116,111,111,32,108,111,110,103,0,85,110,114,101,99,111,103,110,105,122,101,100,32,117,110,105,116,32,116,121,112,101,32,102,111,114,32,111,70,70,115,32,99,104,117,110,107,0,85,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,32,102,111,114,32,112,67,65,76,32,99,104,117,110,107,0,112,67,65,76,58,32,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,0,67,97,110,39,116,32,119,114,105,116,101,32,115,67,65,76,32,40,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,41,0,85,110,114,101,99,111,103,110,105,122,101,100,32,117,110,105,116,32,116,121,112,101,32,102,111,114,32,112,72,89,115,32,99,104,117,110,107,0,73,110,118,97,108,105,100,32,116,105,109,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,116,73,77,69,32,99,104,117,110,107,0,8,8,4,4,2,2,1,0,4,0,2,0,1,0,8,8,8,4,4,2,2,0,0,4,0,2,0,1,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,116,111,111,32,108,111,110,103,0,107,101,121,119,111,114,100,32,116,114,117,110,99,97,116,101,100,0,107,101,121,119,111,114,100,32,34,64,49,34,58,32,98,97,100,32,99,104,97,114,97,99,116,101,114,32,39,48,120,64,50,39,0,32,117,115,105,110,103,32,122,115,116,114,101,97,109,0,105,110,32,117,115,101,32,98,121,32,73,68,65,84,0,100,101,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,32,40,105,103,110,111,114,101,100,41,0,49,46,50,46,56,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,97,109,32,101,110,100,0,0,102,105,108,101,32,101,114,114,111,114,0,115,116,114,101,97,109,32,101,114,114,111,114,0,100,97,116,97,32,101,114,114,111,114,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,98,117,102,102,101,114,32,101,114,114,111,114,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,50,100,111,109,97,105,110,95,101,114,114,111,114,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,108,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,68,58,92,80,114,111,103,114,97,109,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,68,58,92,80,114,111,103,114,97,109,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10444);
/* memory initializer */ allocate([108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20684);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+22228);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  var _emscripten_prep_setjmp=true;

  function ___lock() {}

  function ___unlock() {}

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _emscripten_cleanup_setjmp=true;

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _emscripten_check_longjmp=true;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _emscripten_get_longjmp_result=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  var _emscripten_resume=true;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_i64Add"] = _i64Add;

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_setjmp=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
init_emval();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "___syscall54": ___syscall54, "__embind_register_integer": __embind_register_integer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "___setErrNo": ___setErrNo, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_longjmp": _longjmp, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "embind_init_charCodes": embind_init_charCodes, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "__emval_register": __emval_register, "_sbrk": _sbrk, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_embind_repr": _embind_repr, "__embind_register_std_wstring": __embind_register_std_wstring, "_pthread_getspecific": _pthread_getspecific, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "_pthread_cleanup_push": _pthread_cleanup_push, "readLatin1String": readLatin1String, "__embind_register_memory_view": __embind_register_memory_view, "throwUnboundTypeError": throwUnboundTypeError, "_pthread_self": _pthread_self, "craftInvokerFunction": craftInvokerFunction, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__embind_register_float": __embind_register_float, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_emscripten_set_main_loop": _emscripten_set_main_loop, "new_": new_, "_pthread_setspecific": _pthread_setspecific, "integerReadValueFromPointer": integerReadValueFromPointer, "registerType": registerType, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "throwBindingError": throwBindingError, "ensureOverloadTable": ensureOverloadTable, "count_emval_handles": count_emval_handles, "_time": _time, "requireFunction": requireFunction, "runDestructors": runDestructors, "_emscripten_longjmp": _emscripten_longjmp, "getTypeName": getTypeName, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var ___syscall54=env.___syscall54;
  var __embind_register_integer=env.__embind_register_integer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _longjmp=env._longjmp;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var __emval_register=env.__emval_register;
  var _sbrk=env._sbrk;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _embind_repr=env._embind_repr;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _pthread_getspecific=env._pthread_getspecific;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var readLatin1String=env.readLatin1String;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var _pthread_self=env._pthread_self;
  var craftInvokerFunction=env.craftInvokerFunction;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __embind_register_float=env.__embind_register_float;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var new_=env.new_;
  var _pthread_setspecific=env._pthread_setspecific;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var throwBindingError=env.throwBindingError;
  var ensureOverloadTable=env.ensureOverloadTable;
  var count_emval_handles=env.count_emval_handles;
  var _time=env._time;
  var requireFunction=env.requireFunction;
  var runDestructors=env.runDestructors;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var getTypeName=env.getTypeName;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z16WritePngToMemoryjjj($agg$result,$w,$h,$data_ptr) {
 $agg$result = $agg$result|0;
 $w = $w|0;
 $h = $h|0;
 $data_ptr = $data_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $data = 0, $destroyPng = 0, $info_ptr = 0, $out = 0, $p = 0, $rows = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 104|0;
 $19 = sp + 92|0;
 $out = sp + 52|0;
 $destroyPng = sp + 36|0;
 $rows = sp + 20|0;
 $28 = sp + 4|0;
 $23 = $w;
 $24 = $h;
 $25 = $data_ptr;
 $30 = $25;
 $31 = $30;
 $data = $31;
 $22 = $out;
 $32 = $22;
 $21 = $32;
 $33 = $21;
 $20 = $33;
 HEAP32[$33>>2] = 0;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($33)) + 8|0);
 $18 = $35;
 HEAP32[$19>>2] = 0;
 $36 = $18;
 $17 = $19;
 $37 = $17;
 $38 = HEAP32[$37>>2]|0;
 $15 = $36;
 HEAP32[$16>>2] = $38;
 $39 = $15;
 $14 = $39;
 $13 = $16;
 $40 = $13;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 __THREW__ = 0;
 $42 = (invoke_iiiii(34,(13456|0),(0|0),(0|0),(0|0))|0);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if (!($44)) {
  $p = $42;
  $45 = $p;
  __THREW__ = 0;
  invoke_vii(35,($destroyPng|0),($45|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if (!($47)) {
   $48 = $p;
   __THREW__ = 0;
   $49 = (invoke_ii(36,($48|0))|0);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    label = 10;
   } else {
    $info_ptr = $49;
    $52 = $p;
    $53 = $info_ptr;
    $54 = $23;
    $55 = $24;
    __THREW__ = 0;
    invoke_viiiiiiiii(37,($52|0),($53|0),($54|0),($55|0),16,0,0,0,0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     label = 10;
    } else {
     $58 = $24;
     __THREW__ = 0;
     invoke_vii(38,($rows|0),($58|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 10;
     } else {
      $y = 0;
      while(1) {
       $61 = $y;
       $62 = $24;
       $63 = ($61>>>0)<($62>>>0);
       if (!($63)) {
        break;
       }
       $64 = $data;
       $65 = $y;
       $66 = $23;
       $67 = Math_imul($65, $66)|0;
       $68 = $67<<1;
       $69 = (($64) + ($68)|0);
       $70 = $y;
       $11 = $rows;
       $12 = $70;
       $71 = $11;
       $72 = $12;
       $73 = HEAP32[$71>>2]|0;
       $74 = (($73) + ($72<<2)|0);
       HEAP32[$74>>2] = $69;
       $75 = $y;
       $76 = (($75) + 1)|0;
       $y = $76;
      }
      $83 = $p;
      $84 = $info_ptr;
      $9 = $rows;
      $10 = 0;
      $85 = $9;
      $86 = $10;
      $87 = HEAP32[$85>>2]|0;
      $88 = (($87) + ($86<<2)|0);
      __THREW__ = 0;
      invoke_viii(39,($83|0),($84|0),($88|0));
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      do {
       if ($90) {
        label = 11;
       } else {
        $91 = $p;
        __THREW__ = 0;
        invoke_viiii(40,($91|0),($out|0),(41|0),(0|0));
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         label = 11;
        } else {
         $94 = $p;
         $95 = $info_ptr;
         __THREW__ = 0;
         invoke_viiii(42,($94|0),($95|0),0,(0|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 11;
         } else {
          __THREW__ = 0;
          invoke_vii(43,($28|0),($out|0));
          $98 = __THREW__; __THREW__ = 0;
          $99 = $98&1;
          if ($99) {
           label = 11;
          } else {
           $7 = 11724;
           $8 = $28;
           $100 = $8;
           $101 = $7;
           __THREW__ = 0;
           $102 = (invoke_iiii(44,($100|0),0,($101|0))|0);
           $103 = __THREW__; __THREW__ = 0;
           $104 = $103&1;
           if ($104) {
            $120 = ___cxa_find_matching_catch()|0;
            $121 = tempRet0;
            $26 = $120;
            $27 = $121;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
            break;
           }
           $6 = $102;
           $105 = $6;
           $4 = $agg$result;
           $5 = $105;
           $106 = $4;
           $107 = $5;
           $3 = $107;
           $108 = $3;
           ;HEAP32[$106>>2]=HEAP32[$108>>2]|0;HEAP32[$106+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$106+8>>2]=HEAP32[$108+8>>2]|0;
           $109 = $5;
           $2 = $109;
           $110 = $2;
           $1 = $110;
           $111 = $1;
           $0 = $111;
           $112 = $0;
           $__a$i$i$i = $112;
           $__i$i$i$i = 0;
           while(1) {
            $113 = $__i$i$i$i;
            $114 = ($113>>>0)<(3);
            if (!($114)) {
             break;
            }
            $115 = $__i$i$i$i;
            $116 = $__a$i$i$i;
            $117 = (($116) + ($115<<2)|0);
            HEAP32[$117>>2] = 0;
            $118 = $__i$i$i$i;
            $119 = (($118) + 1)|0;
            $__i$i$i$i = $119;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
           $29 = 1;
           __ZNSt3__16vectorIPhNS_9allocatorIS1_EEED2Ev($rows);
           __ZN14TPngDestructorD2Ev($destroyPng);
           __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($out);
           STACKTOP = sp;return;
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 11) {
       $81 = ___cxa_find_matching_catch()|0;
       $82 = tempRet0;
       $26 = $81;
       $27 = $82;
      }
      __ZNSt3__16vectorIPhNS_9allocatorIS1_EEED2Ev($rows);
     }
    }
   }
   if ((label|0) == 10) {
    $79 = ___cxa_find_matching_catch()|0;
    $80 = tempRet0;
    $26 = $79;
    $27 = $80;
   }
   __ZN14TPngDestructorD2Ev($destroyPng);
   __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($out);
   $122 = $26;
   $123 = $27;
   ___resumeException($122|0);
   // unreachable;
  }
 }
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $26 = $77;
 $27 = $78;
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($out);
 $122 = $26;
 $123 = $27;
 ___resumeException($122|0);
 // unreachable;
}
function __ZN14TPngDestructorC2EP14png_struct_def($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPhNS_9allocatorIS1_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = $10;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $10;
 __THREW__ = 0;
 invoke_vii(45,($13|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = $10;
  __THREW__ = 0;
  invoke_vii(46,($13|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $11 = $31;
 $12 = $32;
 __ZNSt3__113__vector_baseIPhNS_9allocatorIS1_EEED2Ev($13);
 $33 = $11;
 $34 = $12;
 ___resumeException($33|0);
 // unreachable;
}
function __ZL16PngWriteCallbackP14png_struct_defPhj($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 72|0;
 $6 = sp + 44|0;
 $9 = sp + 32|0;
 $14 = sp + 8|0;
 $15 = sp + 4|0;
 $16 = sp;
 $11 = $png_ptr;
 $12 = $data;
 $13 = $length;
 $17 = $11;
 $18 = (_png_get_io_ptr($17)|0);
 $p = $18;
 $19 = $p;
 $20 = $p;
 $10 = $20;
 $21 = $10;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $7 = $21;
 $8 = $23;
 $24 = $8;
 $4 = $6;
 $5 = $24;
 $25 = $4;
 $26 = $5;
 HEAP32[$25>>2] = $26;
 $27 = HEAP32[$6>>2]|0;
 HEAP32[$9>>2] = $27;
 $28 = HEAP32[$9>>2]|0;
 HEAP32[$15>>2] = $28;
 $1 = $14;
 $2 = $15;
 $3 = 0;
 $29 = $1;
 $30 = $2;
 $0 = $30;
 $31 = $0;
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$29>>2] = $32;
 $33 = $12;
 $34 = $12;
 $35 = $13;
 $36 = (($34) + ($35)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
 $37 = (__ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_($19,$$byval_copy,$33,$36)|0);
 HEAP32[$16>>2] = $37;
 STACKTOP = sp;return;
}
function __ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6vectorIhNSB_IhEEEEEET_RKT0_($agg$result,$binary) {
 $agg$result = $agg$result|0;
 $binary = $binary|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $binary;
 $1 = $0;
 $2 = (__ZN8cppcodec4data10uchar_dataINSt3__16vectorIhNS2_9allocatorIhEEEEEEPKhRKT_($1)|0);
 $3 = $0;
 $4 = (__ZN8cppcodec4data4sizeINSt3__16vectorIhNS2_9allocatorIhEEEEEEjRKT_($3)|0);
 __ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEET_PKhj($agg$result,$2,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPhNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPhNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14TPngDestructorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(47,($1|0),(0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(11747);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 5|0;
 $1 = sp + 4|0;
 $0 = $this;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;
 __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJjjjEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(11748,48,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJjjjEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($name,$fn,$0) {
 $name = $name|0;
 $fn = $fn|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $2 = $name;
 $3 = $fn;
 $invoker = 49;
 $4 = $2;
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEjjjEE8getCountEv($args)|0);
 $6 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEjjjEE8getTypesEv($args)|0);
 $7 = $invoker;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $9 = $invoker;
 $10 = $3;
 __embind_register_function(($4|0),($5|0),($6|0),($8|0),($9|0),($10|0));
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_($this,$__position,$__first,$__last) {
 $this = $this|0;
 $__position = $__position|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__annotator = 0, $__cap$i = 0, $__dx = 0, $__m = 0, $__ms$i = 0, $__n = 0, $__n$i$i = 0, $__old_last = 0, $__old_n = 0, $__p = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 16|0;
 $12 = sp + 335|0;
 $20 = sp + 256|0;
 $21 = sp + 244|0;
 $33 = sp + 8|0;
 $36 = sp + 334|0;
 $42 = sp;
 $45 = sp + 333|0;
 $52 = sp + 132|0;
 $57 = sp + 112|0;
 $60 = sp + 100|0;
 $62 = sp + 92|0;
 $66 = sp + 72|0;
 $__m = sp + 56|0;
 $__annotator = sp + 332|0;
 $__v = sp + 28|0;
 $63 = $this;
 $64 = $__first;
 $65 = $__last;
 $69 = $63;
 $70 = HEAP32[$69>>2]|0;
 $61 = $69;
 $71 = $61;
 $72 = HEAP32[$71>>2]|0;
 $58 = $71;
 $59 = $72;
 $73 = $59;
 $55 = $57;
 $56 = $73;
 $74 = $55;
 $75 = $56;
 HEAP32[$74>>2] = $75;
 $76 = HEAP32[$57>>2]|0;
 HEAP32[$60>>2] = $76;
 $77 = HEAP32[$60>>2]|0;
 HEAP32[$66>>2] = $77;
 $48 = $__position;
 $49 = $66;
 $78 = $48;
 $47 = $78;
 $79 = $47;
 $80 = HEAP32[$79>>2]|0;
 $81 = $49;
 $46 = $81;
 $82 = $46;
 $83 = HEAP32[$82>>2]|0;
 $84 = $80;
 $85 = $83;
 $86 = (($84) - ($85))|0;
 $87 = (($70) + ($86)|0);
 $__p = $87;
 $88 = $64;
 $89 = $65;
 $43 = $88;
 $44 = $89;
 $90 = $43;
 $91 = $44;
 ;HEAP8[$42>>0]=HEAP8[$45>>0]|0;
 $40 = $90;
 $41 = $91;
 $92 = $41;
 $93 = $40;
 $94 = $92;
 $95 = $93;
 $96 = (($94) - ($95))|0;
 $__n = $96;
 $97 = $__n;
 $98 = ($97|0)>(0);
 if (!($98)) {
  $233 = $__p;
  $53 = $69;
  $54 = $233;
  $234 = $54;
  $50 = $52;
  $51 = $234;
  $235 = $50;
  $236 = $51;
  HEAP32[$235>>2] = $236;
  $237 = HEAP32[$52>>2]|0;
  HEAP32[$62>>2] = $237;
  $238 = HEAP32[$62>>2]|0;
  STACKTOP = sp;return ($238|0);
 }
 $99 = $__n;
 $39 = $69;
 $100 = $39;
 $101 = ((($100)) + 8|0);
 $38 = $101;
 $102 = $38;
 $37 = $102;
 $103 = $37;
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($69)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $104;
 $108 = $106;
 $109 = (($107) - ($108))|0;
 $110 = ($99|0)<=($109|0);
 if ($110) {
  $111 = $__n;
  $__old_n = $111;
  $112 = ((($69)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $__old_last = $113;
  $114 = $65;
  HEAP32[$__m>>2] = $114;
  $115 = ((($69)) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $__p;
  $118 = $116;
  $119 = $117;
  $120 = (($118) - ($119))|0;
  $__dx = $120;
  $121 = $__n;
  $122 = $__dx;
  $123 = ($121|0)>($122|0);
  if ($123) {
   $124 = $64;
   HEAP32[$__m>>2] = $124;
   $125 = ((($69)) + 4|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $__p;
   $128 = $126;
   $129 = $127;
   $130 = (($128) - ($129))|0;
   $34 = $__m;
   $35 = $130;
   $131 = $34;
   $132 = $35;
   ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
   $31 = $131;
   $32 = $132;
   $133 = $32;
   $134 = $31;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + ($133)|0);
   HEAP32[$134>>2] = $136;
   $137 = HEAP32[$__m>>2]|0;
   $138 = $65;
   __ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($69,$137,$138);
   $139 = $__dx;
   $__n = $139;
  }
  $140 = $__n;
  $141 = ($140|0)>(0);
  if (!($141)) {
   $233 = $__p;
   $53 = $69;
   $54 = $233;
   $234 = $54;
   $50 = $52;
   $51 = $234;
   $235 = $50;
   $236 = $51;
   HEAP32[$235>>2] = $236;
   $237 = HEAP32[$52>>2]|0;
   HEAP32[$62>>2] = $237;
   $238 = HEAP32[$62>>2]|0;
   STACKTOP = sp;return ($238|0);
  }
  $142 = $__n;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$69,$142);
  $143 = $__p;
  $144 = $__old_last;
  $145 = $__p;
  $146 = $__old_n;
  $147 = (($145) + ($146)|0);
  __ZNSt3__16vectorIhNS_9allocatorIhEEE12__move_rangeEPhS4_S4_($69,$143,$144,$147);
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $148 = $64;
  $149 = HEAP32[$__m>>2]|0;
  $150 = $__p;
  $28 = $148;
  $29 = $149;
  $30 = $150;
  $151 = $28;
  $27 = $151;
  $152 = $27;
  $153 = $29;
  $22 = $153;
  $154 = $22;
  $155 = $30;
  $23 = $155;
  $156 = $23;
  $24 = $152;
  $25 = $154;
  $26 = $156;
  $157 = $25;
  $158 = $24;
  $159 = $157;
  $160 = $158;
  $161 = (($159) - ($160))|0;
  $__n$i$i = $161;
  $162 = $26;
  $163 = $24;
  $164 = $__n$i$i;
  _memmove(($162|0),($163|0),($164|0))|0;
  $233 = $__p;
  $53 = $69;
  $54 = $233;
  $234 = $54;
  $50 = $52;
  $51 = $234;
  $235 = $50;
  $236 = $51;
  HEAP32[$235>>2] = $236;
  $237 = HEAP32[$52>>2]|0;
  HEAP32[$62>>2] = $237;
  $238 = HEAP32[$62>>2]|0;
  STACKTOP = sp;return ($238|0);
 }
 $3 = $69;
 $165 = $3;
 $166 = ((($165)) + 8|0);
 $2 = $166;
 $167 = $2;
 $1 = $167;
 $168 = $1;
 $__a = $168;
 $0 = $69;
 $169 = $0;
 $170 = ((($169)) + 4|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = HEAP32[$169>>2]|0;
 $173 = $171;
 $174 = $172;
 $175 = (($173) - ($174))|0;
 $176 = $__n;
 $177 = (($175) + ($176))|0;
 $19 = $69;
 HEAP32[$20>>2] = $177;
 $178 = $19;
 $179 = (__ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($178)|0);
 $__ms$i = $179;
 $180 = HEAP32[$20>>2]|0;
 $181 = $__ms$i;
 $182 = ($180>>>0)>($181>>>0);
 if ($182) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($178);
  // unreachable;
 }
 $17 = $178;
 $183 = $17;
 $16 = $183;
 $184 = $16;
 $15 = $184;
 $185 = $15;
 $186 = ((($185)) + 8|0);
 $14 = $186;
 $187 = $14;
 $13 = $187;
 $188 = $13;
 $189 = HEAP32[$188>>2]|0;
 $190 = HEAP32[$184>>2]|0;
 $191 = $189;
 $192 = $190;
 $193 = (($191) - ($192))|0;
 $__cap$i = $193;
 $194 = $__cap$i;
 $195 = $__ms$i;
 $196 = (($195>>>0) / 2)&-1;
 $197 = ($194>>>0)>=($196>>>0);
 if ($197) {
  $198 = $__ms$i;
  $18 = $198;
 } else {
  $199 = $__cap$i;
  $200 = $199<<1;
  HEAP32[$21>>2] = $200;
  $10 = $21;
  $11 = $20;
  $201 = $10;
  $202 = $11;
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
  $7 = $201;
  $8 = $202;
  $203 = $7;
  $204 = $8;
  $4 = $9;
  $5 = $203;
  $6 = $204;
  $205 = $5;
  $206 = HEAP32[$205>>2]|0;
  $207 = $6;
  $208 = HEAP32[$207>>2]|0;
  $209 = ($206>>>0)<($208>>>0);
  $210 = $8;
  $211 = $7;
  $212 = $209 ? $210 : $211;
  $213 = HEAP32[$212>>2]|0;
  $18 = $213;
 }
 $214 = $18;
 $215 = $__p;
 $216 = HEAP32[$69>>2]|0;
 $217 = $215;
 $218 = $216;
 $219 = (($217) - ($218))|0;
 $220 = $__a;
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($__v,$214,$219,$220);
 $221 = $64;
 $222 = $65;
 __THREW__ = 0;
 invoke_viii(50,($__v|0),($221|0),($222|0));
 $223 = __THREW__; __THREW__ = 0;
 $224 = $223&1;
 if ($224) {
  $229 = ___cxa_find_matching_catch()|0;
  $230 = tempRet0;
  $67 = $229;
  $68 = $230;
  __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
  $231 = $67;
  $232 = $68;
  ___resumeException($231|0);
  // unreachable;
 }
 $225 = $__p;
 __THREW__ = 0;
 $226 = (invoke_iiii(51,($69|0),($__v|0),($225|0))|0);
 $227 = __THREW__; __THREW__ = 0;
 $228 = $227&1;
 if ($228) {
  $229 = ___cxa_find_matching_catch()|0;
  $230 = tempRet0;
  $67 = $229;
  $68 = $230;
  __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
  $231 = $67;
  $232 = $68;
  ___resumeException($231|0);
  // unreachable;
 }
 $__p = $226;
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
 $233 = $__p;
 $53 = $69;
 $54 = $233;
 $234 = $54;
 $50 = $52;
 $51 = $234;
 $235 = $50;
 $236 = $51;
 HEAP32[$235>>2] = $236;
 $237 = HEAP32[$52>>2]|0;
 HEAP32[$62>>2] = $237;
 $238 = HEAP32[$62>>2]|0;
 STACKTOP = sp;return ($238|0);
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  $45 = HEAP8[$44>>0]|0;
  HEAP8[$42>>0] = $45;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $46 = ((($21)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 1|0);
  HEAP32[$46>>2] = $48;
  $49 = $19;
  $50 = ((($49)) + 1|0);
  $19 = $50;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE12__move_rangeEPhS4_S4_($this,$__from_s,$__from_e,$__to) {
 $this = $this|0;
 $__from_s = $__from_s|0;
 $__from_e = $__from_e|0;
 $__to = $__to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $__i = 0, $__n = 0, $__n$i$i = 0, $__old_last = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $15 = sp + 140|0;
 $28 = $this;
 $29 = $__from_s;
 $30 = $__from_e;
 $31 = $__to;
 $32 = $28;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $__old_last = $34;
 $35 = $__old_last;
 $36 = $31;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $__n = $39;
 $40 = $29;
 $41 = $__n;
 $42 = (($40) + ($41)|0);
 $__i = $42;
 while(1) {
  $43 = $__i;
  $44 = $30;
  $45 = ($43>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $27 = $32;
  $46 = $27;
  $47 = ((($46)) + 8|0);
  $26 = $47;
  $48 = $26;
  $25 = $48;
  $49 = $25;
  $50 = ((($32)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $0 = $51;
  $52 = $0;
  $53 = $__i;
  $1 = $53;
  $54 = $1;
  $12 = $49;
  $13 = $52;
  $14 = $54;
  $55 = $12;
  $56 = $13;
  $57 = $14;
  $11 = $57;
  $58 = $11;
  ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
  $7 = $55;
  $8 = $56;
  $9 = $58;
  $59 = $7;
  $60 = $8;
  $61 = $9;
  $6 = $61;
  $62 = $6;
  $3 = $59;
  $4 = $60;
  $5 = $62;
  $63 = $4;
  $64 = $5;
  $2 = $64;
  $65 = $2;
  $66 = HEAP8[$65>>0]|0;
  HEAP8[$63>>0] = $66;
  $67 = $__i;
  $68 = ((($67)) + 1|0);
  $__i = $68;
  $69 = ((($32)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 1|0);
  HEAP32[$69>>2] = $71;
 }
 $72 = $29;
 $73 = $29;
 $74 = $__n;
 $75 = (($73) + ($74)|0);
 $76 = $__old_last;
 $22 = $72;
 $23 = $75;
 $24 = $76;
 $77 = $22;
 $21 = $77;
 $78 = $21;
 $79 = $23;
 $16 = $79;
 $80 = $16;
 $81 = $24;
 $17 = $81;
 $82 = $17;
 $18 = $78;
 $19 = $80;
 $20 = $82;
 $83 = $19;
 $84 = $18;
 $85 = $83;
 $86 = $84;
 $87 = (($85) - ($86))|0;
 $__n$i$i = $87;
 $88 = $__n$i$i;
 $89 = $20;
 $90 = (0 - ($88))|0;
 $91 = (($89) + ($90)|0);
 $20 = $91;
 $92 = $20;
 $93 = $18;
 $94 = $__n$i$i;
 _memmove(($92|0),($93|0),($94|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $3 = $51;
  $52 = $3;
  $53 = (__Znwj($52)|0);
  $54 = $53;
 } else {
  $54 = 0;
 }
 HEAP32[$26>>2] = $54;
 $55 = HEAP32[$26>>2]|0;
 $56 = $24;
 $57 = (($55) + ($56)|0);
 $58 = ((($26)) + 8|0);
 HEAP32[$58>>2] = $57;
 $59 = ((($26)) + 4|0);
 HEAP32[$59>>2] = $57;
 $60 = HEAP32[$26>>2]|0;
 $61 = $23;
 $62 = (($60) + ($61)|0);
 $11 = $26;
 $63 = $11;
 $64 = ((($63)) + 12|0);
 $10 = $64;
 $65 = $10;
 $9 = $65;
 $66 = $9;
 HEAP32[$66>>2] = $62;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $19;
  $29 = $20;
  $30 = ($28|0)!=($29|0);
  if (!($30)) {
   break;
  }
  $31 = $__a;
  $32 = ((($21)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $0 = $33;
  $34 = $0;
  $35 = $19;
  $11 = $31;
  $12 = $34;
  $13 = $35;
  $36 = $11;
  $37 = $12;
  $38 = $13;
  $10 = $38;
  $39 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $36;
  $7 = $37;
  $8 = $39;
  $40 = $6;
  $41 = $7;
  $42 = $8;
  $5 = $42;
  $43 = $5;
  $2 = $40;
  $3 = $41;
  $4 = $43;
  $44 = $3;
  $45 = $4;
  $1 = $45;
  $46 = $1;
  $47 = HEAP8[$46>>0]|0;
  HEAP8[$44>>0] = $47;
  $48 = ((($21)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 1|0);
  HEAP32[$48>>2] = $50;
  $51 = $19;
  $52 = ((($51)) + 1|0);
  $19 = $52;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EEPh($this,$__v,$__p) {
 $this = $this|0;
 $__v = $__v|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $_Np$i3 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 128|0;
 $__t$i1 = sp + 104|0;
 $__t$i = sp + 56|0;
 $37 = $this;
 $38 = $__v;
 $39 = $__p;
 $40 = $37;
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($40);
 $41 = $38;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $__r = $43;
 $36 = $40;
 $44 = $36;
 $45 = ((($44)) + 8|0);
 $35 = $45;
 $46 = $35;
 $34 = $46;
 $47 = $34;
 $48 = HEAP32[$40>>2]|0;
 $49 = $39;
 $50 = $38;
 $51 = ((($50)) + 4|0);
 $29 = $47;
 $30 = $48;
 $31 = $49;
 $32 = $51;
 $52 = $31;
 $53 = $30;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $_Np$i = $56;
 $57 = $_Np$i;
 $58 = $32;
 $59 = HEAP32[$58>>2]|0;
 $60 = (0 - ($57))|0;
 $61 = (($59) + ($60)|0);
 HEAP32[$58>>2] = $61;
 $62 = $32;
 $63 = HEAP32[$62>>2]|0;
 $64 = $30;
 $65 = $_Np$i;
 _memcpy(($63|0),($64|0),($65|0))|0;
 $2 = $40;
 $66 = $2;
 $67 = ((($66)) + 8|0);
 $1 = $67;
 $68 = $1;
 $0 = $68;
 $69 = $0;
 $70 = $39;
 $71 = ((($40)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $38;
 $74 = ((($73)) + 8|0);
 $3 = $69;
 $4 = $70;
 $5 = $72;
 $6 = $74;
 $75 = $5;
 $76 = $4;
 $77 = $75;
 $78 = $76;
 $79 = (($77) - ($78))|0;
 $_Np$i3 = $79;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $4;
 $83 = $_Np$i3;
 _memcpy(($81|0),($82|0),($83|0))|0;
 $84 = $_Np$i3;
 $85 = $6;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($84)|0);
 HEAP32[$85>>2] = $87;
 $88 = $38;
 $89 = ((($88)) + 4|0);
 $10 = $40;
 $11 = $89;
 $90 = $10;
 $9 = $90;
 $91 = $9;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$__t$i2>>2] = $92;
 $93 = $11;
 $7 = $93;
 $94 = $7;
 $95 = HEAP32[$94>>2]|0;
 $96 = $10;
 HEAP32[$96>>2] = $95;
 $8 = $__t$i2;
 $97 = $8;
 $98 = HEAP32[$97>>2]|0;
 $99 = $11;
 HEAP32[$99>>2] = $98;
 $100 = ((($40)) + 4|0);
 $101 = $38;
 $102 = ((($101)) + 8|0);
 $15 = $100;
 $16 = $102;
 $103 = $15;
 $14 = $103;
 $104 = $14;
 $105 = HEAP32[$104>>2]|0;
 HEAP32[$__t$i1>>2] = $105;
 $106 = $16;
 $12 = $106;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $13 = $__t$i1;
 $110 = $13;
 $111 = HEAP32[$110>>2]|0;
 $112 = $16;
 HEAP32[$112>>2] = $111;
 $19 = $40;
 $113 = $19;
 $114 = ((($113)) + 8|0);
 $18 = $114;
 $115 = $18;
 $17 = $115;
 $116 = $17;
 $117 = $38;
 $22 = $117;
 $118 = $22;
 $119 = ((($118)) + 12|0);
 $21 = $119;
 $120 = $21;
 $20 = $120;
 $121 = $20;
 $26 = $116;
 $27 = $121;
 $122 = $26;
 $25 = $122;
 $123 = $25;
 $124 = HEAP32[$123>>2]|0;
 HEAP32[$__t$i>>2] = $124;
 $125 = $27;
 $23 = $125;
 $126 = $23;
 $127 = HEAP32[$126>>2]|0;
 $128 = $26;
 HEAP32[$128>>2] = $127;
 $24 = $__t$i;
 $129 = $24;
 $130 = HEAP32[$129>>2]|0;
 $131 = $27;
 HEAP32[$131>>2] = $130;
 $132 = $38;
 $133 = ((($132)) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $38;
 HEAP32[$135>>2] = $134;
 $28 = $40;
 $136 = $28;
 $137 = ((($136)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = HEAP32[$136>>2]|0;
 $140 = $138;
 $141 = $139;
 $142 = (($140) - ($141))|0;
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($40,$142);
 $33 = $40;
 $143 = $__r;
 STACKTOP = sp;return ($143|0);
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -1|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $8 = $66;
 $9 = $67;
 $10 = $77;
 $78 = $8;
 $79 = $9;
 $80 = $10;
 $5 = $78;
 $6 = $79;
 $7 = $80;
 $81 = $6;
 $4 = $81;
 $82 = $4;
 __ZdlPv($82);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $7 = $20;
 $42 = $7;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($41) + ($48)|0);
 $9 = $20;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $8;
 $14 = $20;
 $53 = $14;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 $55 = $12;
 $56 = ((($55)) + 8|0);
 $11 = $56;
 $57 = $11;
 $10 = $57;
 $58 = $10;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$54>>2]|0;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = (($52) + ($63)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$49,$64);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPhNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -1|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $11 = $55;
 $12 = $56;
 $13 = $66;
 $67 = $11;
 $68 = $12;
 $69 = $13;
 $8 = $67;
 $9 = $68;
 $10 = $69;
 $70 = $9;
 $7 = $70;
 $71 = $7;
 __ZdlPv($71);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPhNS_9allocatorIS1_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIPhNS_9allocatorIS1_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<2;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<2)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIPhNS_9allocatorIS1_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPhNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIPhNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAP32[$27>>2] = 0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIPhNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPhNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIPhNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPhNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPhNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPhNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPhNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEET_PKhj($agg$result,$binary,$binary_size) {
 $agg$result = $agg$result|0;
 $binary = $binary|0;
 $binary_size = $binary_size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 56|0;
 $7 = $binary;
 $8 = $binary_size;
 $$expand_i1_val = 0;
 HEAP8[$9>>0] = $$expand_i1_val;
 $6 = $agg$result;
 $13 = $6;
 $5 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $3 = $15;
 $2 = $13;
 $16 = $2;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $__a$i$i = $18;
 $__i$i$i = 0;
 while(1) {
  $19 = $__i$i$i;
  $20 = ($19>>>0)<(3);
  if (!($20)) {
   break;
  }
  $21 = $__i$i$i;
  $22 = $__a$i$i;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $__i$i$i;
  $25 = (($24) + 1)|0;
  $__i$i$i = $25;
 }
 $26 = $7;
 $27 = $8;
 __THREW__ = 0;
 invoke_viii(52,($agg$result|0),($26|0),($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $10 = $31;
  $11 = $32;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $33 = $10;
  $34 = $11;
  ___resumeException($33|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$9>>0] = $$expand_i1_val2;
 $12 = 1;
 $$pre_trunc = HEAP8[$9>>0]|0;
 $30 = $$pre_trunc&1;
 if ($30) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN8cppcodec4data10uchar_dataINSt3__16vectorIhNS2_9allocatorIhEEEEEEPKhRKT_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = (__ZN8cppcodec4data9char_dataINSt3__16vectorIhNS2_9allocatorIhEEEEEEPKcRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8cppcodec4data4sizeINSt3__16vectorIhNS2_9allocatorIhEEEEEEjRKT_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $t;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEvRT_PKhj($encoded_result,$binary,$binary_size) {
 $encoded_result = $encoded_result|0;
 $binary = $binary|0;
 $binary_size = $binary_size|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encoded_buffer_size = 0, $state = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 18|0;
 $state = sp + 17|0;
 $3 = sp + 16|0;
 $0 = $encoded_result;
 $1 = $binary;
 $2 = $binary_size;
 $4 = $2;
 $5 = (__ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE12encoded_sizeEj($4)|0);
 $encoded_buffer_size = $5;
 $6 = $0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
 __ZN8cppcodec4data12create_stateINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEENS0_18empty_result_stateERT_NS0_9general_tE($state,$6,$$byval_copy);
 $7 = $0;
 $8 = $encoded_buffer_size;
 __ZN8cppcodec4data4initINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEj($7,$state,$8);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 __ZN8cppcodec6detail12stream_codecINS0_6base64INS0_14base64_rfc4648EEES3_E6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_4data18empty_result_stateEEEvRT_RT0_PKhj($9,$state,$10,$11);
 $12 = $0;
 __ZN8cppcodec4data6finishINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateE($12,$state);
 $13 = $0;
 $14 = (__ZN8cppcodec4data4sizeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEjRKT_($13)|0);
 $15 = $encoded_buffer_size;
 $16 = ($14|0)==($15|0);
 if ($16) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11765|0),(11815|0),176,(11843|0));
  // unreachable;
 }
}
function __ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE12encoded_sizeEj($binary_size) {
 $binary_size = $binary_size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $binary_size;
 $1 = $0;
 $2 = (__ZN8cppcodec6detail12stream_codecINS0_6base64INS0_14base64_rfc4648EEES3_E12encoded_sizeEj($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8cppcodec4data12create_stateINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEENS0_18empty_result_stateERT_NS0_9general_tE($agg$result,$0,$1) {
 $agg$result = $agg$result|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN8cppcodec4data4initINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEj($result,$0,$capacity) {
 $result = $result|0;
 $0 = $0|0;
 $capacity = $capacity|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $result;
 $4 = $0;
 $5 = $capacity;
 $6 = $3;
 $1 = $6;
 $2 = 0;
 $7 = $1;
 $8 = $2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($7,$8,0);
 $9 = $3;
 $10 = $5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($9,$10);
 STACKTOP = sp;return;
}
function __ZN8cppcodec6detail12stream_codecINS0_6base64INS0_14base64_rfc4648EEES3_E6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_4data18empty_result_stateEEEvRT_RT0_PKhj($encoded_result,$state,$src,$src_size) {
 $encoded_result = $encoded_result|0;
 $state = $state|0;
 $src = $src|0;
 $src_size = $src_size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$i$i$i = 0, $i$i$i$i$i = 0, $num_symbols = 0, $pad$i$i = 0, $pad$i$i$i = 0, $remaining_src_len = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad$i$i$i = sp + 290|0;
 $pad$i$i = sp + 288|0;
 $48 = sp + 285|0;
 $70 = $encoded_result;
 $71 = $state;
 $72 = $src;
 $73 = $src_size;
 $74 = $72;
 $75 = $73;
 $76 = (($74) + ($75)|0);
 $src_end = $76;
 $77 = $73;
 $78 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv()|0);
 $79 = $78&255;
 $80 = ($77>>>0)>=($79>>>0);
 if ($80) {
  $81 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv()|0);
  $82 = $81&255;
  $83 = $src_end;
  $84 = (0 - ($82))|0;
  $85 = (($83) + ($84)|0);
  $src_end = $85;
  while(1) {
   $86 = $72;
   $87 = $src_end;
   $88 = ($86>>>0)<=($87>>>0);
   if (!($88)) {
    break;
   }
   $89 = $70;
   $90 = $71;
   $91 = $72;
   $67 = $89;
   $68 = $90;
   $69 = $91;
   $92 = $67;
   $93 = $68;
   $94 = $69;
   $64 = $92;
   $65 = $93;
   $66 = $94;
   $95 = $64;
   $96 = $65;
   $97 = $66;
   $61 = $95;
   $62 = $96;
   $63 = $97;
   $98 = $61;
   $99 = $62;
   $100 = $63;
   $58 = $98;
   $59 = $99;
   $60 = $100;
   $101 = $58;
   $102 = $59;
   $103 = $60;
   $55 = $101;
   $56 = $102;
   $57 = $103;
   $104 = $58;
   $105 = $59;
   $106 = $60;
   $54 = $106;
   $107 = $54;
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 >> 2;
   $111 = $110&255;
   $112 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($111)|0);
   __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($104,$105,$112);
   $113 = $61;
   $114 = $62;
   $115 = $63;
   $53 = $115;
   $116 = $53;
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = $118 & 3;
   $120 = $119 << 4;
   $121 = $53;
   $122 = ((($121)) + 1|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $124 >> 4;
   $126 = $120 | $125;
   $127 = $126&255;
   $128 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($127)|0);
   __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($113,$114,$128);
   $129 = $64;
   $130 = $65;
   $131 = $66;
   $52 = $131;
   $132 = $52;
   $133 = ((($132)) + 1|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = $135 & 15;
   $137 = $136 << 2;
   $138 = $52;
   $139 = ((($138)) + 2|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = $141 >> 6;
   $143 = $137 | $142;
   $144 = $143&255;
   $145 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($144)|0);
   __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($129,$130,$145);
   $146 = $67;
   $147 = $68;
   $148 = $69;
   $51 = $148;
   $149 = $51;
   $150 = ((($149)) + 2|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = $152 & 63;
   $154 = $153&255;
   $155 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($154)|0);
   __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($146,$147,$155);
   $156 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv()|0);
   $157 = $156&255;
   $158 = $72;
   $159 = (($158) + ($157)|0);
   $72 = $159;
  }
  $160 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv()|0);
  $161 = $160&255;
  $162 = $src_end;
  $163 = (($162) + ($161)|0);
  $src_end = $163;
 }
 $164 = $src_end;
 $165 = $72;
 $166 = ($164>>>0)>($165>>>0);
 if (!($166)) {
  STACKTOP = sp;return;
 }
 $167 = $src_end;
 $168 = $72;
 $169 = $167;
 $170 = $168;
 $171 = (($169) - ($170))|0;
 $remaining_src_len = $171;
 $172 = $remaining_src_len;
 $173 = ($172|0)!=(0);
 if (!($173)) {
  _abort();
  // unreachable;
 }
 $174 = $remaining_src_len;
 $175 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv()|0);
 $176 = $175&255;
 $177 = ($174|0)>=($176|0);
 if ($177) {
  _abort();
  // unreachable;
 }
 $178 = $remaining_src_len;
 $179 = $178&255;
 $46 = $179;
 $180 = $46;
 $181 = $180&255;
 $182 = ($181|0)==(1);
 $$expand_i1_val = 0;
 HEAP8[$48>>0] = $$expand_i1_val;
 if ($182) {
  $199 = 2;
 } else {
  $183 = $46;
  $184 = $183&255;
  $185 = ($184|0)==(2);
  if ($185) {
   $199 = 3;
  } else {
   $186 = (___cxa_allocate_exception(8)|0);
   $47 = $186;
   $$expand_i1_val2 = 1;
   HEAP8[$48>>0] = $$expand_i1_val2;
   $44 = $186;
   $45 = 11914;
   $187 = $44;
   $188 = $45;
   __THREW__ = 0;
   invoke_vii(53,($187|0),($188|0));
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if (!($190)) {
    $191 = 9504;
    HEAP32[$187>>2] = $191;
    ___cxa_throw(($186|0),(232|0),(8|0));
    // unreachable;
   }
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $49 = $192;
   $50 = $193;
   $$pre_trunc = HEAP8[$48>>0]|0;
   $194 = $$pre_trunc&1;
   if (!($194)) {
    $196 = $49;
    $197 = $50;
    ___resumeException($196|0);
    // unreachable;
   }
   $195 = $47;
   ___cxa_free_exception(($195|0));
   $196 = $49;
   $197 = $50;
   ___resumeException($196|0);
   // unreachable;
  }
 }
 $198 = $199&255;
 $num_symbols = $198;
 $200 = $70;
 $201 = $71;
 $202 = $72;
 $203 = $num_symbols;
 $40 = $200;
 $41 = $201;
 $42 = $202;
 $43 = $203;
 $204 = $43;
 $205 = $204&255;
 $206 = ($205|0)==(1);
 $207 = $40;
 $208 = $41;
 $209 = $42;
 if ($206) {
  $37 = $209;
  $210 = (___cxa_allocate_exception(8)|0);
  $35 = $210;
  $36 = 11954;
  $211 = $35;
  $212 = $36;
  __THREW__ = 0;
  invoke_vii(53,($211|0),($212|0));
  $213 = __THREW__; __THREW__ = 0;
  $214 = $213&1;
  if ($214) {
   $216 = ___cxa_find_matching_catch()|0;
   $217 = tempRet0;
   $38 = $216;
   $39 = $217;
   ___cxa_free_exception(($210|0));
   $218 = $38;
   $219 = $39;
   ___resumeException($218|0);
   // unreachable;
  } else {
   $215 = 9504;
   HEAP32[$211>>2] = $215;
   ___cxa_throw(($210|0),(232|0),(8|0));
   // unreachable;
  }
 }
 $34 = $209;
 $220 = $34;
 $221 = HEAP8[$220>>0]|0;
 $222 = $221&255;
 $223 = $222 >> 2;
 $224 = $223&255;
 $225 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($224)|0);
 __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($207,$208,$225);
 $226 = $40;
 $227 = $41;
 $228 = $42;
 $229 = $43;
 $30 = $226;
 $31 = $227;
 $32 = $228;
 $33 = $229;
 $230 = $33;
 $231 = $230&255;
 $232 = ($231|0)==(2);
 $233 = $30;
 $234 = $31;
 $235 = $32;
 if ($232) {
  $29 = $235;
  $236 = $29;
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $238 & 3;
  $240 = $239 << 4;
  $241 = $240&255;
  $242 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($241)|0);
  __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($233,$234,$242);
  $243 = $30;
  $244 = $31;
  $245 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE18encoded_block_sizeEv()|0);
  $246 = $245&255;
  $247 = (($246) - 2)|0;
  $1 = $pad$i$i;
  $2 = $243;
  $3 = $244;
  $4 = $247;
  $i$i$i$i = 0;
  while(1) {
   $248 = $i$i$i$i;
   $249 = $4;
   $250 = ($248|0)<($249|0);
   if (!($250)) {
    break;
   }
   $251 = $2;
   $252 = $3;
   $253 = (__ZN8cppcodec6detail14base64_rfc464814padding_symbolEv()|0);
   __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($251,$252,$253);
   $254 = $i$i$i$i;
   $255 = (($254) + 1)|0;
   $i$i$i$i = $255;
  }
  STACKTOP = sp;return;
 }
 $0 = $235;
 $256 = $0;
 $257 = HEAP8[$256>>0]|0;
 $258 = $257&255;
 $259 = $258 & 3;
 $260 = $259 << 4;
 $261 = $0;
 $262 = ((($261)) + 1|0);
 $263 = HEAP8[$262>>0]|0;
 $264 = $263&255;
 $265 = $264 >> 4;
 $266 = $260 | $265;
 $267 = $266&255;
 $268 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($267)|0);
 __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($233,$234,$268);
 $269 = $30;
 $270 = $31;
 $271 = $32;
 $272 = $33;
 $25 = $269;
 $26 = $270;
 $27 = $271;
 $28 = $272;
 $273 = $28;
 $274 = $273&255;
 $275 = ($274|0)==(3);
 $276 = $25;
 $277 = $26;
 $278 = $27;
 if ($275) {
  $24 = $278;
  $279 = $24;
  $280 = ((($279)) + 1|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = $282 & 15;
  $284 = $283 << 2;
  $285 = $284&255;
  $286 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($285)|0);
  __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($276,$277,$286);
  $287 = $25;
  $288 = $26;
  $289 = (__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE18encoded_block_sizeEv()|0);
  $290 = $289&255;
  $291 = (($290) - 3)|0;
  $6 = $pad$i$i$i;
  $7 = $287;
  $8 = $288;
  $9 = $291;
  $i$i$i$i$i = 0;
  while(1) {
   $292 = $i$i$i$i$i;
   $293 = $9;
   $294 = ($292|0)<($293|0);
   if (!($294)) {
    break;
   }
   $295 = $7;
   $296 = $8;
   $297 = (__ZN8cppcodec6detail14base64_rfc464814padding_symbolEv()|0);
   __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($295,$296,$297);
   $298 = $i$i$i$i$i;
   $299 = (($298) + 1)|0;
   $i$i$i$i$i = $299;
  }
  STACKTOP = sp;return;
 }
 $5 = $278;
 $300 = $5;
 $301 = ((($300)) + 1|0);
 $302 = HEAP8[$301>>0]|0;
 $303 = $302&255;
 $304 = $303 & 15;
 $305 = $304 << 2;
 $306 = $5;
 $307 = ((($306)) + 2|0);
 $308 = HEAP8[$307>>0]|0;
 $309 = $308&255;
 $310 = $309 >> 6;
 $311 = $305 | $310;
 $312 = $311&255;
 $313 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($312)|0);
 __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($276,$277,$313);
 $314 = $25;
 $315 = $26;
 $316 = $27;
 $317 = $28;
 $20 = $314;
 $21 = $315;
 $22 = $316;
 $23 = $317;
 $318 = $23;
 $319 = $318&255;
 $320 = ($319|0)==(4);
 $321 = $20;
 $322 = $21;
 $323 = $22;
 if (!($320)) {
  $14 = $323;
  $334 = $14;
  $335 = ((($334)) + 2|0);
  $336 = HEAP8[$335>>0]|0;
  $337 = $336&255;
  $338 = $337 & 63;
  $339 = $338&255;
  $340 = (__ZN8cppcodec6detail14base64_rfc46486symbolEh($339)|0);
  __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($321,$322,$340);
  $341 = $20;
  $342 = $21;
  $343 = $22;
  $344 = $23;
  $10 = $341;
  $11 = $342;
  $12 = $343;
  $13 = $344;
  _abort();
  // unreachable;
 }
 $17 = $323;
 $324 = (___cxa_allocate_exception(8)|0);
 $15 = $324;
 $16 = 11954;
 $325 = $15;
 $326 = $16;
 __THREW__ = 0;
 invoke_vii(53,($325|0),($326|0));
 $327 = __THREW__; __THREW__ = 0;
 $328 = $327&1;
 if ($328) {
  $330 = ___cxa_find_matching_catch()|0;
  $331 = tempRet0;
  $18 = $330;
  $19 = $331;
  ___cxa_free_exception(($324|0));
  $332 = $18;
  $333 = $19;
  ___resumeException($332|0);
  // unreachable;
 } else {
  $329 = 9504;
  HEAP32[$325>>2] = $329;
  ___cxa_throw(($324|0),(232|0),(8|0));
  // unreachable;
 }
}
function __ZN8cppcodec4data6finishINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZN8cppcodec4data4sizeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEjRKT_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $t;
 $11 = $10;
 $9 = $11;
 $12 = $9;
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $6 = $14;
 $15 = $6;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 & 1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $2 = $12;
  $20 = $2;
  $1 = $20;
  $21 = $1;
  $0 = $21;
  $22 = $0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $24;
  STACKTOP = sp;return ($31|0);
 } else {
  $5 = $12;
  $25 = $5;
  $4 = $25;
  $26 = $4;
  $3 = $26;
  $27 = $3;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 >> 1;
  $31 = $30;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __ZN8cppcodec6detail12stream_codecINS0_6base64INS0_14base64_rfc4648EEES3_E12encoded_sizeEj($binary_size) {
 $binary_size = $binary_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $binary_size;
 $1 = $0;
 __THREW__ = 0;
 $2 = (invoke_i(54)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = $2&255;
  $6 = (($5) - 1)|0;
  $7 = (($1) + ($6))|0;
  $8 = $0;
  __THREW__ = 0;
  $9 = (invoke_i(54)|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = $9&255;
   $13 = (($12) - 1)|0;
   $14 = (($8) + ($13))|0;
   __THREW__ = 0;
   $15 = (invoke_i(54)|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    $18 = $15&255;
    $19 = (($14>>>0) % ($18>>>0))&-1;
    $20 = (($7) - ($19))|0;
    __THREW__ = 0;
    $21 = (invoke_i(55)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     $24 = $21&255;
     $25 = Math_imul($20, $24)|0;
     __THREW__ = 0;
     $26 = (invoke_i(54)|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $29 = $26&255;
      $30 = (($25>>>0) / ($29>>>0))&-1;
      STACKTOP = sp;return ($30|0);
     }
    }
   }
  }
 }
 $31 = ___cxa_find_matching_catch(0|0)|0;
 $32 = tempRet0;
 ___clang_call_terminate($31);
 // unreachable;
 return (0)|0;
}
function __ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE18encoded_block_sizeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN8cppcodec4data3putINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_RNS0_18empty_result_stateEh($result,$0,$c) {
 $result = $result|0;
 $0 = $0|0;
 $c = $c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $result;
 $2 = $0;
 $3 = $c;
 $4 = $1;
 $5 = $3;
 __ZN8cppcodec4data8put_implILb1EE3putINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEvRT_h($4,$5);
 STACKTOP = sp;return;
}
function __ZN8cppcodec6detail14base64_rfc46486symbolEh($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $0;
 $2 = $1&255;
 $3 = (11850 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN8cppcodec4data8put_implILb1EE3putINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEvRT_h($result,$c) {
 $result = $result|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $result;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 __ZN8cppcodec4data9put_uint8INSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_h($2,$3);
 STACKTOP = sp;return;
}
function __ZN8cppcodec4data9put_uint8INSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRT_h($result,$c) {
 $result = $result|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $result;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($2,$3);
 STACKTOP = sp;return;
}
function __ZN8cppcodec6detail14base64_rfc464814padding_symbolEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 61;
}
function __ZN8cppcodec4data9char_dataINSt3__16vectorIhNS2_9allocatorIhEEEEEEPKcRKT_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $t;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $0 = $5;
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJjjjEE6invokeEPFS8_jjjEjjj($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($8)|0);
 $10 = $2;
 $11 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($10)|0);
 $12 = $3;
 $13 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($12)|0);
 FUNCTION_TABLE_viiii[$7 & 63]($4,$9,$11,$13);
 __THREW__ = 0;
 $14 = (invoke_ii(56,($4|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $19 = $5;
  $20 = $6;
  ___resumeException($19|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEjjjEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEjjjEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjjjEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = $v;
 $48 = $47;
 $46 = $48;
 $49 = $46;
 $45 = $49;
 $50 = $45;
 $44 = $50;
 $51 = $44;
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if ($57) {
  $38 = $50;
  $58 = $38;
  $37 = $58;
  $59 = $37;
  $36 = $59;
  $60 = $36;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $70 = $62;
 } else {
  $41 = $50;
  $63 = $41;
  $40 = $63;
  $64 = $40;
  $39 = $64;
  $65 = $39;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 >> 1;
  $70 = $68;
 }
 $69 = (4 + ($70))|0;
 $71 = (_malloc($69)|0);
 $wt = $71;
 $72 = $47;
 $10 = $72;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $6 = $76;
 $77 = $6;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 1;
 $81 = ($80|0)!=(0);
 if ($81) {
  $2 = $74;
  $82 = $2;
  $1 = $82;
  $83 = $1;
  $0 = $83;
  $84 = $0;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $94 = $86;
 } else {
  $5 = $74;
  $87 = $5;
  $4 = $87;
  $88 = $4;
  $3 = $88;
  $89 = $3;
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 >> 1;
  $94 = $92;
 }
 $93 = $wt;
 HEAP32[$93>>2] = $94;
 $95 = $wt;
 $96 = ((($95)) + 4|0);
 $97 = $47;
 $24 = $97;
 $98 = $24;
 $23 = $98;
 $99 = $23;
 $22 = $99;
 $100 = $22;
 $21 = $100;
 $101 = $21;
 $20 = $101;
 $102 = $20;
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if ($106) {
  $14 = $99;
  $107 = $14;
  $13 = $107;
  $108 = $13;
  $12 = $108;
  $109 = $12;
  $110 = ((($109)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $118 = $111;
 } else {
  $19 = $99;
  $112 = $19;
  $18 = $112;
  $113 = $18;
  $17 = $113;
  $114 = $17;
  $115 = ((($114)) + 1|0);
  $16 = $115;
  $116 = $16;
  $15 = $116;
  $117 = $15;
  $118 = $117;
 }
 $11 = $118;
 $119 = $11;
 $120 = $47;
 $35 = $120;
 $121 = $35;
 $34 = $121;
 $122 = $34;
 $33 = $122;
 $123 = $33;
 $32 = $123;
 $124 = $32;
 $31 = $124;
 $125 = $31;
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $127 & 1;
 $129 = ($128|0)!=(0);
 if ($129) {
  $27 = $122;
  $130 = $27;
  $26 = $130;
  $131 = $26;
  $25 = $131;
  $132 = $25;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $141 = $134;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 } else {
  $30 = $122;
  $135 = $30;
  $29 = $135;
  $136 = $29;
  $28 = $136;
  $137 = $28;
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 >> 1;
  $141 = $140;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjjjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (472|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12100|0);
}
function __GLOBAL__sub_I_function_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ti;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___strdup($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(12106|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(12111|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(12116);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(12121);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(12133);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(12147);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(12153);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(12168);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(12172);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(12185);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(12190);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(12204);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(12210);
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(12217|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(12229|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(12262|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(12275|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(12291);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(12321);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(12358);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(12397);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(12428);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(12468);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(12497);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(12535);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(12565);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(12604);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(12636);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(12669);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(12702);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(12736);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(12769);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(12803);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(12834);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(12866);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init17();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 255;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $2 = $0;
 $3 = -32768 << 16 >> 16;
 $4 = 32767 << 16 >> 16;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 65535;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (48|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (56|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (72|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (80|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (88|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (96|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (104|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (120|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (128|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (136|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (144|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (168|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (432|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (424|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (416|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (408|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (400|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (392|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (376|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (360|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (368|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (336|0);
}
function ___cxx_global_var_init17() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(13420);
 return;
}
function _png_zalloc($png_ptr,$items,$size) {
 $png_ptr = $png_ptr|0;
 $items = $items|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (4294967295 / ($size>>>0))&-1;
 $2 = ($1>>>0)>($items>>>0);
 if ($2) {
  $3 = Math_imul($size, $items)|0;
  $4 = (_png_malloc_warn($png_ptr,$3)|0);
  $$0 = $4;
  return ($$0|0);
 } else {
  _png_warning($png_ptr,13421);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _png_zfree($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _png_free($png_ptr,$ptr);
 return;
}
function _png_reset_crc($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_crc32(0,0,0)|0);
 $1 = ((($png_ptr)) + 412|0);
 HEAP32[$1>>2] = $0;
 return;
}
function _png_calculate_crc($png_ptr,$ptr,$length) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 $length = $length|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $crc$0 = 0, $need_crc$0 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 376|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 536870912;
 $3 = ($2|0)==(0);
 $4 = ((($png_ptr)) + 212|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 768;
 $not$ = ($6|0)!=(768);
 $7 = $5 & 2048;
 $8 = ($7|0)==(0);
 $need_crc$0 = $3 ? $8 : $not$;
 $9 = ($length|0)!=(0);
 $or$cond = $9 & $need_crc$0;
 if (!($or$cond)) {
  return;
 }
 $10 = ((($png_ptr)) + 412|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $ptr;$$02 = $length;$crc$0 = $11;
 while(1) {
  $12 = ($$02|0)==(0);
  $$ = $12 ? -1 : $$02;
  $13 = (_crc32($crc$0,$$0,$$)|0);
  $14 = (($$0) + ($$)|0);
  $15 = (($$02) - ($$))|0;
  $16 = ($$02|0)==($$|0);
  if ($16) {
   $$lcssa = $13;
   break;
  } else {
   $$0 = $14;$$02 = $15;$crc$0 = $13;
  }
 }
 HEAP32[$10>>2] = $$lcssa;
 return;
}
function _png_user_version_check($png_ptr,$user_png_ver) {
 $png_ptr = $png_ptr|0;
 $user_png_ver = $user_png_ver|0;
 var $$0 = 0, $$found_dots$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $found_dots$0 = 0, $i$0 = 0, $m = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $0 = ($user_png_ver|0)==(0|0);
 $1 = ((($png_ptr)) + 212|0);
 if ($0) {
  $15 = HEAP32[$1>>2]|0;
  $16 = $15 | 131072;
  HEAP32[$1>>2] = $16;
  $18 = $16;
 } else {
  $found_dots$0 = 0;$i$0 = -1;
  while(1) {
   $2 = (($i$0) + 1)|0;
   $3 = (($user_png_ver) + ($2)|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = (13456 + ($2)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($4<<24>>24)==($6<<24>>24);
   if (!($7)) {
    $8 = HEAP32[$1>>2]|0;
    $9 = $8 | 131072;
    HEAP32[$1>>2] = $9;
   }
   $10 = ($4<<24>>24)==(46);
   $11 = $10&1;
   $$found_dots$0 = (($11) + ($found_dots$0))|0;
   $12 = ($$found_dots$0|0)<(2);
   if (!($12)) {
    break;
   }
   $13 = ($4<<24>>24)==(0);
   $14 = ($2|0)==(6);
   $or$cond = $14 | $13;
   if ($or$cond) {
    break;
   } else {
    $found_dots$0 = $$found_dots$0;$i$0 = $2;
   }
  }
  $$pre = HEAP32[$1>>2]|0;
  $18 = $$pre;
 }
 $17 = $18 & 131072;
 $19 = ($17|0)==(0);
 if ($19) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = (_png_safecat($m,128,0,13463)|0);
 $21 = (_png_safecat($m,128,$20,$user_png_ver)|0);
 $22 = (_png_safecat($m,128,$21,13494)|0);
 (_png_safecat($m,128,$22,13456)|0);
 _png_warning($png_ptr,$m);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _png_create_png_struct($user_png_ver,$error_ptr,$error_fn,$warn_fn,$mem_ptr,$malloc_fn,$free_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $$0$reg2mem$0 = 0, $$reg2mem38$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $create_jmp_buf = 0, $create_struct = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $create_struct = sp + 156|0;
 $create_jmp_buf = sp;
 _memset(($create_struct|0),0,900)|0;
 $0 = ((($create_struct)) + 748|0);
 HEAP32[$0>>2] = 1000000;
 $1 = ((($create_struct)) + 752|0);
 HEAP32[$1>>2] = 1000000;
 $2 = ((($create_struct)) + 756|0);
 HEAP32[$2>>2] = 1000;
 $3 = ((($create_struct)) + 760|0);
 HEAP32[$3>>2] = 8000000;
 __THREW__ = 0;
 invoke_viiii(57,($create_struct|0),($mem_ptr|0),($malloc_fn|0),($free_fn|0));
 $4 = __THREW__; __THREW__ = 0;
 if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = (threwValue); } else { $5 = -1; };
 $6 = tempRet0;
 $cond = ($5|0)==(1);
 if ($cond) {
  $$reg2mem38$0 = $6;
 } else {
  __THREW__ = 0;
  invoke_viiii(58,($create_struct|0),($error_ptr|0),($error_fn|0),($warn_fn|0));
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond1 = ($8|0)==(1);
  if ($cond1) {
   $$reg2mem38$0 = $9;
  } else {
   _setjmpTable = _saveSetjmp($create_jmp_buf,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
   $12 = tempRet0;
   $cond2 = ($11|0)==(1);
   if ($cond2) {
    $$reg2mem38$0 = $12;
   } else {
    $$reg2mem38$0 = 0;
   }
  }
 }
 while(1) {
  $13 = ($$reg2mem38$0|0)==(0);
  if (!($13)) {
   $$0$reg2mem$0 = 0;
   label = 11;
   break;
  }
  $14 = ((($create_struct)) + 160|0);
  HEAP32[$14>>2] = $create_jmp_buf;
  $15 = ((($create_struct)) + 164|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($create_struct)) + 156|0);
  HEAP32[$16>>2] = 59;
  __THREW__ = 0;
  $17 = (invoke_iii(60,($create_struct|0),($user_png_ver|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
  $20 = tempRet0;
  $cond3 = ($19|0)==(1);
  if ($cond3) {
   $$reg2mem38$0 = $20;
   continue;
  }
  $21 = ($17|0)==(0);
  if ($21) {
   $$0$reg2mem$0 = 0;
   label = 11;
   break;
  }
  __THREW__ = 0;
  $22 = (invoke_iii(61,($create_struct|0),900)|0);
  $23 = __THREW__; __THREW__ = 0;
  if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
  $25 = tempRet0;
  $cond4 = ($24|0)==(1);
  if ($cond4) {
   $$reg2mem38$0 = $25;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $26 = ($22|0)==(0|0);
  if ($26) {
   $$0$reg2mem$0 = 0;
   _free(_setjmpTable|0);
   STACKTOP = sp;return ($$0$reg2mem$0|0);
  }
  $27 = ((($create_struct)) + 256|0);
  HEAP32[$27>>2] = 62;
  $28 = ((($create_struct)) + 260|0);
  HEAP32[$28>>2] = 63;
  $29 = ((($create_struct)) + 264|0);
  HEAP32[$29>>2] = $22;
  HEAP32[$14>>2] = 0;
  HEAP32[$15>>2] = 0;
  HEAP32[$16>>2] = 0;
  _memcpy(($22|0),($create_struct|0),900)|0;
  $$0$reg2mem$0 = $22;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 else if ((label|0) == 11) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 return (0)|0;
}
function _png_create_info_struct($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_png_malloc_base($png_ptr,268)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = $1;
  } else {
   _memset(($1|0),0,268)|0;
   $$0 = $1;
  }
 }
 return ($$0|0);
}
function _png_destroy_info_struct($png_ptr,$info_ptr_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr_ptr = $info_ptr_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 $2 = HEAP32[$info_ptr_ptr>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 HEAP32[$info_ptr_ptr>>2] = 0;
 _png_free_data($png_ptr,$2,32767,-1);
 _memset(($2|0),0,268)|0;
 _png_free($png_ptr,$2);
 return;
}
function _png_free_data($png_ptr,$info_ptr,$mask,$num) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $mask = $mask|0;
 $num = $num|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre24 = 0, $$pre25 = 0, $$pre26 = 0, $$pre28 = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $$pre35 = 0, $$pre37 = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre43 = 0, $$pre45 = 0, $$pre46 = 0, $$pre46$pre = 0, $$pre49 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $mask$ = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 $2 = ((($info_ptr)) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $$pre49 = ((($info_ptr)) + 232|0);
   $$pre$phiZ2D = $$pre49;
  } else {
   $5 = $mask & 16384;
   $6 = ((($info_ptr)) + 232|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $5 & $7;
   $9 = ($8|0)==(0);
   if ($9) {
    $$pre$phiZ2D = $6;
   } else {
    $10 = ($num|0)==(-1);
    if (!($10)) {
     $18 = (((($3) + (($num*28)|0)|0)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     _png_free($png_ptr,$19);
     $20 = HEAP32[$2>>2]|0;
     $21 = (((($20) + (($num*28)|0)|0)) + 4|0);
     HEAP32[$21>>2] = 0;
     $$pre$phiZ2D = $6;
     break;
    }
    $11 = ((($info_ptr)) + 128|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)>(0);
    if ($13) {
     $14 = ((($3)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     _png_free($png_ptr,$15);
     $16 = HEAP32[$11>>2]|0;
     $17 = ($16|0)>(1);
     if ($17) {
      $23 = 1;
      while(1) {
       $$pre = HEAP32[$2>>2]|0;
       $22 = (((($$pre) + (($23*28)|0)|0)) + 4|0);
       $24 = HEAP32[$22>>2]|0;
       _png_free($png_ptr,$24);
       $25 = (($23) + 1)|0;
       $26 = HEAP32[$11>>2]|0;
       $27 = ($25|0)<($26|0);
       if ($27) {
        $23 = $25;
       } else {
        break;
       }
      }
     }
     $$pre24 = HEAP32[$2>>2]|0;
     $28 = $$pre24;
    } else {
     $28 = $3;
    }
    _png_free($png_ptr,$28);
    HEAP32[$2>>2] = 0;
    HEAP32[$11>>2] = 0;
    $$pre$phiZ2D = $6;
   }
  }
 } while(0);
 $29 = $mask & 8192;
 $30 = HEAP32[$$pre$phiZ2D>>2]|0;
 $31 = $29 & $30;
 $32 = ($31|0)==(0);
 if ($32) {
  $41 = $30;
 } else {
  $33 = ((($info_ptr)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & -17;
  HEAP32[$33>>2] = $35;
  $36 = ((($info_ptr)) + 156|0);
  $37 = HEAP32[$36>>2]|0;
  _png_free($png_ptr,$37);
  HEAP32[$36>>2] = 0;
  $38 = ((($info_ptr)) + 22|0);
  HEAP16[$38>>1] = 0;
  $$pre25 = HEAP32[$$pre$phiZ2D>>2]|0;
  $41 = $$pre25;
 }
 $39 = $mask & 256;
 $40 = $39 & $41;
 $42 = ($40|0)==(0);
 if ($42) {
  $52 = $41;
 } else {
  $43 = ((($info_ptr)) + 256|0);
  $44 = HEAP32[$43>>2]|0;
  _png_free($png_ptr,$44);
  $45 = ((($info_ptr)) + 260|0);
  $46 = HEAP32[$45>>2]|0;
  _png_free($png_ptr,$46);
  HEAP32[$43>>2] = 0;
  HEAP32[$45>>2] = 0;
  $47 = ((($info_ptr)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & -16385;
  HEAP32[$47>>2] = $49;
  $$pre26 = HEAP32[$$pre$phiZ2D>>2]|0;
  $52 = $$pre26;
 }
 $50 = $mask & 128;
 $51 = $50 & $52;
 $53 = ($51|0)==(0);
 if ($53) {
  $80 = $52;
 } else {
  $54 = ((($info_ptr)) + 208|0);
  $55 = HEAP32[$54>>2]|0;
  _png_free($png_ptr,$55);
  $56 = ((($info_ptr)) + 220|0);
  $57 = HEAP32[$56>>2]|0;
  _png_free($png_ptr,$57);
  HEAP32[$54>>2] = 0;
  HEAP32[$56>>2] = 0;
  $58 = ((($info_ptr)) + 224|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = ((($info_ptr)) + 229|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $74 = $59;
   } else {
    $64 = HEAP32[$59>>2]|0;
    _png_free($png_ptr,$64);
    $65 = HEAP8[$61>>0]|0;
    $66 = ($65&255)>(1);
    if ($66) {
     $68 = 1;
     while(1) {
      $$pre28 = HEAP32[$58>>2]|0;
      $67 = (($$pre28) + ($68<<2)|0);
      $69 = HEAP32[$67>>2]|0;
      _png_free($png_ptr,$69);
      $70 = (($68) + 1)|0;
      $71 = HEAP8[$61>>0]|0;
      $72 = $71&255;
      $73 = ($70|0)<($72|0);
      if ($73) {
       $68 = $70;
      } else {
       break;
      }
     }
    }
    $$pre30 = HEAP32[$58>>2]|0;
    $74 = $$pre30;
   }
   _png_free($png_ptr,$74);
   HEAP32[$58>>2] = 0;
  }
  $75 = ((($info_ptr)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 & -1025;
  HEAP32[$75>>2] = $77;
  $$pre31 = HEAP32[$$pre$phiZ2D>>2]|0;
  $80 = $$pre31;
 }
 $78 = $mask & 16;
 $79 = $78 & $80;
 $81 = ($79|0)==(0);
 if (!($81)) {
  $82 = ((($info_ptr)) + 116|0);
  $83 = HEAP32[$82>>2]|0;
  _png_free($png_ptr,$83);
  $84 = ((($info_ptr)) + 120|0);
  $85 = HEAP32[$84>>2]|0;
  _png_free($png_ptr,$85);
  HEAP32[$82>>2] = 0;
  HEAP32[$84>>2] = 0;
  $86 = ((($info_ptr)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 & -4097;
  HEAP32[$86>>2] = $88;
 }
 $89 = ((($info_ptr)) + 244|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 do {
  if (!($91)) {
   $92 = $mask & 32;
   $93 = HEAP32[$$pre$phiZ2D>>2]|0;
   $94 = $92 & $93;
   $95 = ($94|0)==(0);
   if (!($95)) {
    $96 = ($num|0)==(-1);
    if (!($96)) {
     $106 = (($90) + ($num<<4)|0);
     $107 = HEAP32[$106>>2]|0;
     _png_free($png_ptr,$107);
     $108 = HEAP32[$89>>2]|0;
     $109 = (((($108) + ($num<<4)|0)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     _png_free($png_ptr,$110);
     $111 = HEAP32[$89>>2]|0;
     $112 = (($111) + ($num<<4)|0);
     HEAP32[$112>>2] = 0;
     $113 = (((($111) + ($num<<4)|0)) + 8|0);
     HEAP32[$113>>2] = 0;
     break;
    }
    $97 = ((($info_ptr)) + 248|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)>(0);
    if ($99) {
     $100 = HEAP32[$90>>2]|0;
     _png_free($png_ptr,$100);
     $101 = HEAP32[$89>>2]|0;
     $102 = ((($101)) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     _png_free($png_ptr,$103);
     $104 = HEAP32[$97>>2]|0;
     $105 = ($104|0)>(1);
     if ($105) {
      $115 = 1;
      while(1) {
       $$pre33 = HEAP32[$89>>2]|0;
       $114 = (($$pre33) + ($115<<4)|0);
       $116 = HEAP32[$114>>2]|0;
       _png_free($png_ptr,$116);
       $117 = HEAP32[$89>>2]|0;
       $118 = (((($117) + ($115<<4)|0)) + 8|0);
       $119 = HEAP32[$118>>2]|0;
       _png_free($png_ptr,$119);
       $120 = (($115) + 1)|0;
       $121 = HEAP32[$97>>2]|0;
       $122 = ($120|0)<($121|0);
       if ($122) {
        $115 = $120;
       } else {
        break;
       }
      }
     }
     $$pre35 = HEAP32[$89>>2]|0;
     $123 = $$pre35;
    } else {
     $123 = $90;
    }
    _png_free($png_ptr,$123);
    HEAP32[$89>>2] = 0;
    HEAP32[$97>>2] = 0;
    $124 = ((($info_ptr)) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $125 & -8193;
    HEAP32[$124>>2] = $126;
   }
  }
 } while(0);
 $127 = ((($info_ptr)) + 236|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128|0)==(0|0);
 do {
  if (!($129)) {
   $130 = $mask & 512;
   $131 = HEAP32[$$pre$phiZ2D>>2]|0;
   $132 = $130 & $131;
   $133 = ($132|0)==(0);
   if (!($133)) {
    $134 = ($num|0)==(-1);
    if (!($134)) {
     $142 = (((($128) + (($num*20)|0)|0)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     _png_free($png_ptr,$143);
     $144 = HEAP32[$127>>2]|0;
     $145 = (((($144) + (($num*20)|0)|0)) + 8|0);
     HEAP32[$145>>2] = 0;
     break;
    }
    $135 = ((($info_ptr)) + 240|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)>(0);
    if ($137) {
     $138 = ((($128)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     _png_free($png_ptr,$139);
     $140 = HEAP32[$135>>2]|0;
     $141 = ($140|0)>(1);
     if ($141) {
      $147 = 1;
      while(1) {
       $$pre37 = HEAP32[$127>>2]|0;
       $146 = (((($$pre37) + (($147*20)|0)|0)) + 8|0);
       $148 = HEAP32[$146>>2]|0;
       _png_free($png_ptr,$148);
       $149 = (($147) + 1)|0;
       $150 = HEAP32[$135>>2]|0;
       $151 = ($149|0)<($150|0);
       if ($151) {
        $147 = $149;
       } else {
        break;
       }
      }
     }
     $$pre39 = HEAP32[$127>>2]|0;
     $152 = $$pre39;
    } else {
     $152 = $128;
    }
    _png_free($png_ptr,$152);
    HEAP32[$127>>2] = 0;
    HEAP32[$135>>2] = 0;
   }
  }
 } while(0);
 $153 = $mask & 8;
 $154 = HEAP32[$$pre$phiZ2D>>2]|0;
 $155 = $153 & $154;
 $156 = ($155|0)==(0);
 if ($156) {
  $164 = $154;
 } else {
  $157 = ((($info_ptr)) + 204|0);
  $158 = HEAP32[$157>>2]|0;
  _png_free($png_ptr,$158);
  HEAP32[$157>>2] = 0;
  $159 = ((($info_ptr)) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 & -65;
  HEAP32[$159>>2] = $161;
  $$pre40 = HEAP32[$$pre$phiZ2D>>2]|0;
  $164 = $$pre40;
 }
 $162 = $mask & 4096;
 $163 = $162 & $164;
 $165 = ($163|0)==(0);
 if ($165) {
  $174 = $164;
 } else {
  $166 = ((($info_ptr)) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  _png_free($png_ptr,$167);
  HEAP32[$166>>2] = 0;
  $168 = ((($info_ptr)) + 8|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 & -9;
  HEAP32[$168>>2] = $170;
  $171 = ((($info_ptr)) + 20|0);
  HEAP16[$171>>1] = 0;
  $$pre41 = HEAP32[$$pre$phiZ2D>>2]|0;
  $174 = $$pre41;
 }
 $172 = $mask & 64;
 $173 = $172 & $174;
 $175 = ($173|0)==(0);
 if ($175) {
  $199 = $174;
 } else {
  $176 = ((($info_ptr)) + 264|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($177|0)==(0|0);
  if ($178) {
   $$pre46 = $174;
  } else {
   $179 = ((($info_ptr)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(0);
   if ($181) {
    $191 = $177;
   } else {
    $182 = HEAP32[$177>>2]|0;
    _png_free($png_ptr,$182);
    $183 = HEAP32[$179>>2]|0;
    $184 = ($183>>>0)>(1);
    if ($184) {
     $186 = 1;
     while(1) {
      $$pre43 = HEAP32[$176>>2]|0;
      $185 = (($$pre43) + ($186<<2)|0);
      $187 = HEAP32[$185>>2]|0;
      _png_free($png_ptr,$187);
      $188 = (($186) + 1)|0;
      $189 = HEAP32[$179>>2]|0;
      $190 = ($188>>>0)<($189>>>0);
      if ($190) {
       $186 = $188;
      } else {
       break;
      }
     }
    }
    $$pre45 = HEAP32[$176>>2]|0;
    $191 = $$pre45;
   }
   _png_free($png_ptr,$191);
   HEAP32[$176>>2] = 0;
   $$pre46$pre = HEAP32[$$pre$phiZ2D>>2]|0;
   $$pre46 = $$pre46$pre;
  }
  $192 = ((($info_ptr)) + 8|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $193 & -32769;
  HEAP32[$192>>2] = $194;
  $199 = $$pre46;
 }
 $195 = ($num|0)==(-1);
 $196 = $mask & -16929;
 $mask$ = $195 ? $mask : $196;
 $197 = $mask$ ^ -1;
 $198 = $199 & $197;
 HEAP32[$$pre$phiZ2D>>2] = $198;
 return;
}
function _png_get_io_ptr($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($png_ptr)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 return ($$0|0);
}
function _png_save_int_32($buf,$i) {
 $buf = $buf|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $i >>> 24;
 $1 = $0&255;
 HEAP8[$buf>>0] = $1;
 $2 = $i >>> 16;
 $3 = $2&255;
 $4 = ((($buf)) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $i >>> 8;
 $6 = $5&255;
 $7 = ((($buf)) + 2|0);
 HEAP8[$7>>0] = $6;
 $8 = $i&255;
 $9 = ((($buf)) + 3|0);
 HEAP8[$9>>0] = $8;
 return;
}
function _png_handle_as_unknown($png_ptr,$chunk_name) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p$0 = 0, $p$0$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($chunk_name|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($png_ptr)) + 692|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($png_ptr)) + 696|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3*5)|0;
 $8 = (($6) + ($7)|0);
 $p$0 = $8;
 while(1) {
  $9 = ((($p$0)) + -5|0);
  $10 = (_memcmp($chunk_name,$9,4)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $p$0$lcssa = $p$0;
   break;
  }
  $15 = ($9>>>0)>($6>>>0);
  if ($15) {
   $p$0 = $9;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $12 = ((($p$0$lcssa)) + -1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $$0 = $14;
 return ($$0|0);
}
function _png_zstream_error($png_ptr,$ret) {
 $png_ptr = $png_ptr|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 248|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   do {
    switch ($ret|0) {
    case -7:  {
     HEAP32[$0>>2] = 13681;
     break L1;
     break;
    }
    case 1:  {
     HEAP32[$0>>2] = 13541;
     break L1;
     break;
    }
    case 2:  {
     HEAP32[$0>>2] = 13569;
     break L1;
     break;
    }
    case -1:  {
     HEAP32[$0>>2] = 13591;
     break L1;
     break;
    }
    case -2:  {
     HEAP32[$0>>2] = 13605;
     break L1;
     break;
    }
    case -3:  {
     HEAP32[$0>>2] = 13628;
     break L1;
     break;
    }
    case -4:  {
     HEAP32[$0>>2] = 18235;
     break L1;
     break;
    }
    case -5:  {
     HEAP32[$0>>2] = 13646;
     break L1;
     break;
    }
    case -6:  {
     HEAP32[$0>>2] = 13656;
     break L1;
     break;
    }
    default: {
     HEAP32[$0>>2] = 13513;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _png_check_IHDR($png_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, $error$10 = 0, $error$11 = 0, $error$12 = 0, $error$13 = 0, $error$2 = 0, $error$3 = 0, $error$5 = 0, $error$6 = 0, $error$7 = 0, $error$8 = 0, $error$9 = 0, $or$cond = 0;
 var $or$cond15 = 0, $or$cond21 = 0, $or$cond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)==(0);
 if ($0) {
  _png_warning($png_ptr,13704);
  $error$2 = 1;
 } else {
  $1 = ($width|0)<(0);
  if ($1) {
   _png_warning($png_ptr,13732);
   $error$1 = 1;
  } else {
   $error$1 = 0;
  }
  $2 = (($width) + 7)|0;
  $3 = $2 & -8;
  $4 = ($3>>>0)>(536870904);
  if ($4) {
   _png_warning($png_ptr,13760);
   $error$2 = 1;
  } else {
   $error$2 = $error$1;
  }
 }
 $5 = ((($png_ptr)) + 748|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<($width>>>0);
 if ($7) {
  _png_warning($png_ptr,13807);
  $error$3 = 1;
 } else {
  $error$3 = $error$2;
 }
 $8 = ($height|0)==(0);
 if ($8) {
  _png_warning($png_ptr,13846);
  $error$5 = 1;
 } else {
  $9 = ($height|0)<(0);
  if ($9) {
   _png_warning($png_ptr,13875);
   $error$5 = 1;
  } else {
   $error$5 = $error$3;
  }
 }
 $10 = ((($png_ptr)) + 752|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<($height>>>0);
 if ($12) {
  _png_warning($png_ptr,13904);
  $error$6 = 1;
 } else {
  $error$6 = $error$5;
 }
 switch ($bit_depth|0) {
 case 1: case 2: case 4: case 8: case 16:  {
  $error$7 = $error$6;
  break;
 }
 default: {
  _png_warning($png_ptr,13944);
  $error$7 = 1;
 }
 }
 $13 = $color_type & -5;
 $14 = ($13|0)==(1);
 $15 = ($color_type>>>0)>(6);
 $16 = $15 | $14;
 if ($16) {
  _png_warning($png_ptr,13970);
  $error$8 = 1;
 } else {
  $error$8 = $error$7;
 }
 $17 = ($color_type|0)==(3);
 $18 = ($bit_depth|0)>(8);
 $or$cond15 = $18 & $17;
 if ($or$cond15) {
  label = 21;
 } else {
  $19 = ($color_type|0)==(4);
  $20 = ($13|0)==(2);
  $21 = $19 | $20;
  $22 = ($bit_depth|0)<(8);
  $or$cond21 = $22 & $21;
  if ($or$cond21) {
   label = 21;
  } else {
   $error$9 = $error$8;
  }
 }
 if ((label|0) == 21) {
  _png_warning($png_ptr,13997);
  $error$9 = 1;
 }
 $23 = ($interlace_type|0)>(1);
 if ($23) {
  _png_warning($png_ptr,14046);
  $error$10 = 1;
 } else {
  $error$10 = $error$9;
 }
 $24 = ($compression_type|0)==(0);
 if ($24) {
  $error$11 = $error$10;
 } else {
  _png_warning($png_ptr,14079);
  $error$11 = 1;
 }
 $25 = ((($png_ptr)) + 208|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 4096;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $29 = ((($png_ptr)) + 708|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   _png_warning($png_ptr,15252);
  }
 }
 $32 = ($filter_type|0)==(0);
 if ($32) {
  $error$13 = $error$11;
 } else {
  $33 = ((($png_ptr)) + 708|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 4;
  $36 = ($35|0)!=(0);
  $37 = ($filter_type|0)==(64);
  $or$cond23 = $37 & $36;
  if ($or$cond23) {
   $38 = HEAP32[$25>>2]|0;
   $39 = $38 & 4096;
   $40 = ($39|0)==(0);
   $41 = ($13|0)==(2);
   $or$cond = $41 & $40;
   if ($or$cond) {
    $43 = $38;$error$12 = $error$11;
   } else {
    label = 32;
   }
  } else {
   label = 32;
  }
  if ((label|0) == 32) {
   _png_warning($png_ptr,14114);
   $$pre = HEAP32[$25>>2]|0;
   $43 = $$pre;$error$12 = 1;
  }
  $42 = $43 & 4096;
  $44 = ($42|0)==(0);
  if ($44) {
   $error$13 = $error$12;
  } else {
   _png_warning($png_ptr,14144);
   _png_error($png_ptr,14174);
   // unreachable;
  }
 }
 $45 = ($error$13|0)==(1);
 if ($45) {
  _png_error($png_ptr,14174);
  // unreachable;
 } else {
  return;
 }
}
function _png_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($png_ptr|0)==(0|0);
 if (!($0)) {
  $1 = ((($png_ptr)) + 168|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   FUNCTION_TABLE_vii[$2 & 127]($png_ptr,$error_message);
  }
 }
 $4 = HEAP32[9720>>2]|0;
 $5 = ($error_message|0)!=(0|0);
 $6 = $5 ? $error_message : 14192;
 HEAP32[$vararg_buffer>>2] = $6;
 (_fprintf($4,14202,$vararg_buffer)|0);
 (_fputc(10,$4)|0);
 _png_longjmp($png_ptr,1);
 // unreachable;
}
function _png_safecat($buffer,$bufsize,$pos,$string) {
 $buffer = $buffer|0;
 $bufsize = $bufsize|0;
 $pos = $pos|0;
 $string = $string|0;
 var $$015 = 0, $$06 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buffer|0)!=(0|0);
 $1 = ($pos>>>0)<($bufsize>>>0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$2 = $pos;
  return ($$2|0);
 }
 $2 = ($string|0)==(0|0);
 if ($2) {
  $$1 = $pos;
 } else {
  $3 = HEAP8[$string>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  $5 = (($bufsize) + -1)|0;
  $6 = ($5>>>0)>($pos>>>0);
  $or$cond34 = $6 & $4;
  if ($or$cond34) {
   $$015 = $pos;$$06 = $string;$10 = $3;
   while(1) {
    $7 = ((($$06)) + 1|0);
    $8 = (($$015) + 1)|0;
    $9 = (($buffer) + ($$015)|0);
    HEAP8[$9>>0] = $10;
    $11 = HEAP8[$7>>0]|0;
    $12 = ($11<<24>>24)!=(0);
    $13 = ($8>>>0)<($5>>>0);
    $or$cond3 = $13 & $12;
    if ($or$cond3) {
     $$015 = $8;$$06 = $7;$10 = $11;
    } else {
     $$1 = $8;
     break;
    }
   }
  } else {
   $$1 = $pos;
  }
 }
 $14 = (($buffer) + ($$1)|0);
 HEAP8[$14>>0] = 0;
 $$2 = $$1;
 return ($$2|0);
}
function _png_format_number($start,$end,$format,$number) {
 $start = $start|0;
 $end = $end|0;
 $format = $format|0;
 $number = $number|0;
 var $$0$ph$be = 0, $$0$ph54 = 0, $$0$ph54$lcssa198 = 0, $$021 = 0, $$021$us29 = 0, $$021$us42 = 0, $$03$lcssa = 0, $$03$ph$be = 0, $$03$ph53 = 0, $$03$ph53$lcssa201 = 0, $$0320 = 0, $$0320$us30 = 0, $$0320$us43 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count$0$ph55 = 0, $count$0$ph55$lcssa195 = 0, $count$017 = 0, $count$022 = 0, $count$022$us28 = 0, $count$022$us41 = 0, $mincount$0$ph56 = 0, $mincount$0$ph56$lcssa192 = 0, $mincount$023 = 0, $mincount$023$us27 = 0, $mincount$2 = 0, $mincount$3 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond5$us = 0, $or$cond5$us31 = 0, $or$cond5$us44 = 0;
 var $or$cond8 = 0, $output$0$ph$be = 0, $output$0$ph57 = 0, $output$1 = 0, $output$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($end)) + -1|0);
 HEAP8[$0>>0] = 0;
 $1 = ($0>>>0)>($start>>>0);
 if (!($1)) {
  $$03$lcssa = $0;
  return ($$03$lcssa|0);
 }
 $2 = ($format|0)==(5);
 $$0$ph54 = $number;$$03$ph53 = $0;$count$0$ph55 = 0;$mincount$0$ph56 = 1;$output$0$ph57 = 0;
 L4: while(1) {
  L6: do {
   if ($2) {
    $3 = ($$0$ph54|0)!=(0);
    $4 = ($count$0$ph55|0)<($mincount$0$ph56|0);
    $or$cond5$us = $3 | $4;
    if (!($or$cond5$us)) {
     $$03$lcssa = $$03$ph53;
     label = 24;
     break L4;
    }
    $25 = (($$0$ph54>>>0) % 10)&-1;
    $26 = $25 | $output$0$ph57;
    $27 = ($26|0)==(0);
    if ($27) {
     $$14 = $$03$ph53;$output$1 = $output$0$ph57;
    } else {
     $28 = (14219 + ($25)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ((($$03$ph53)) + -1|0);
     HEAP8[$30>>0] = $29;
     $$14 = $30;$output$1 = 1;
    }
    $31 = (($$0$ph54>>>0) / 10)&-1;
    $$1 = $31;$$2 = $$14;$count$017 = $count$0$ph55;$mincount$3 = 5;$output$2 = $output$1;
   } else {
    switch ($format|0) {
    case 2:  {
     $$021$us29 = $$0$ph54;$$0320$us30 = $$03$ph53;$count$022$us28 = $count$0$ph55;$mincount$023$us27 = $mincount$0$ph56;
     label = 7;
     break L4;
     break;
    }
    case 1:  {
     $$0$ph54$lcssa198 = $$0$ph54;$$03$ph53$lcssa201 = $$03$ph53;$count$0$ph55$lcssa195 = $count$0$ph55;$mincount$0$ph56$lcssa192 = $mincount$0$ph56;
     label = 5;
     break L4;
     break;
    }
    default: {
     $$021 = $$0$ph54;$$0320 = $$03$ph53;$count$022 = $count$0$ph55;$mincount$023 = $mincount$0$ph56;
    }
    }
    while(1) {
     $23 = ($$021|0)!=(0);
     $24 = ($count$022|0)<($mincount$023|0);
     $or$cond5 = $23 | $24;
     if (!($or$cond5)) {
      $$03$lcssa = $$0320;
      label = 24;
      break L4;
     }
     switch ($format|0) {
     case 3:  {
      $mincount$2 = $mincount$023;
      break;
     }
     case 4:  {
      $mincount$2 = 2;
      break;
     }
     default: {
      $$1 = 0;$$2 = $$0320;$count$017 = $count$022;$mincount$3 = $mincount$023;$output$2 = $output$0$ph57;
      break L6;
     }
     }
     $32 = $$021 & 15;
     $33 = (14219 + ($32)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = ((($$0320)) + -1|0);
     HEAP8[$35>>0] = $34;
     $36 = $$021 >>> 4;
     $37 = (($count$022) + 1)|0;
     $38 = ($35>>>0)>($start>>>0);
     if ($38) {
      $$021 = $36;$$0320 = $35;$count$022 = $37;$mincount$023 = $mincount$2;
     } else {
      $$03$lcssa = $35;
      label = 24;
      break L4;
     }
    }
   }
  } while(0);
  $39 = (($count$017) + 1)|0;
  $40 = ($39|0)==(5);
  $or$cond = $2 & $40;
  $41 = ($$2>>>0)>($start>>>0);
  $or$cond8 = $or$cond & $41;
  do {
   if ($or$cond8) {
    $42 = ($output$2|0)==(0);
    if (!($42)) {
     $43 = ((($$2)) + -1|0);
     HEAP8[$43>>0] = 46;
     $$0$ph$be = $$1;$$03$ph$be = $43;$output$0$ph$be = $output$2;
     break;
    }
    $45 = ($$1|0)==(0);
    if ($45) {
     $46 = ((($$2)) + -1|0);
     HEAP8[$46>>0] = 48;
     $$0$ph$be = 0;$$03$ph$be = $46;$output$0$ph$be = 0;
    } else {
     $$0$ph$be = $$1;$$03$ph$be = $$2;$output$0$ph$be = 0;
    }
   } else {
    $$0$ph$be = $$1;$$03$ph$be = $$2;$output$0$ph$be = $output$2;
   }
  } while(0);
  $44 = ($$03$ph$be>>>0)>($start>>>0);
  if ($44) {
   $$0$ph54 = $$0$ph$be;$$03$ph53 = $$03$ph$be;$count$0$ph55 = $39;$mincount$0$ph56 = $mincount$3;$output$0$ph57 = $output$0$ph$be;
  } else {
   $$03$lcssa = $$03$ph$be;
   label = 24;
   break;
  }
 }
 if ((label|0) == 5) {
  $$021$us42 = $$0$ph54$lcssa198;$$0320$us43 = $$03$ph53$lcssa201;$count$022$us41 = $count$0$ph55$lcssa195;
  while(1) {
   $14 = ($$021$us42|0)!=(0);
   $15 = ($count$022$us41|0)<($mincount$0$ph56$lcssa192|0);
   $or$cond5$us44 = $14 | $15;
   if (!($or$cond5$us44)) {
    $$03$lcssa = $$0320$us43;
    label = 24;
    break;
   }
   $16 = (($$021$us42>>>0) % 10)&-1;
   $17 = (14219 + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ((($$0320$us43)) + -1|0);
   HEAP8[$19>>0] = $18;
   $20 = (($$021$us42>>>0) / 10)&-1;
   $21 = (($count$022$us41) + 1)|0;
   $22 = ($19>>>0)>($start>>>0);
   if ($22) {
    $$021$us42 = $20;$$0320$us43 = $19;$count$022$us41 = $21;
   } else {
    $$03$lcssa = $19;
    label = 24;
    break;
   }
  }
  if ((label|0) == 24) {
   return ($$03$lcssa|0);
  }
 }
 else if ((label|0) == 7) {
  while(1) {
   label = 0;
   $5 = ($$021$us29|0)!=(0);
   $6 = ($count$022$us28|0)<($mincount$023$us27|0);
   $or$cond5$us31 = $5 | $6;
   if (!($or$cond5$us31)) {
    $$03$lcssa = $$0320$us30;
    label = 24;
    break;
   }
   $7 = (($$021$us29>>>0) % 10)&-1;
   $8 = (14219 + ($7)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ((($$0320$us30)) + -1|0);
   HEAP8[$10>>0] = $9;
   $11 = (($$021$us29>>>0) / 10)&-1;
   $12 = (($count$022$us28) + 1)|0;
   $13 = ($10>>>0)>($start>>>0);
   if ($13) {
    $$021$us29 = $11;$$0320$us30 = $10;$count$022$us28 = $12;$mincount$023$us27 = 2;
    label = 7;
   } else {
    $$03$lcssa = $10;
    label = 24;
    break;
   }
  }
  if ((label|0) == 24) {
   return ($$03$lcssa|0);
  }
 }
 else if ((label|0) == 24) {
  return ($$03$lcssa|0);
 }
 return (0)|0;
}
function _png_warning($png_ptr,$warning_message) {
 $png_ptr = $png_ptr|0;
 $warning_message = $warning_message|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset$11 = 0, $offset$12 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $offset$12 = 0;
 } else {
  $1 = HEAP8[$warning_message>>0]|0;
  $2 = ($1<<24>>24)==(35);
  if ($2) {
   $3 = ((($warning_message)) + 1|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(32);
   if ($5) {
    $offset$11 = 1;
   } else {
    $6 = ((($warning_message)) + 2|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(32);
    if ($8) {
     $offset$11 = 2;
    } else {
     $15 = ((($warning_message)) + 3|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(32);
     if ($17) {
      $offset$11 = 3;
     } else {
      $18 = ((($warning_message)) + 4|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(32);
      if ($20) {
       $offset$11 = 4;
      } else {
       $21 = ((($warning_message)) + 5|0);
       $22 = HEAP8[$21>>0]|0;
       $23 = ($22<<24>>24)==(32);
       if ($23) {
        $offset$11 = 5;
       } else {
        $24 = ((($warning_message)) + 6|0);
        $25 = HEAP8[$24>>0]|0;
        $26 = ($25<<24>>24)==(32);
        if ($26) {
         $offset$11 = 6;
        } else {
         $27 = ((($warning_message)) + 7|0);
         $28 = HEAP8[$27>>0]|0;
         $29 = ($28<<24>>24)==(32);
         if ($29) {
          $offset$11 = 7;
         } else {
          $30 = ((($warning_message)) + 8|0);
          $31 = HEAP8[$30>>0]|0;
          $32 = ($31<<24>>24)==(32);
          if ($32) {
           $offset$11 = 8;
          } else {
           $33 = ((($warning_message)) + 9|0);
           $34 = HEAP8[$33>>0]|0;
           $35 = ($34<<24>>24)==(32);
           if ($35) {
            $offset$11 = 9;
           } else {
            $36 = ((($warning_message)) + 10|0);
            $37 = HEAP8[$36>>0]|0;
            $38 = ($37<<24>>24)==(32);
            if ($38) {
             $offset$11 = 10;
            } else {
             $39 = ((($warning_message)) + 11|0);
             $40 = HEAP8[$39>>0]|0;
             $41 = ($40<<24>>24)==(32);
             if ($41) {
              $offset$11 = 11;
             } else {
              $42 = ((($warning_message)) + 12|0);
              $43 = HEAP8[$42>>0]|0;
              $44 = ($43<<24>>24)==(32);
              if ($44) {
               $offset$11 = 12;
              } else {
               $45 = ((($warning_message)) + 13|0);
               $46 = HEAP8[$45>>0]|0;
               $47 = ($46<<24>>24)==(32);
               if ($47) {
                $offset$11 = 13;
               } else {
                $48 = ((($warning_message)) + 14|0);
                $49 = HEAP8[$48>>0]|0;
                $50 = ($49<<24>>24)==(32);
                $$ = $50 ? 14 : 15;
                $offset$11 = $$;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   $offset$11 = 0;
  }
  $9 = ((($png_ptr)) + 172|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $offset$12 = $offset$11;
  } else {
   $12 = (($warning_message) + ($offset$11)|0);
   FUNCTION_TABLE_vii[$10 & 127]($png_ptr,$12);
   STACKTOP = sp;return;
  }
 }
 $13 = (($warning_message) + ($offset$12)|0);
 $14 = HEAP32[9720>>2]|0;
 HEAP32[$vararg_buffer>>2] = $13;
 (_fprintf($14,14236,$vararg_buffer)|0);
 (_fputc(10,$14)|0);
 STACKTOP = sp;return;
}
function _png_warning_parameter($p,$number,$string) {
 $p = $p|0;
 $number = $number|0;
 $string = $string|0;
 var $$015$i = 0, $$06$i = 0, $$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $number$off = 0, $or$cond = 0, $or$cond3$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $number$off = (($number) + -1)|0;
 $0 = ($number$off>>>0)>(7);
 $1 = (($p) + ($number$off<<5)|0);
 $2 = ($1|0)==(0|0);
 $or$cond = $0 | $2;
 if ($or$cond) {
  return;
 }
 $3 = ($string|0)==(0|0);
 if ($3) {
  $$1$i = 0;
 } else {
  $4 = HEAP8[$string>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $$1$i = 0;
  } else {
   $$015$i = 0;$$06$i = $string;$9 = $4;
   while(1) {
    $6 = ((($$06$i)) + 1|0);
    $7 = (($$015$i) + 1)|0;
    $8 = ((($p) + ($number$off<<5)|0) + ($$015$i)|0);
    HEAP8[$8>>0] = $9;
    $10 = HEAP8[$6>>0]|0;
    $11 = ($10<<24>>24)!=(0);
    $12 = ($7>>>0)<(31);
    $or$cond3$i = $12 & $11;
    if ($or$cond3$i) {
     $$015$i = $7;$$06$i = $6;$9 = $10;
    } else {
     $$1$i = $7;
     break;
    }
   }
  }
 }
 $13 = ((($p) + ($number$off<<5)|0) + ($$1$i)|0);
 HEAP8[$13>>0] = 0;
 return;
}
function _png_warning_parameter_signed($p,$number,$format,$value) {
 $p = $p|0;
 $number = $number|0;
 $format = $format|0;
 $value = $value|0;
 var $$015$i$i = 0, $$06$i$i = 0, $$1$i$i = 0, $$value = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $number$off$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i$i = 0, $str$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp;
 $0 = ($value|0)<(0);
 $1 = (0 - ($value))|0;
 $$value = $0 ? $1 : $value;
 $2 = ((($buffer)) + 24|0);
 $3 = (_png_format_number($buffer,$2,$format,$$value)|0);
 $4 = ($3>>>0)>($buffer>>>0);
 $or$cond = $0 & $4;
 if ($or$cond) {
  $5 = ((($3)) + -1|0);
  HEAP8[$5>>0] = 45;
  $str$0 = $5;
 } else {
  $str$0 = $3;
 }
 $number$off$i = (($number) + -1)|0;
 $6 = ($number$off$i>>>0)>(7);
 $7 = (($p) + ($number$off$i<<5)|0);
 $8 = ($7|0)==(0|0);
 $or$cond$i = $6 | $8;
 if ($or$cond$i) {
  STACKTOP = sp;return;
 }
 $9 = ($str$0|0)==(0|0);
 if ($9) {
  $$1$i$i = 0;
 } else {
  $10 = HEAP8[$str$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$1$i$i = 0;
  } else {
   $$015$i$i = 0;$$06$i$i = $str$0;$15 = $10;
   while(1) {
    $12 = ((($$06$i$i)) + 1|0);
    $13 = (($$015$i$i) + 1)|0;
    $14 = ((($p) + ($number$off$i<<5)|0) + ($$015$i$i)|0);
    HEAP8[$14>>0] = $15;
    $16 = HEAP8[$12>>0]|0;
    $17 = ($16<<24>>24)!=(0);
    $18 = ($13>>>0)<(31);
    $or$cond3$i$i = $18 & $17;
    if ($or$cond3$i$i) {
     $$015$i$i = $13;$$06$i$i = $12;$15 = $16;
    } else {
     $$1$i$i = $13;
     break;
    }
   }
  }
 }
 $19 = ((($p) + ($number$off$i<<5)|0) + ($$1$i$i)|0);
 HEAP8[$19>>0] = 0;
 STACKTOP = sp;return;
}
function _png_formatted_warning($png_ptr,$p,$message) {
 $png_ptr = $png_ptr|0;
 $p = $p|0;
 $message = $message|0;
 var $$ = 0, $$0$be = 0, $$010 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$be = 0, $i$0$lcssa = 0, $i$08 = 0, $i$1$lcssa = 0, $i$14 = 0, $msg = 0, $not$ = 0;
 var $or$cond = 0, $or$cond3 = 0, $parameter$0 = 0, $parameter$0$lcssa = 0, $parm$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp;
 $0 = ($p|0)!=(0|0);
 $$010 = $message;$i$08 = 0;
 while(1) {
  $1 = HEAP8[$$010>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $i$0$lcssa = $i$08;
   label = 14;
   break;
  }
  $3 = ($1<<24>>24)==(64);
  $or$cond = $0 & $3;
  if ($or$cond) {
   $4 = ((($$010)) + 1|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $$1 = $$010;$27 = 64;
    label = 13;
   } else {
    $parameter$0 = 0;
    while(1) {
     $7 = (14255 + ($parameter$0)|0);
     $8 = HEAP8[$7>>0]|0;
     $9 = ($parameter$0|0)!=(9);
     $not$ = ($8<<24>>24)!=($5<<24>>24);
     $$ = $9 & $not$;
     $10 = (($parameter$0) + 1)|0;
     if ($$) {
      $parameter$0 = $10;
     } else {
      $parameter$0$lcssa = $parameter$0;
      break;
     }
    }
    $11 = ($parameter$0$lcssa|0)<(8);
    if ($11) {
     $12 = (((($p) + ($parameter$0$lcssa<<5)|0)) + 32|0);
     $13 = ($i$08>>>0)<(191);
     L10: do {
      if ($13) {
       $14 = (($p) + ($parameter$0$lcssa<<5)|0);
       $i$14 = $i$08;$parm$05 = $14;
       while(1) {
        $15 = HEAP8[$parm$05>>0]|0;
        $16 = ($15<<24>>24)!=(0);
        $17 = ($parm$05>>>0)<($12>>>0);
        $or$cond3 = $17 & $16;
        if (!($or$cond3)) {
         $i$1$lcssa = $i$14;
         break L10;
        }
        $18 = ((($parm$05)) + 1|0);
        $19 = (($i$14) + 1)|0;
        $20 = (($msg) + ($i$14)|0);
        HEAP8[$20>>0] = $15;
        $21 = ($19>>>0)<(191);
        if ($21) {
         $i$14 = $19;$parm$05 = $18;
        } else {
         $i$1$lcssa = $19;
         break;
        }
       }
      } else {
       $i$1$lcssa = $i$08;
      }
     } while(0);
     $22 = ((($$010)) + 2|0);
     $$0$be = $22;$i$0$be = $i$1$lcssa;
    } else {
     $$1 = $4;$27 = $5;
     label = 13;
    }
   }
  } else {
   $$1 = $$010;$27 = $1;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $24 = ((($$1)) + 1|0);
   $25 = (($i$08) + 1)|0;
   $26 = (($msg) + ($i$08)|0);
   HEAP8[$26>>0] = $27;
   $$0$be = $24;$i$0$be = $25;
  }
  $23 = ($i$0$be>>>0)<(191);
  if ($23) {
   $$010 = $$0$be;$i$08 = $i$0$be;
  } else {
   $i$0$lcssa = $i$0$be;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  $28 = (($msg) + ($i$0$lcssa)|0);
  HEAP8[$28>>0] = 0;
  _png_warning($png_ptr,$msg);
  STACKTOP = sp;return;
 }
}
function _png_benign_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg$i = sp;
 $0 = ((($png_ptr)) + 212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1048576;
 $3 = ($2|0)==(0);
 $4 = ((($png_ptr)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 32768;
 $7 = ($6|0)!=(0);
 if ($3) {
  if (!($7)) {
   _png_error($png_ptr,$error_message);
   // unreachable;
  }
  $11 = ((($png_ptr)) + 376|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   _png_error($png_ptr,$error_message);
   // unreachable;
  } else {
   _png_chunk_error($png_ptr,$error_message);
   // unreachable;
  }
 }
 if ($7) {
  $8 = ((($png_ptr)) + 376|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   _png_format_buffer($9,$msg$i,$error_message);
   _png_warning($png_ptr,$msg$i);
   STACKTOP = sp;return;
  }
 }
 _png_warning($png_ptr,$error_message);
 STACKTOP = sp;return;
}
function _png_chunk_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $msg = 0, $png_ptr$idx = 0, $png_ptr$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  _png_error(0,$error_message);
  // unreachable;
 } else {
  $png_ptr$idx = ((($png_ptr)) + 376|0);
  $png_ptr$idx$val = HEAP32[$png_ptr$idx>>2]|0;
  _png_format_buffer($png_ptr$idx$val,$msg,$error_message);
  _png_error($png_ptr,$msg);
  // unreachable;
 }
}
function _png_app_warning($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2097152;
 $3 = ($2|0)==(0);
 if ($3) {
  _png_error($png_ptr,$error_message);
  // unreachable;
 } else {
  _png_warning($png_ptr,$error_message);
  return;
 }
}
function _png_app_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4194304;
 $3 = ($2|0)==(0);
 if ($3) {
  _png_error($png_ptr,$error_message);
  // unreachable;
 } else {
  _png_warning($png_ptr,$error_message);
  return;
 }
}
function _png_free_jmpbuf($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$pre = 0, $$reg2mem18$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0;
 var $free_jmp_buf = 0, $or$cond = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $free_jmp_buf = sp;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 $1 = ((($png_ptr)) + 160|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $$pre = ((($png_ptr)) + 164|0);
 if (!($3)) {
  $4 = HEAP32[$$pre>>2]|0;
  $5 = ($4|0)==(0);
  $6 = ($2|0)==($png_ptr|0);
  $or$cond = $6 | $5;
  if (!($or$cond)) {
   _setjmpTable = _saveSetjmp($free_jmp_buf,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $7 = __THREW__; __THREW__ = 0;
   if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
   $9 = tempRet0;
   $cond = ($8|0)==(1);
   if ($cond) {
    $$reg2mem18$0 = $9;
   } else {
    $$reg2mem18$0 = 0;
   }
   while(1) {
    $10 = ($$reg2mem18$0|0)==(0);
    if (!($10)) {
     break;
    }
    HEAP32[$1>>2] = $free_jmp_buf;
    HEAP32[$$pre>>2] = 0;
    $11 = ((($png_ptr)) + 156|0);
    HEAP32[$11>>2] = 59;
    __THREW__ = 0;
    invoke_vii(64,($png_ptr|0),($2|0));
    $12 = __THREW__; __THREW__ = 0;
    if ((($12|0) != 0) & ((threwValue|0) != 0)) { $13 = _testSetjmp(HEAP32[$12>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($13|0) == 0) { _longjmp($12|0, threwValue|0); } tempRet0 = (threwValue); } else { $13 = -1; };
    $14 = tempRet0;
    $cond1 = ($13|0)==(1);
    if ($cond1) {
     $$reg2mem18$0 = $14;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
   }
  }
 }
 HEAP32[$$pre>>2] = 0;
 HEAP32[$1>>2] = 0;
 $15 = ((($png_ptr)) + 156|0);
 HEAP32[$15>>2] = 0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function _png_longjmp($png_ptr,$val) {
 $png_ptr = $png_ptr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if (!($0)) {
  $1 = ((($png_ptr)) + 156|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($png_ptr)) + 160|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    FUNCTION_TABLE_vii[$2 & 127]($5,$val);
   }
  }
 }
 _abort();
 // unreachable;
}
function _png_set_error_fn($png_ptr,$error_ptr,$error_fn,$warning_fn) {
 $png_ptr = $png_ptr|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warning_fn = $warning_fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 176|0);
 HEAP32[$1>>2] = $error_ptr;
 $2 = ((($png_ptr)) + 168|0);
 HEAP32[$2>>2] = $error_fn;
 $3 = ((($png_ptr)) + 172|0);
 HEAP32[$3>>2] = $warning_fn;
 return;
}
function _png_destroy_png_struct($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $dummy_struct = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy_struct = sp;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 _memcpy(($dummy_struct|0),($png_ptr|0),900)|0;
 _memset(($png_ptr|0),0,900)|0;
 $1 = ((($dummy_struct)) + 724|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($png_ptr);
 } else {
  FUNCTION_TABLE_vii[$2 & 127]($dummy_struct,$png_ptr);
 }
 _png_free_jmpbuf($dummy_struct);
 STACKTOP = sp;return;
}
function _png_free($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 $2 = ((($png_ptr)) + 724|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _free($ptr);
  return;
 } else {
  FUNCTION_TABLE_vii[$3 & 127]($png_ptr,$ptr);
  return;
 }
}
function _png_calloc($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $$0$i$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0$i1 = 0;
  return ($$0$i1|0);
 }
 $1 = ($size|0)==(0);
 if ($1) {
  _png_error($png_ptr,14265);
  // unreachable;
 }
 $2 = ((($png_ptr)) + 720|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $6 = (_malloc($size)|0);
  $$0$i$i = $6;
 } else {
  $5 = (FUNCTION_TABLE_iii[$3 & 63]($png_ptr,$size)|0);
  $$0$i$i = $5;
 }
 $7 = ($$0$i$i|0)==(0|0);
 if ($7) {
  _png_error($png_ptr,14265);
  // unreachable;
 }
 _memset(($$0$i$i|0),0,($size|0))|0;
 $$0$i1 = $$0$i$i;
 return ($$0$i1|0);
}
function _png_malloc($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($size|0)==(0);
 if ($1) {
  _png_error($png_ptr,14265);
  // unreachable;
 }
 $2 = ((($png_ptr)) + 720|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $6 = (_malloc($size)|0);
  $$0$i = $6;
 } else {
  $5 = (FUNCTION_TABLE_iii[$3 & 63]($png_ptr,$size)|0);
  $$0$i = $5;
 }
 $7 = ($$0$i|0)==(0|0);
 if ($7) {
  _png_error($png_ptr,14265);
  // unreachable;
 } else {
  $$0 = $$0$i;
  return ($$0|0);
 }
 return (0)|0;
}
function _png_malloc_base($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($png_ptr|0)==(0|0);
 if (!($1)) {
  $2 = ((($png_ptr)) + 720|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (FUNCTION_TABLE_iii[$3 & 63]($png_ptr,$size)|0);
   $$0 = $5;
   return ($$0|0);
  }
 }
 $6 = (_malloc($size)|0);
 $$0 = $6;
 return ($$0|0);
}
function _png_malloc_warn($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($size|0)==(0);
 if (!($1)) {
  $2 = ((($png_ptr)) + 720|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $6 = (_malloc($size)|0);
   $$0$i = $6;
  } else {
   $5 = (FUNCTION_TABLE_iii[$3 & 63]($png_ptr,$size)|0);
   $$0$i = $5;
  }
  $7 = ($$0$i|0)==(0|0);
  if (!($7)) {
   $$0 = $$0$i;
   return ($$0|0);
  }
 }
 _png_warning($png_ptr,14265);
 $$0 = 0;
 return ($$0|0);
}
function _png_set_mem_fn($png_ptr,$mem_ptr,$malloc_fn,$free_fn) {
 $png_ptr = $png_ptr|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 716|0);
 HEAP32[$1>>2] = $mem_ptr;
 $2 = ((($png_ptr)) + 720|0);
 HEAP32[$2>>2] = $malloc_fn;
 $3 = ((($png_ptr)) + 724|0);
 HEAP32[$3>>2] = $free_fn;
 return;
}
function _png_set_IHDR($png_ptr,$info_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 HEAP32[$info_ptr>>2] = $width;
 $2 = ((($info_ptr)) + 4|0);
 HEAP32[$2>>2] = $height;
 $3 = $bit_depth&255;
 $4 = ((($info_ptr)) + 24|0);
 HEAP8[$4>>0] = $3;
 $5 = $color_type&255;
 $6 = ((($info_ptr)) + 25|0);
 HEAP8[$6>>0] = $5;
 $7 = $compression_type&255;
 $8 = ((($info_ptr)) + 26|0);
 HEAP8[$8>>0] = $7;
 $9 = $filter_type&255;
 $10 = ((($info_ptr)) + 27|0);
 HEAP8[$10>>0] = $9;
 $11 = $interlace_type&255;
 $12 = ((($info_ptr)) + 28|0);
 HEAP8[$12>>0] = $11;
 $13 = $bit_depth & 255;
 $14 = $color_type & 255;
 $15 = $interlace_type & 255;
 $16 = $compression_type & 255;
 $17 = $filter_type & 255;
 _png_check_IHDR($png_ptr,$width,$height,$13,$14,$15,$16,$17);
 $18 = HEAP8[$6>>0]|0;
 $19 = ($18<<24>>24)==(3);
 if ($19) {
  $20 = ((($info_ptr)) + 29|0);
  HEAP8[$20>>0] = 1;
  $29 = 1;
 } else {
  $21 = $18 & 2;
  $22 = ((($info_ptr)) + 29|0);
  $23 = $21 | 1;
  HEAP8[$22>>0] = $23;
  $24 = $18 & 4;
  $25 = ($24<<24>>24)==(0);
  if ($25) {
   $29 = $23;
  } else {
   $26 = ((($info_ptr)) + 29|0);
   $27 = (($23) + 1)<<24>>24;
   HEAP8[$26>>0] = $27;
   $29 = $27;
  }
 }
 $28 = $29&255;
 $30 = HEAP8[$4>>0]|0;
 $31 = $30&255;
 $32 = Math_imul($31, $28)|0;
 $33 = $32&255;
 $34 = ((($info_ptr)) + 30|0);
 HEAP8[$34>>0] = $33;
 $35 = $32 & 255;
 $36 = ($35>>>0)>(7);
 if ($36) {
  $37 = $35 >>> 3;
  $38 = Math_imul($37, $width)|0;
  $43 = $38;
 } else {
  $39 = Math_imul($35, $width)|0;
  $40 = (($39) + 7)|0;
  $41 = $40 >>> 3;
  $43 = $41;
 }
 $42 = ((($info_ptr)) + 12|0);
 HEAP32[$42>>2] = $43;
 return;
}
function _png_set_rows($png_ptr,$info_ptr,$row_pointers) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $row_pointers = $row_pointers|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 $2 = ((($info_ptr)) + 264|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = ($3|0)==($row_pointers|0);
 $or$cond2 = $4 | $5;
 if (!($or$cond2)) {
  _png_free_data($png_ptr,$info_ptr,64,0);
 }
 HEAP32[$2>>2] = $row_pointers;
 $6 = ($row_pointers|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($info_ptr)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 32768;
 HEAP32[$7>>2] = $9;
 return;
}
function _png_set_bgr($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 return;
}
function _png_set_swap($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 436|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(16);
 if (!($3)) {
  return;
 }
 $4 = ((($png_ptr)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 16;
 HEAP32[$4>>2] = $6;
 return;
}
function _png_set_packing($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 436|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2&255)<(8);
 if (!($3)) {
  return;
 }
 $4 = ((($png_ptr)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 4;
 HEAP32[$4>>2] = $6;
 $7 = ((($png_ptr)) + 437|0);
 HEAP8[$7>>0] = 8;
 return;
}
function _png_set_packswap($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 436|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2&255)<(8);
 if (!($3)) {
  return;
 }
 $4 = ((($png_ptr)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 65536;
 HEAP32[$4>>2] = $6;
 return;
}
function _png_set_shift($png_ptr,$true_bits) {
 $png_ptr = $png_ptr|0;
 $true_bits = $true_bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 8;
 HEAP32[$1>>2] = $3;
 $4 = ((($png_ptr)) + 521|0);
 ;HEAP8[$4>>0]=HEAP8[$true_bits>>0]|0;HEAP8[$4+1>>0]=HEAP8[$true_bits+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$true_bits+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$true_bits+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$true_bits+4>>0]|0;
 return;
}
function _png_set_interlace_handling($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ((($png_ptr)) + 432|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ((($png_ptr)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 2;
 HEAP32[$4>>2] = $6;
 $$0 = 7;
 return ($$0|0);
}
function _png_set_filler($png_ptr,$filler,$filler_loc) {
 $png_ptr = $png_ptr|0;
 $filler = $filler|0;
 $filler_loc = $filler_loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 208|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 32768;
 $4 = ($3|0)==(0);
 L4: do {
  if ($4) {
   $7 = ((($png_ptr)) + 435|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   switch ($9|0) {
   case 2:  {
    $10 = ((($png_ptr)) + 440|0);
    HEAP8[$10>>0] = 4;
    break L4;
    break;
   }
   case 0:  {
    $11 = ((($png_ptr)) + 436|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12&255)>(7);
    if ($13) {
     $14 = ((($png_ptr)) + 440|0);
     HEAP8[$14>>0] = 2;
     break L4;
    }
    _png_app_error($png_ptr,14279);
    return;
    break;
   }
   default: {
    _png_app_error($png_ptr,14335);
    return;
   }
   }
  } else {
   $5 = $filler&65535;
   $6 = ((($png_ptr)) + 444|0);
   HEAP16[$6>>1] = $5;
  }
 } while(0);
 $15 = ((($png_ptr)) + 216|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | 32768;
 HEAP32[$15>>2] = $17;
 $18 = ($filler_loc|0)==(1);
 $19 = ((($png_ptr)) + 212|0);
 $20 = HEAP32[$19>>2]|0;
 if ($18) {
  $21 = $20 | 128;
  HEAP32[$19>>2] = $21;
  return;
 } else {
  $22 = $20 & -129;
  HEAP32[$19>>2] = $22;
  return;
 }
}
function _png_set_swap_alpha($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 131072;
 HEAP32[$1>>2] = $3;
 return;
}
function _png_set_invert_alpha($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 524288;
 HEAP32[$1>>2] = $3;
 return;
}
function _png_set_invert_mono($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 32;
 HEAP32[$1>>2] = $3;
 return;
}
function _png_do_invert($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0;
 var $i2$06 = 0, $i5$09 = 0, $rp$04 = 0, $rp1$05 = 0, $rp4$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($row_info)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case 0:  {
  $2 = ((($row_info)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   return;
  } else {
   $i$03 = 0;$rp$04 = $row;
  }
  while(1) {
   $5 = HEAP8[$rp$04>>0]|0;
   $6 = $5&255;
   $7 = $6 ^ 255;
   $8 = $7&255;
   HEAP8[$rp$04>>0] = $8;
   $9 = ((($rp$04)) + 1|0);
   $10 = (($i$03) + 1)|0;
   $exitcond = ($10|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $10;$rp$04 = $9;
   }
  }
  return;
  break;
 }
 case 4:  {
  $11 = ((($row_info)) + 9|0);
  $12 = HEAP8[$11>>0]|0;
  switch ($12<<24>>24) {
  case 8:  {
   $13 = ((($row_info)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    return;
   } else {
    $i2$06 = 0;$rp1$05 = $row;
   }
   while(1) {
    $16 = HEAP8[$rp1$05>>0]|0;
    $17 = $16&255;
    $18 = $17 ^ 255;
    $19 = $18&255;
    HEAP8[$rp1$05>>0] = $19;
    $20 = ((($rp1$05)) + 2|0);
    $21 = (($i2$06) + 2)|0;
    $22 = ($21>>>0)<($14>>>0);
    if ($22) {
     $i2$06 = $21;$rp1$05 = $20;
    } else {
     break;
    }
   }
   return;
   break;
  }
  case 16:  {
   $23 = ((($row_info)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    return;
   } else {
    $i5$09 = 0;$rp4$08 = $row;
   }
   while(1) {
    $26 = HEAP8[$rp4$08>>0]|0;
    $27 = $26&255;
    $28 = $27 ^ 255;
    $29 = $28&255;
    HEAP8[$rp4$08>>0] = $29;
    $30 = ((($rp4$08)) + 1|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $32 ^ 255;
    $34 = $33&255;
    HEAP8[$30>>0] = $34;
    $35 = ((($rp4$08)) + 4|0);
    $36 = (($i5$09) + 4)|0;
    $37 = ($36>>>0)<($24>>>0);
    if ($37) {
     $i5$09 = $36;$rp4$08 = $35;
    } else {
     break;
    }
   }
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 default: {
  return;
 }
 }
}
function _png_do_swap($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $rp$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($row_info)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(16);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[$row_info>>2]|0;
 $4 = ((($row_info)) + 10|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = Math_imul($6, $3)|0;
 $8 = ($7|0)==(0);
 if ($8) {
  return;
 } else {
  $i$01 = 0;$rp$02 = $row;
 }
 while(1) {
  $9 = HEAP8[$rp$02>>0]|0;
  $10 = ((($rp$02)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  HEAP8[$rp$02>>0] = $11;
  HEAP8[$10>>0] = $9;
  $12 = (($i$01) + 1)|0;
  $13 = ((($rp$02)) + 2|0);
  $exitcond = ($12|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;$rp$02 = $13;
  }
 }
 return;
}
function _png_do_packswap($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rp$01 = 0, $table$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($row_info)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)<(8);
 if (!($2)) {
  return;
 }
 $3 = ((($row_info)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($row) + ($4)|0);
 switch ($1<<24>>24) {
 case 1:  {
  $table$0 = 14888;
  break;
 }
 case 2:  {
  $table$0 = 14376;
  break;
 }
 case 4:  {
  $table$0 = 14632;
  break;
 }
 default: {
  return;
 }
 }
 $6 = ($4|0)>(0);
 if ($6) {
  $rp$01 = $row;
 } else {
  return;
 }
 while(1) {
  $7 = HEAP8[$rp$01>>0]|0;
  $8 = $7&255;
  $9 = (($table$0) + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  HEAP8[$rp$01>>0] = $10;
  $11 = ((($rp$01)) + 1|0);
  $12 = ($11>>>0)<($5>>>0);
  if ($12) {
   $rp$01 = $11;
  } else {
   break;
  }
 }
 return;
}
function _png_do_strip_channel($row_info,$row,$at_start) {
 $row_info = $row_info|0;
 $row = $row|0;
 $at_start = $at_start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $dp$0$lcssa = 0, $dp$0$ph = 0, $dp$04 = 0, $dp$1$lcssa = 0, $dp$1$ph = 0, $dp$16 = 0, $dp$2 = 0, $dp$3$lcssa = 0, $dp$3$ph = 0, $dp$311 = 0, $dp$4$lcssa = 0, $dp$4$ph = 0, $dp$416 = 0, $dp$5 = 0, $dp$6 = 0, $scevgep = 0, $scevgep25 = 0, $scevgep26 = 0, $scevgep28 = 0;
 var $scevgep2829 = 0, $scevgep30 = 0, $scevgep32 = 0, $scevgep3233 = 0, $scevgep34 = 0, $scevgep36 = 0, $scevgep3637 = 0, $scevgep38 = 0, $sp$0$ph = 0, $sp$0$ph24 = 0, $sp$05 = 0, $sp$1$ph = 0, $sp$1$ph27 = 0, $sp$17 = 0, $sp$2$ph = 0, $sp$2$ph31 = 0, $sp$212 = 0, $sp$3$ph = 0, $sp$3$ph35 = 0, $sp$317 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($row_info)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($row) + ($1)|0);
 $3 = ((($row_info)) + 10|0);
 $4 = HEAP8[$3>>0]|0;
 switch ($4<<24>>24) {
 case 2:  {
  $5 = ((($row_info)) + 9|0);
  $6 = HEAP8[$5>>0]|0;
  switch ($6<<24>>24) {
  case 8:  {
   $7 = ($at_start|0)==(0);
   $8 = ((($row)) + 2|0);
   $9 = ((($row)) + 1|0);
   $10 = ((($row)) + 1|0);
   $dp$0$ph = $7 ? $9 : $row;
   $sp$0$ph = $7 ? $8 : $10;
   $11 = ($sp$0$ph>>>0)<($2>>>0);
   if ($11) {
    $sp$0$ph24 = $sp$0$ph;
    $12 = (($1) + -1)|0;
    $13 = (($12) - ($sp$0$ph24))|0;
    $scevgep = (($row) + ($13)|0);
    $scevgep25 = $scevgep;
    $14 = $scevgep25 >>> 1;
    $15 = (($14) + 1)|0;
    $dp$04 = $dp$0$ph;$sp$05 = $sp$0$ph;
    while(1) {
     $16 = HEAP8[$sp$05>>0]|0;
     $17 = ((($dp$04)) + 1|0);
     HEAP8[$dp$04>>0] = $16;
     $18 = ((($sp$05)) + 2|0);
     $19 = ($18>>>0)<($2>>>0);
     if ($19) {
      $dp$04 = $17;$sp$05 = $18;
     } else {
      break;
     }
    }
    $scevgep26 = (($dp$0$ph) + ($15)|0);
    $dp$0$lcssa = $scevgep26;
   } else {
    $dp$0$lcssa = $dp$0$ph;
   }
   $20 = ((($row_info)) + 11|0);
   HEAP8[$20>>0] = 8;
   $dp$2 = $dp$0$lcssa;
   break;
  }
  case 16:  {
   $21 = ($at_start|0)==(0);
   $22 = ((($row)) + 4|0);
   $23 = ((($row)) + 2|0);
   $24 = ((($row)) + 2|0);
   $dp$1$ph = $21 ? $23 : $row;
   $sp$1$ph = $21 ? $22 : $24;
   $25 = ($sp$1$ph>>>0)<($2>>>0);
   if ($25) {
    $sp$1$ph27 = $sp$1$ph;
    $26 = (($1) + -1)|0;
    $27 = (($26) - ($sp$1$ph27))|0;
    $scevgep28 = (($row) + ($27)|0);
    $scevgep2829 = $scevgep28;
    $28 = $scevgep2829 >>> 2;
    $29 = $28 << 1;
    $30 = (($29) + 2)|0;
    $dp$16 = $dp$1$ph;$sp$17 = $sp$1$ph;
    while(1) {
     $31 = ((($sp$17)) + 1|0);
     $32 = HEAP8[$sp$17>>0]|0;
     $33 = ((($dp$16)) + 1|0);
     HEAP8[$dp$16>>0] = $32;
     $34 = HEAP8[$31>>0]|0;
     $35 = ((($dp$16)) + 2|0);
     HEAP8[$33>>0] = $34;
     $36 = ((($sp$17)) + 4|0);
     $37 = ($36>>>0)<($2>>>0);
     if ($37) {
      $dp$16 = $35;$sp$17 = $36;
     } else {
      break;
     }
    }
    $scevgep30 = (($dp$1$ph) + ($30)|0);
    $dp$1$lcssa = $scevgep30;
   } else {
    $dp$1$lcssa = $dp$1$ph;
   }
   $38 = ((($row_info)) + 11|0);
   HEAP8[$38>>0] = 16;
   $dp$2 = $dp$1$lcssa;
   break;
  }
  default: {
   return;
  }
  }
  HEAP8[$3>>0] = 1;
  $39 = ((($row_info)) + 8|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(4);
  if ($41) {
   HEAP8[$39>>0] = 0;
   $dp$6 = $dp$2;
  } else {
   $dp$6 = $dp$2;
  }
  break;
 }
 case 4:  {
  $42 = ((($row_info)) + 9|0);
  $43 = HEAP8[$42>>0]|0;
  switch ($43<<24>>24) {
  case 8:  {
   $44 = ($at_start|0)==(0);
   $45 = ((($row)) + 4|0);
   $46 = ((($row)) + 3|0);
   $47 = ((($row)) + 1|0);
   $dp$3$ph = $44 ? $46 : $row;
   $sp$2$ph = $44 ? $45 : $47;
   $48 = ($sp$2$ph>>>0)<($2>>>0);
   if ($48) {
    $sp$2$ph31 = $sp$2$ph;
    $49 = (($1) + -1)|0;
    $50 = (($49) - ($sp$2$ph31))|0;
    $scevgep32 = (($row) + ($50)|0);
    $scevgep3233 = $scevgep32;
    $51 = $scevgep3233 >>> 2;
    $52 = ($51*3)|0;
    $53 = (($52) + 3)|0;
    $dp$311 = $dp$3$ph;$sp$212 = $sp$2$ph;
    while(1) {
     $54 = ((($sp$212)) + 1|0);
     $55 = HEAP8[$sp$212>>0]|0;
     $56 = ((($dp$311)) + 1|0);
     HEAP8[$dp$311>>0] = $55;
     $57 = ((($sp$212)) + 2|0);
     $58 = HEAP8[$54>>0]|0;
     $59 = ((($dp$311)) + 2|0);
     HEAP8[$56>>0] = $58;
     $60 = HEAP8[$57>>0]|0;
     $61 = ((($dp$311)) + 3|0);
     HEAP8[$59>>0] = $60;
     $62 = ((($sp$212)) + 4|0);
     $63 = ($62>>>0)<($2>>>0);
     if ($63) {
      $dp$311 = $61;$sp$212 = $62;
     } else {
      break;
     }
    }
    $scevgep34 = (($dp$3$ph) + ($53)|0);
    $dp$3$lcssa = $scevgep34;
   } else {
    $dp$3$lcssa = $dp$3$ph;
   }
   $64 = ((($row_info)) + 11|0);
   HEAP8[$64>>0] = 24;
   $dp$5 = $dp$3$lcssa;
   break;
  }
  case 16:  {
   $65 = ($at_start|0)==(0);
   $66 = ((($row)) + 8|0);
   $67 = ((($row)) + 6|0);
   $68 = ((($row)) + 2|0);
   $dp$4$ph = $65 ? $67 : $row;
   $sp$3$ph = $65 ? $66 : $68;
   $69 = ($sp$3$ph>>>0)<($2>>>0);
   if ($69) {
    $sp$3$ph35 = $sp$3$ph;
    $70 = (($1) + -1)|0;
    $71 = (($70) - ($sp$3$ph35))|0;
    $scevgep36 = (($row) + ($71)|0);
    $scevgep3637 = $scevgep36;
    $72 = $scevgep3637 >>> 3;
    $73 = ($72*6)|0;
    $74 = (($73) + 6)|0;
    $dp$416 = $dp$4$ph;$sp$317 = $sp$3$ph;
    while(1) {
     $75 = ((($sp$317)) + 1|0);
     $76 = HEAP8[$sp$317>>0]|0;
     $77 = ((($dp$416)) + 1|0);
     HEAP8[$dp$416>>0] = $76;
     $78 = ((($sp$317)) + 2|0);
     $79 = HEAP8[$75>>0]|0;
     $80 = ((($dp$416)) + 2|0);
     HEAP8[$77>>0] = $79;
     $81 = ((($sp$317)) + 3|0);
     $82 = HEAP8[$78>>0]|0;
     $83 = ((($dp$416)) + 3|0);
     HEAP8[$80>>0] = $82;
     $84 = ((($sp$317)) + 4|0);
     $85 = HEAP8[$81>>0]|0;
     $86 = ((($dp$416)) + 4|0);
     HEAP8[$83>>0] = $85;
     $87 = ((($sp$317)) + 5|0);
     $88 = HEAP8[$84>>0]|0;
     $89 = ((($dp$416)) + 5|0);
     HEAP8[$86>>0] = $88;
     $90 = HEAP8[$87>>0]|0;
     $91 = ((($dp$416)) + 6|0);
     HEAP8[$89>>0] = $90;
     $92 = ((($sp$317)) + 8|0);
     $93 = ($92>>>0)<($2>>>0);
     if ($93) {
      $dp$416 = $91;$sp$317 = $92;
     } else {
      break;
     }
    }
    $scevgep38 = (($dp$4$ph) + ($74)|0);
    $dp$4$lcssa = $scevgep38;
   } else {
    $dp$4$lcssa = $dp$4$ph;
   }
   $94 = ((($row_info)) + 11|0);
   HEAP8[$94>>0] = 48;
   $dp$5 = $dp$4$lcssa;
   break;
  }
  default: {
   return;
  }
  }
  HEAP8[$3>>0] = 3;
  $95 = ((($row_info)) + 8|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = ($96<<24>>24)==(6);
  if ($97) {
   HEAP8[$95>>0] = 2;
   $dp$6 = $dp$5;
  } else {
   $dp$6 = $dp$5;
  }
  break;
 }
 default: {
  return;
 }
 }
 $98 = $dp$6;
 $99 = $row;
 $100 = (($98) - ($99))|0;
 HEAP32[$0>>2] = $100;
 return;
}
function _png_do_bgr($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond18 = 0, $exitcond19 = 0, $exitcond20 = 0, $i$07 = 0, $i2$09 = 0, $i5$013 = 0, $i8$016 = 0, $rp$08 = 0, $rp1$010 = 0, $rp4$012 = 0, $rp7$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($row_info)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 2;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$row_info>>2]|0;
 $5 = ((($row_info)) + 9|0);
 $6 = HEAP8[$5>>0]|0;
 switch ($6<<24>>24) {
 case 8:  {
  switch ($1<<24>>24) {
  case 2:  {
   $8 = ($4|0)==(0);
   if ($8) {
    return;
   } else {
    $i$07 = 0;$rp$08 = $row;
   }
   while(1) {
    $9 = HEAP8[$rp$08>>0]|0;
    $10 = ((($rp$08)) + 2|0);
    $11 = HEAP8[$10>>0]|0;
    HEAP8[$rp$08>>0] = $11;
    HEAP8[$10>>0] = $9;
    $12 = (($i$07) + 1)|0;
    $13 = ((($rp$08)) + 3|0);
    $exitcond = ($12|0)==($4|0);
    if ($exitcond) {
     break;
    } else {
     $i$07 = $12;$rp$08 = $13;
    }
   }
   return;
   break;
  }
  case 6:  {
   $7 = ($4|0)==(0);
   if ($7) {
    return;
   } else {
    $i2$09 = 0;$rp1$010 = $row;
   }
   while(1) {
    $14 = HEAP8[$rp1$010>>0]|0;
    $15 = ((($rp1$010)) + 2|0);
    $16 = HEAP8[$15>>0]|0;
    HEAP8[$rp1$010>>0] = $16;
    HEAP8[$15>>0] = $14;
    $17 = (($i2$09) + 1)|0;
    $18 = ((($rp1$010)) + 4|0);
    $exitcond18 = ($17|0)==($4|0);
    if ($exitcond18) {
     break;
    } else {
     $i2$09 = $17;$rp1$010 = $18;
    }
   }
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 16:  {
  switch ($1<<24>>24) {
  case 2:  {
   $20 = ($4|0)==(0);
   if ($20) {
    return;
   } else {
    $i5$013 = 0;$rp4$012 = $row;
   }
   while(1) {
    $21 = HEAP8[$rp4$012>>0]|0;
    $22 = ((($rp4$012)) + 4|0);
    $23 = HEAP8[$22>>0]|0;
    HEAP8[$rp4$012>>0] = $23;
    HEAP8[$22>>0] = $21;
    $24 = ((($rp4$012)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ((($rp4$012)) + 5|0);
    $27 = HEAP8[$26>>0]|0;
    HEAP8[$24>>0] = $27;
    HEAP8[$26>>0] = $25;
    $28 = (($i5$013) + 1)|0;
    $29 = ((($rp4$012)) + 6|0);
    $exitcond19 = ($28|0)==($4|0);
    if ($exitcond19) {
     break;
    } else {
     $i5$013 = $28;$rp4$012 = $29;
    }
   }
   return;
   break;
  }
  case 6:  {
   $19 = ($4|0)==(0);
   if ($19) {
    return;
   } else {
    $i8$016 = 0;$rp7$015 = $row;
   }
   while(1) {
    $30 = HEAP8[$rp7$015>>0]|0;
    $31 = ((($rp7$015)) + 4|0);
    $32 = HEAP8[$31>>0]|0;
    HEAP8[$rp7$015>>0] = $32;
    HEAP8[$31>>0] = $30;
    $33 = ((($rp7$015)) + 1|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ((($rp7$015)) + 5|0);
    $36 = HEAP8[$35>>0]|0;
    HEAP8[$33>>0] = $36;
    HEAP8[$35>>0] = $34;
    $37 = (($i8$016) + 1)|0;
    $38 = ((($rp7$015)) + 8|0);
    $exitcond20 = ($37|0)==($4|0);
    if ($exitcond20) {
     break;
    } else {
     $i8$016 = $37;$rp7$015 = $38;
    }
   }
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 default: {
  return;
 }
 }
}
function _png_do_check_palette_indexes($png_ptr,$row_info) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 var $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $or$cond = 0, $padding$07 = 0, $padding$19 = 0, $padding$212 = 0, $rp$08 = 0;
 var $rp$110 = 0, $rp$213 = 0, $rp$315 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 420|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($row_info)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = 1 << $5;
 $7 = ($2|0)>=($6|0);
 $8 = ($1<<16>>16)==(0);
 $or$cond = $8 | $7;
 if ($or$cond) {
  return;
 }
 $9 = ((($row_info)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (0 - ($11))|0;
 $13 = HEAP32[$row_info>>2]|0;
 $14 = Math_imul($13, $12)|0;
 $15 = $14 & 7;
 $16 = ((($png_ptr)) + 384|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($row_info)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + ($19)|0);
 switch ($5|0) {
 case 1:  {
  $27 = ($19|0)>(0);
  if (!($27)) {
   return;
  }
  $28 = ((($png_ptr)) + 424|0);
  $padding$07 = $15;$rp$08 = $20;
  while(1) {
   $29 = HEAP8[$rp$08>>0]|0;
   $30 = $29&255;
   $31 = $30 >>> $padding$07;
   $32 = ($31|0)==(0);
   if (!($32)) {
    HEAP32[$28>>2] = 1;
   }
   $33 = ((($rp$08)) + -1|0);
   $34 = ($33>>>0)>($17>>>0);
   if ($34) {
    $padding$07 = 0;$rp$08 = $33;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 2:  {
  $25 = ($19|0)>(0);
  if (!($25)) {
   return;
  }
  $26 = ((($png_ptr)) + 424|0);
  $$pre19 = HEAP32[$26>>2]|0;
  $40 = $$pre19;$padding$19 = $15;$rp$110 = $20;
  while(1) {
   $35 = HEAP8[$rp$110>>0]|0;
   $36 = $35&255;
   $37 = $36 >>> $padding$19;
   $38 = $37 & 3;
   $39 = ($38|0)>($40|0);
   if ($39) {
    HEAP32[$26>>2] = $38;
    $$pre20 = HEAP8[$rp$110>>0]|0;
    $42 = $$pre20;$47 = $38;
   } else {
    $42 = $35;$47 = $40;
   }
   $41 = $42&255;
   $43 = $41 >>> $padding$19;
   $44 = $43 >>> 2;
   $45 = $44 & 3;
   $46 = ($45|0)>($47|0);
   if ($46) {
    HEAP32[$26>>2] = $45;
    $$pre21 = HEAP8[$rp$110>>0]|0;
    $49 = $$pre21;$54 = $45;
   } else {
    $49 = $42;$54 = $47;
   }
   $48 = $49&255;
   $50 = $48 >>> $padding$19;
   $51 = $50 >>> 4;
   $52 = $51 & 3;
   $53 = ($52|0)>($54|0);
   if ($53) {
    HEAP32[$26>>2] = $52;
    $$pre22 = HEAP8[$rp$110>>0]|0;
    $56 = $$pre22;$61 = $52;
   } else {
    $56 = $49;$61 = $54;
   }
   $55 = $56&255;
   $57 = $55 >>> $padding$19;
   $58 = $57 >>> 6;
   $59 = $58 & 3;
   $60 = ($59|0)>($61|0);
   if ($60) {
    HEAP32[$26>>2] = $59;
    $85 = $59;
   } else {
    $85 = $61;
   }
   $62 = ((($rp$110)) + -1|0);
   $63 = ($62>>>0)>($17>>>0);
   if ($63) {
    $40 = $85;$padding$19 = 0;$rp$110 = $62;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 4:  {
  $23 = ($19|0)>(0);
  if (!($23)) {
   return;
  }
  $24 = ((($png_ptr)) + 424|0);
  $$pre17 = HEAP32[$24>>2]|0;
  $69 = $$pre17;$padding$212 = $15;$rp$213 = $20;
  while(1) {
   $64 = HEAP8[$rp$213>>0]|0;
   $65 = $64&255;
   $66 = $65 >>> $padding$212;
   $67 = $66 & 15;
   $68 = ($67|0)>($69|0);
   if ($68) {
    HEAP32[$24>>2] = $67;
    $$pre18 = HEAP8[$rp$213>>0]|0;
    $71 = $$pre18;$76 = $67;
   } else {
    $71 = $64;$76 = $69;
   }
   $70 = $71&255;
   $72 = $70 >>> $padding$212;
   $73 = $72 >>> 4;
   $74 = $73 & 15;
   $75 = ($74|0)>($76|0);
   if ($75) {
    HEAP32[$24>>2] = $74;
    $86 = $74;
   } else {
    $86 = $76;
   }
   $77 = ((($rp$213)) + -1|0);
   $78 = ($77>>>0)>($17>>>0);
   if ($78) {
    $69 = $86;$padding$212 = 0;$rp$213 = $77;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 8:  {
  $21 = ($19|0)>(0);
  if (!($21)) {
   return;
  }
  $22 = ((($png_ptr)) + 424|0);
  $$pre = HEAP32[$22>>2]|0;
  $82 = $$pre;$rp$315 = $20;
  while(1) {
   $79 = HEAP8[$rp$315>>0]|0;
   $80 = $79&255;
   $81 = ($80|0)>($82|0);
   if ($81) {
    HEAP32[$22>>2] = $80;
    $87 = $80;
   } else {
    $87 = $82;
   }
   $83 = ((($rp$315)) + -1|0);
   $84 = ($83>>>0)>($17>>>0);
   if ($84) {
    $82 = $87;$rp$315 = $83;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _png_write_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 180|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _png_error($png_ptr,15144);
  // unreachable;
 } else {
  FUNCTION_TABLE_viii[$1 & 127]($png_ptr,$data,$length);
  return;
 }
}
function _png_default_write_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_fwrite($data,1,$length,$2)|0);
 $4 = ($3|0)==($length|0);
 if ($4) {
  return;
 } else {
  _png_error($png_ptr,15172);
  // unreachable;
 }
}
function _png_flush($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 472|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 FUNCTION_TABLE_vi[$1 & 127]($png_ptr);
 return;
}
function _png_default_flush($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 (_fflush($2)|0);
 return;
}
function _png_set_write_fn($png_ptr,$io_ptr,$write_data_fn,$output_flush_fn) {
 $png_ptr = $png_ptr|0;
 $io_ptr = $io_ptr|0;
 $write_data_fn = $write_data_fn|0;
 $output_flush_fn = $output_flush_fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $png_default_write_data$write_data_fn = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 188|0);
 HEAP32[$1>>2] = $io_ptr;
 $2 = ($write_data_fn|0)==(0|0);
 $3 = ((($png_ptr)) + 180|0);
 $png_default_write_data$write_data_fn = $2 ? 65 : $write_data_fn;
 HEAP32[$3>>2] = $png_default_write_data$write_data_fn;
 $4 = ($output_flush_fn|0)==(0|0);
 $5 = ((($png_ptr)) + 472|0);
 $storemerge1 = $4 ? 66 : $output_flush_fn;
 HEAP32[$5>>2] = $storemerge1;
 $6 = ((($png_ptr)) + 184|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  return;
 }
 HEAP32[$6>>2] = 0;
 _png_warning($png_ptr,15184);
 return;
}
function _png_write_info_before_PLTE($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $$pr = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $or$cond = 0, $or$cond$i = 0, $up$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 $2 = ((($png_ptr)) + 208|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1024;
 $5 = ($4|0)==(0);
 if (!($5)) {
  return;
 }
 _png_write_sig($png_ptr);
 $6 = HEAP32[$2>>2]|0;
 $7 = $6 & 4096;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ((($png_ptr)) + 708|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   _png_warning($png_ptr,15252);
   HEAP32[$9>>2] = 0;
  }
 }
 $12 = HEAP32[$info_ptr>>2]|0;
 $13 = ((($info_ptr)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($info_ptr)) + 24|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ((($info_ptr)) + 25|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ((($info_ptr)) + 26|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ((($info_ptr)) + 27|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ((($info_ptr)) + 28|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 _png_write_IHDR($png_ptr,$12,$14,$17,$20,$23,$26,$29);
 $30 = ((($info_ptr)) + 114|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 & -32760;
 $33 = ($32<<16>>16)==(8);
 if ($33) {
  $34 = ((($info_ptr)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 1;
  $37 = ($36|0)==(0);
  if ($37) {
   $$pr = $31;
  } else {
   $38 = ((($info_ptr)) + 40|0);
   $39 = HEAP32[$38>>2]|0;
   _png_write_gAMA_fixed($png_ptr,$39);
   $$pre = HEAP16[$30>>1]|0;
   $$pr = $$pre;
  }
 } else {
  $$pr = $31;
 }
 $40 = ($$pr<<16>>16)>(-1);
 $41 = ((($info_ptr)) + 8|0);
 do {
  if ($40) {
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 4096;
   $44 = ($43|0)==(0);
   $45 = $42 & 2048;
   $46 = ($45|0)==(0);
   if ($44) {
    if ($46) {
     break;
    }
    $51 = ((($info_ptr)) + 112|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52&65535;
    _png_write_sRGB($png_ptr,$53);
    break;
   }
   if (!($46)) {
    _png_app_warning($png_ptr,15301);
   }
   $47 = ((($info_ptr)) + 116|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($info_ptr)) + 120|0);
   $50 = HEAP32[$49>>2]|0;
   _png_write_iCCP($png_ptr,$48,$50);
  }
 } while(0);
 $54 = HEAP32[$41>>2]|0;
 $55 = $54 & 2;
 $56 = ($55|0)==(0);
 if (!($56)) {
  $57 = ((($info_ptr)) + 148|0);
  $58 = HEAP8[$18>>0]|0;
  $59 = $58&255;
  _png_write_sBIT($png_ptr,$57,$59);
 }
 $60 = HEAP16[$30>>1]|0;
 $61 = $60 & -32752;
 $62 = ($61<<16>>16)==(16);
 if ($62) {
  $63 = HEAP32[$41>>2]|0;
  $64 = $63 & 4;
  $65 = ($64|0)==(0);
  if (!($65)) {
   $66 = ((($info_ptr)) + 44|0);
   _png_write_cHRM_fixed($png_ptr,$66);
  }
 }
 $67 = ((($info_ptr)) + 240|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)>(0);
 if ($69) {
  $70 = ((($info_ptr)) + 236|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($png_ptr)) + 688|0);
  $73 = (($71) + (($68*20)|0)|0);
  $up$02$i = $71;
  while(1) {
   $74 = ((($up$02$i)) + 16|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   do {
    if (!($77)) {
     $78 = (_png_handle_as_unknown($png_ptr,$up$02$i)|0);
     $79 = ($78|0)==(1);
     if (!($79)) {
      $80 = ((($up$02$i)) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81 & 32;
      $83 = ($82<<24>>24)!=(0);
      $84 = ($78|0)==(3);
      $or$cond$i = $84 | $83;
      if (!($or$cond$i)) {
       $85 = ($78|0)==(0);
       if (!($85)) {
        break;
       }
       $86 = HEAP32[$72>>2]|0;
       $87 = ($86|0)==(3);
       if (!($87)) {
        break;
       }
      }
      $88 = ((($up$02$i)) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ($89|0)==(0);
      if ($90) {
       _png_warning($png_ptr,15347);
       $$pre$i = HEAP32[$88>>2]|0;
       $93 = $$pre$i;
      } else {
       $93 = $89;
      }
      $91 = ((($up$02$i)) + 8|0);
      $92 = HEAP32[$91>>2]|0;
      _png_write_chunk($png_ptr,$up$02$i,$92,$93);
     }
    }
   } while(0);
   $94 = ((($up$02$i)) + 20|0);
   $95 = ($94>>>0)<($73>>>0);
   if ($95) {
    $up$02$i = $94;
   } else {
    break;
   }
  }
 }
 $96 = HEAP32[$2>>2]|0;
 $97 = $96 | 1024;
 HEAP32[$2>>2] = $97;
 return;
}
function _png_write_info($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $$pre = 0, $$pre$i = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre19 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$05 = 0, $i$14 = 0, $j$07 = 0, $or$cond = 0, $or$cond$i = 0, $up$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 _png_write_info_before_PLTE($png_ptr,$info_ptr);
 $2 = ((($info_ptr)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = ((($info_ptr)) + 25|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(3);
  if ($13) {
   _png_error($png_ptr,15381);
   // unreachable;
  } else {
   $15 = $3;
  }
 } else {
  $6 = ((($info_ptr)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($info_ptr)) + 20|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  _png_write_PLTE($png_ptr,$7,$10);
  $$pre = HEAP32[$2>>2]|0;
  $15 = $$pre;
 }
 $14 = $15 & 16;
 $16 = ($14|0)==(0);
 if ($16) {
  $46 = $15;
 } else {
  $17 = ((($png_ptr)) + 216|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 524288;
  $20 = ($19|0)==(0);
  $$pre19 = ((($info_ptr)) + 25|0);
  if (!($20)) {
   $21 = HEAP8[$$pre19>>0]|0;
   $22 = ($21<<24>>24)==(3);
   if ($22) {
    $23 = ((($info_ptr)) + 22|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = ($24<<16>>16)==(0);
    if (!($25)) {
     $26 = ((($info_ptr)) + 156|0);
     $j$07 = 0;
     while(1) {
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + ($j$07)|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = $30 ^ 255;
      $32 = $31&255;
      HEAP8[$28>>0] = $32;
      $33 = (($j$07) + 1)|0;
      $34 = HEAP16[$23>>1]|0;
      $35 = $34&65535;
      $36 = ($33|0)<($35|0);
      if ($36) {
       $j$07 = $33;
      } else {
       break;
      }
     }
    }
   }
  }
  $37 = ((($info_ptr)) + 156|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($info_ptr)) + 160|0);
  $40 = ((($info_ptr)) + 22|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = HEAP8[$$pre19>>0]|0;
  $44 = $43&255;
  _png_write_tRNS($png_ptr,$38,$39,$42,$44);
  $$pre9 = HEAP32[$2>>2]|0;
  $46 = $$pre9;
 }
 $45 = $46 & 32;
 $47 = ($45|0)==(0);
 if ($47) {
  $53 = $46;
 } else {
  $48 = ((($info_ptr)) + 170|0);
  $49 = ((($info_ptr)) + 25|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  _png_write_bKGD($png_ptr,$48,$51);
  $$pre10 = HEAP32[$2>>2]|0;
  $53 = $$pre10;
 }
 $52 = $53 & 64;
 $54 = ($52|0)==(0);
 if ($54) {
  $61 = $53;
 } else {
  $55 = ((($info_ptr)) + 204|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($info_ptr)) + 20|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58&65535;
  _png_write_hIST($png_ptr,$56,$59);
  $$pre11 = HEAP32[$2>>2]|0;
  $61 = $$pre11;
 }
 $60 = $61 & 256;
 $62 = ($60|0)==(0);
 if ($62) {
  $71 = $61;
 } else {
  $63 = ((($info_ptr)) + 180|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($info_ptr)) + 184|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($info_ptr)) + 188|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  _png_write_oFFs($png_ptr,$64,$66,$69);
  $$pre12 = HEAP32[$2>>2]|0;
  $71 = $$pre12;
 }
 $70 = $71 & 1024;
 $72 = ($70|0)==(0);
 if ($72) {
  $90 = $71;
 } else {
  $73 = ((($info_ptr)) + 208|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($info_ptr)) + 212|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($info_ptr)) + 216|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($info_ptr)) + 228|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = ((($info_ptr)) + 229|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ((($info_ptr)) + 220|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($info_ptr)) + 224|0);
  $88 = HEAP32[$87>>2]|0;
  _png_write_pCAL($png_ptr,$74,$76,$78,$81,$84,$86,$88);
  $$pre13 = HEAP32[$2>>2]|0;
  $90 = $$pre13;
 }
 $89 = $90 & 16384;
 $91 = ($89|0)==(0);
 if ($91) {
  $100 = $90;
 } else {
  $92 = ((($info_ptr)) + 252|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = ((($info_ptr)) + 256|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($info_ptr)) + 260|0);
  $98 = HEAP32[$97>>2]|0;
  _png_write_sCAL_s($png_ptr,$94,$96,$98);
  $$pre14 = HEAP32[$2>>2]|0;
  $100 = $$pre14;
 }
 $99 = $100 & 128;
 $101 = ($99|0)==(0);
 if ($101) {
  $110 = $100;
 } else {
  $102 = ((($info_ptr)) + 192|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($info_ptr)) + 196|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($info_ptr)) + 200|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  _png_write_pHYs($png_ptr,$103,$105,$108);
  $$pre15 = HEAP32[$2>>2]|0;
  $110 = $$pre15;
 }
 $109 = $110 & 512;
 $111 = ($109|0)==(0);
 if ($111) {
  $117 = $110;
 } else {
  $112 = ((($info_ptr)) + 140|0);
  _png_write_tIME($png_ptr,$112);
  $113 = ((($png_ptr)) + 208|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $114 | 512;
  HEAP32[$113>>2] = $115;
  $$pre16 = HEAP32[$2>>2]|0;
  $117 = $$pre16;
 }
 $116 = $117 & 8192;
 $118 = ($116|0)==(0);
 if (!($118)) {
  $119 = ((($info_ptr)) + 248|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)>(0);
  if ($121) {
   $122 = ((($info_ptr)) + 244|0);
   $i$05 = 0;
   while(1) {
    $127 = HEAP32[$122>>2]|0;
    $128 = (($127) + ($i$05<<4)|0);
    _png_write_sPLT($png_ptr,$128);
    $129 = (($i$05) + 1)|0;
    $130 = HEAP32[$119>>2]|0;
    $131 = ($129|0)<($130|0);
    if ($131) {
     $i$05 = $129;
    } else {
     break;
    }
   }
  }
 }
 $123 = ((($info_ptr)) + 128|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)>(0);
 if ($125) {
  $126 = ((($info_ptr)) + 136|0);
  $$pre17 = HEAP32[$126>>2]|0;
  $133 = $$pre17;$i$14 = 0;
  while(1) {
   $132 = (($133) + (($i$14*28)|0)|0);
   $134 = HEAP32[$132>>2]|0;
   $135 = ($134|0)>(0);
   L50: do {
    if ($135) {
     $136 = (((($133) + (($i$14*28)|0)|0)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (((($133) + (($i$14*28)|0)|0)) + 20|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (((($133) + (($i$14*28)|0)|0)) + 24|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (((($133) + (($i$14*28)|0)|0)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     _png_write_iTXt($png_ptr,$134,$137,$139,$141,$143);
     $144 = HEAP32[$126>>2]|0;
     $145 = (($144) + (($i$14*28)|0)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(-1);
     if ($147) {
      HEAP32[$145>>2] = -3;
      $192 = $144;
      break;
     } else {
      HEAP32[$145>>2] = -2;
      $192 = $144;
      break;
     }
    } else {
     switch ($134|0) {
     case 0:  {
      $148 = (((($133) + (($i$14*28)|0)|0)) + 4|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (((($133) + (($i$14*28)|0)|0)) + 8|0);
      $151 = HEAP32[$150>>2]|0;
      _png_write_zTXt($png_ptr,$149,$151,0);
      $152 = HEAP32[$126>>2]|0;
      $153 = (($152) + (($i$14*28)|0)|0);
      HEAP32[$153>>2] = -2;
      $192 = $152;
      break L50;
      break;
     }
     case -1:  {
      $154 = (((($133) + (($i$14*28)|0)|0)) + 4|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (((($133) + (($i$14*28)|0)|0)) + 8|0);
      $157 = HEAP32[$156>>2]|0;
      _png_write_tEXt($png_ptr,$155,$157,0);
      $158 = HEAP32[$126>>2]|0;
      $159 = (($158) + (($i$14*28)|0)|0);
      HEAP32[$159>>2] = -3;
      $192 = $158;
      break L50;
      break;
     }
     default: {
      $192 = $133;
      break L50;
     }
     }
    }
   } while(0);
   $160 = (($i$14) + 1)|0;
   $161 = HEAP32[$123>>2]|0;
   $162 = ($160|0)<($161|0);
   if ($162) {
    $133 = $192;$i$14 = $160;
   } else {
    break;
   }
  }
 }
 $163 = ((($info_ptr)) + 240|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)>(0);
 if (!($165)) {
  return;
 }
 $166 = ((($info_ptr)) + 236|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ((($png_ptr)) + 688|0);
 $169 = (($167) + (($164*20)|0)|0);
 $up$02$i = $167;
 while(1) {
  $170 = ((($up$02$i)) + 16|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171 & 2;
  $173 = ($172<<24>>24)==(0);
  do {
   if (!($173)) {
    $174 = (_png_handle_as_unknown($png_ptr,$up$02$i)|0);
    $175 = ($174|0)==(1);
    if (!($175)) {
     $176 = ((($up$02$i)) + 3|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $177 & 32;
     $179 = ($178<<24>>24)!=(0);
     $180 = ($174|0)==(3);
     $or$cond$i = $180 | $179;
     if (!($or$cond$i)) {
      $181 = ($174|0)==(0);
      if (!($181)) {
       break;
      }
      $182 = HEAP32[$168>>2]|0;
      $183 = ($182|0)==(3);
      if (!($183)) {
       break;
      }
     }
     $184 = ((($up$02$i)) + 12|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($185|0)==(0);
     if ($186) {
      _png_warning($png_ptr,15347);
      $$pre$i = HEAP32[$184>>2]|0;
      $189 = $$pre$i;
     } else {
      $189 = $185;
     }
     $187 = ((($up$02$i)) + 8|0);
     $188 = HEAP32[$187>>2]|0;
     _png_write_chunk($png_ptr,$up$02$i,$188,$189);
    }
   }
  } while(0);
  $190 = ((($up$02$i)) + 20|0);
  $191 = ($190>>>0)<($169>>>0);
  if ($191) {
   $up$02$i = $190;
  } else {
   break;
  }
 }
 return;
}
function _png_write_end($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $i$01 = 0, $or$cond$i = 0, $up$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 208|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  _png_error($png_ptr,15424);
  // unreachable;
 }
 $5 = ((($png_ptr)) + 424|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($png_ptr)) + 420|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($6|0)>($9|0);
 if ($10) {
  _png_benign_error($png_ptr,15451);
 }
 $11 = ($info_ptr|0)==(0|0);
 if (!($11)) {
  $12 = ((($info_ptr)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 512;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = HEAP32[$1>>2]|0;
   $17 = $16 & 512;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = ((($info_ptr)) + 140|0);
    _png_write_tIME($png_ptr,$19);
   }
  }
  $20 = ((($info_ptr)) + 128|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>(0);
  if ($22) {
   $23 = ((($info_ptr)) + 136|0);
   $$pre = HEAP32[$23>>2]|0;
   $25 = $$pre;$i$01 = 0;
   while(1) {
    $24 = (($25) + (($i$01*28)|0)|0);
    $26 = HEAP32[$24>>2]|0;
    $27 = ($26|0)>(0);
    do {
     if ($27) {
      $28 = (((($25) + (($i$01*28)|0)|0)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (((($25) + (($i$01*28)|0)|0)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (((($25) + (($i$01*28)|0)|0)) + 24|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (((($25) + (($i$01*28)|0)|0)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      _png_write_iTXt($png_ptr,$26,$29,$31,$33,$35);
      $36 = HEAP32[$23>>2]|0;
      $37 = (($36) + (($i$01*28)|0)|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($38|0)==(-1);
      if ($39) {
       HEAP32[$37>>2] = -3;
       $88 = $36;
       break;
      } else {
       HEAP32[$37>>2] = -2;
       $88 = $36;
       break;
      }
     } else {
      $40 = ($26|0)>(-1);
      if ($40) {
       $41 = (((($25) + (($i$01*28)|0)|0)) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (((($25) + (($i$01*28)|0)|0)) + 8|0);
       $44 = HEAP32[$43>>2]|0;
       _png_write_zTXt($png_ptr,$42,$44,$26);
       $45 = HEAP32[$23>>2]|0;
       $46 = (($45) + (($i$01*28)|0)|0);
       HEAP32[$46>>2] = -2;
       $88 = $45;
       break;
      }
      $47 = ($26|0)==(-1);
      if ($47) {
       $48 = (((($25) + (($i$01*28)|0)|0)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (((($25) + (($i$01*28)|0)|0)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       _png_write_tEXt($png_ptr,$49,$51,0);
       $52 = HEAP32[$23>>2]|0;
       $53 = (($52) + (($i$01*28)|0)|0);
       HEAP32[$53>>2] = -3;
       $88 = $52;
      } else {
       $88 = $25;
      }
     }
    } while(0);
    $54 = (($i$01) + 1)|0;
    $55 = HEAP32[$20>>2]|0;
    $56 = ($54|0)<($55|0);
    if ($56) {
     $25 = $88;$i$01 = $54;
    } else {
     break;
    }
   }
  }
  $57 = ((($info_ptr)) + 240|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)>(0);
  if ($59) {
   $60 = ((($info_ptr)) + 236|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($png_ptr)) + 688|0);
   $63 = (($61) + (($58*20)|0)|0);
   $up$02$i = $61;
   while(1) {
    $64 = ((($up$02$i)) + 16|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 & 8;
    $67 = ($66<<24>>24)==(0);
    do {
     if (!($67)) {
      $68 = (_png_handle_as_unknown($png_ptr,$up$02$i)|0);
      $69 = ($68|0)==(1);
      if (!($69)) {
       $70 = ((($up$02$i)) + 3|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = $71 & 32;
       $73 = ($72<<24>>24)!=(0);
       $74 = ($68|0)==(3);
       $or$cond$i = $74 | $73;
       if (!($or$cond$i)) {
        $75 = ($68|0)==(0);
        if (!($75)) {
         break;
        }
        $76 = HEAP32[$62>>2]|0;
        $77 = ($76|0)==(3);
        if (!($77)) {
         break;
        }
       }
       $78 = ((($up$02$i)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==(0);
       if ($80) {
        _png_warning($png_ptr,15347);
        $$pre$i = HEAP32[$78>>2]|0;
        $83 = $$pre$i;
       } else {
        $83 = $79;
       }
       $81 = ((($up$02$i)) + 8|0);
       $82 = HEAP32[$81>>2]|0;
       _png_write_chunk($png_ptr,$up$02$i,$82,$83);
      }
     }
    } while(0);
    $84 = ((($up$02$i)) + 20|0);
    $85 = ($84>>>0)<($63>>>0);
    if ($85) {
     $up$02$i = $84;
    } else {
     break;
    }
   }
  }
 }
 $86 = HEAP32[$1>>2]|0;
 $87 = $86 | 8;
 HEAP32[$1>>2] = $87;
 _png_write_IEND($png_ptr);
 return;
}
function _png_create_write_struct($user_png_ver,$error_ptr,$error_fn,$warn_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_png_create_png_struct($user_png_ver,$error_ptr,$error_fn,$warn_fn,0,0,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return ($0|0);
 }
 $2 = ((($0)) + 284|0);
 HEAP32[$2>>2] = 8192;
 $3 = ((($0)) + 304|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($0)) + 288|0);
 HEAP32[$4>>2] = -1;
 $5 = ((($0)) + 300|0);
 HEAP32[$5>>2] = 8;
 $6 = ((($0)) + 296|0);
 HEAP32[$6>>2] = 15;
 $7 = ((($0)) + 292|0);
 HEAP32[$7>>2] = 8;
 $8 = ((($0)) + 324|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 308|0);
 HEAP32[$9>>2] = -1;
 $10 = ((($0)) + 320|0);
 HEAP32[$10>>2] = 8;
 $11 = ((($0)) + 316|0);
 HEAP32[$11>>2] = 15;
 $12 = ((($0)) + 312|0);
 HEAP32[$12>>2] = 8;
 $13 = ((($0)) + 212|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 | 2097152;
 HEAP32[$13>>2] = $15;
 _png_set_write_fn($0,0,0,0);
 return ($0|0);
}
function _png_write_row($png_ptr,$row) {
 $png_ptr = $png_ptr|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes_per_pixel$0$i = 0, $bytes_per_pixel$1$i = 0;
 var $exitcond$i = 0, $exitcond7$i = 0, $i$02$i = 0, $i2$04$i = 0, $row_info = 0, $row_info$idx$val = 0, $row_info$idx1$val = 0, $rp$03$i = 0, $rp1$05$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row_info = sp;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($png_ptr)) + 372|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = ((($png_ptr)) + 433|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = ((($png_ptr)) + 208|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8 & 1024;
    $10 = ($9|0)==(0);
    if ($10) {
     _png_error($png_ptr,15493);
     // unreachable;
    } else {
     _png_write_start_row($png_ptr);
     break;
    }
   }
  }
 } while(0);
 $11 = ((($png_ptr)) + 432|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L11: do {
  if (!($13)) {
   $14 = ((($png_ptr)) + 216|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 2;
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = ((($png_ptr)) + 433|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    switch ($20|0) {
    case 0:  {
     $21 = HEAP32[$1>>2]|0;
     $22 = $21 & 7;
     $23 = ($22|0)==(0);
     if ($23) {
      break L11;
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $24 = HEAP32[$1>>2]|0;
     $25 = $24 & 7;
     $26 = ($25|0)==(0);
     if ($26) {
      $27 = ((($png_ptr)) + 348|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28>>>0)<(5);
      if (!($29)) {
       break L11;
      }
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $30 = HEAP32[$1>>2]|0;
     $31 = $30 & 7;
     $32 = ($31|0)==(4);
     if ($32) {
      break L11;
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $33 = HEAP32[$1>>2]|0;
     $34 = $33 & 3;
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = ((($png_ptr)) + 348|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37>>>0)<(3);
      if (!($38)) {
       break L11;
      }
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $39 = HEAP32[$1>>2]|0;
     $40 = $39 & 3;
     $41 = ($40|0)==(2);
     if ($41) {
      break L11;
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $42 = HEAP32[$1>>2]|0;
     $43 = $42 & 1;
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = ((($png_ptr)) + 348|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46>>>0)<(2);
      if (!($47)) {
       break L11;
      }
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    case 6:  {
     $48 = HEAP32[$1>>2]|0;
     $49 = $48 & 1;
     $50 = ($49|0)==(0);
     if (!($50)) {
      break L11;
     }
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
     break;
    }
    default: {
     break L11;
    }
    }
   }
  }
 } while(0);
 $51 = ((($png_ptr)) + 435|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = ((($row_info)) + 8|0);
 HEAP8[$53>>0] = $52;
 $54 = ((($png_ptr)) + 360|0);
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$row_info>>2] = $55;
 $56 = ((($png_ptr)) + 440|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ((($row_info)) + 10|0);
 HEAP8[$58>>0] = $57;
 $59 = ((($png_ptr)) + 437|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = ((($row_info)) + 9|0);
 HEAP8[$61>>0] = $60;
 $62 = $60&255;
 $63 = $57&255;
 $64 = Math_imul($63, $62)|0;
 $65 = $64&255;
 $66 = ((($row_info)) + 11|0);
 HEAP8[$66>>0] = $65;
 $67 = $64 & 255;
 $68 = ($67>>>0)>(7);
 if ($68) {
  $69 = $67 >>> 3;
  $70 = Math_imul($69, $55)|0;
  $75 = $70;
 } else {
  $71 = Math_imul($67, $55)|0;
  $72 = (($71) + 7)|0;
  $73 = $72 >>> 3;
  $75 = $73;
 }
 $74 = ((($row_info)) + 4|0);
 HEAP32[$74>>2] = $75;
 $76 = ((($png_ptr)) + 384|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 1|0);
 _memcpy(($78|0),($row|0),($75|0))|0;
 $79 = HEAP8[$11>>0]|0;
 $80 = ($79<<24>>24)==(0);
 if (!($80)) {
  $81 = ((($png_ptr)) + 433|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = ($82&255)<(6);
  if ($84) {
   $85 = ((($png_ptr)) + 216|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 & 2;
   $88 = ($87|0)==(0);
   if (!($88)) {
    $89 = HEAP32[$76>>2]|0;
    $90 = ((($89)) + 1|0);
    _png_do_write_interlace($row_info,$90,$83);
    $91 = HEAP32[$row_info>>2]|0;
    $92 = ($91|0)==(0);
    if ($92) {
     _png_write_finish_row($png_ptr);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $93 = ((($png_ptr)) + 216|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0);
 if (!($95)) {
  _png_do_write_transformations($png_ptr,$row_info);
 }
 $96 = HEAP8[$66>>0]|0;
 $97 = ((($png_ptr)) + 438|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = ($96<<24>>24)==($98<<24>>24);
 if (!($99)) {
  _png_error($png_ptr,15546);
  // unreachable;
 }
 $100 = ((($png_ptr)) + 443|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($96<<24>>24)==($101<<24>>24);
 if (!($102)) {
  _png_error($png_ptr,15546);
  // unreachable;
 }
 $103 = ((($png_ptr)) + 708|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104 & 4;
 $106 = ($105|0)==(0);
 L63: do {
  if (!($106)) {
   $107 = ((($png_ptr)) + 712|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108<<24>>24)==(64);
   if ($109) {
    $110 = HEAP32[$76>>2]|0;
    $111 = ((($110)) + 1|0);
    $row_info$idx$val = HEAP32[$row_info>>2]|0;
    $row_info$idx1$val = HEAP16[$53>>1]|0;
    $112 = $row_info$idx1$val&255;
    $113 = $112 & 2;
    $114 = ($113<<24>>24)==(0);
    if (!($114)) {
     $115 = ($row_info$idx1$val&65535) >>> 8;
     $116 = $115&255;
     switch ($116<<24>>24) {
     case 8:  {
      switch ($112<<24>>24) {
      case 2:  {
       $bytes_per_pixel$0$i = 3;
       break;
      }
      case 6:  {
       $bytes_per_pixel$0$i = 4;
       break;
      }
      default: {
       break L63;
      }
      }
      $117 = ($row_info$idx$val|0)==(0);
      if ($117) {
       break L63;
      } else {
       $i$02$i = 0;$rp$03$i = $111;
      }
      while(1) {
       $118 = HEAP8[$rp$03$i>>0]|0;
       $119 = $118&255;
       $120 = ((($rp$03$i)) + 1|0);
       $121 = HEAP8[$120>>0]|0;
       $122 = $121&255;
       $123 = (($119) - ($122))|0;
       $124 = $123&255;
       HEAP8[$rp$03$i>>0] = $124;
       $125 = ((($rp$03$i)) + 2|0);
       $126 = HEAP8[$125>>0]|0;
       $127 = $126&255;
       $128 = (($127) - ($122))|0;
       $129 = $128&255;
       HEAP8[$125>>0] = $129;
       $130 = (($i$02$i) + 1)|0;
       $131 = (($rp$03$i) + ($bytes_per_pixel$0$i)|0);
       $exitcond$i = ($130|0)==($row_info$idx$val|0);
       if ($exitcond$i) {
        break;
       } else {
        $i$02$i = $130;$rp$03$i = $131;
       }
      }
      break;
     }
     case 16:  {
      switch ($112<<24>>24) {
      case 2:  {
       $bytes_per_pixel$1$i = 6;
       break;
      }
      case 6:  {
       $bytes_per_pixel$1$i = 8;
       break;
      }
      default: {
       break L63;
      }
      }
      $132 = ($row_info$idx$val|0)==(0);
      if ($132) {
       break L63;
      } else {
       $i2$04$i = 0;$rp1$05$i = $111;
      }
      while(1) {
       $133 = HEAP8[$rp1$05$i>>0]|0;
       $134 = $133&255;
       $135 = $134 << 8;
       $136 = ((($rp1$05$i)) + 1|0);
       $137 = HEAP8[$136>>0]|0;
       $138 = $137&255;
       $139 = $135 | $138;
       $140 = ((($rp1$05$i)) + 2|0);
       $141 = HEAP8[$140>>0]|0;
       $142 = $141&255;
       $143 = $142 << 8;
       $144 = ((($rp1$05$i)) + 3|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = $145&255;
       $147 = $143 | $146;
       $148 = ((($rp1$05$i)) + 4|0);
       $149 = HEAP8[$148>>0]|0;
       $150 = $149&255;
       $151 = $150 << 8;
       $152 = ((($rp1$05$i)) + 5|0);
       $153 = HEAP8[$152>>0]|0;
       $154 = $153&255;
       $155 = $151 | $154;
       $156 = (($139) - ($147))|0;
       $157 = (($155) - ($147))|0;
       $158 = $156 >>> 8;
       $159 = $158&255;
       HEAP8[$rp1$05$i>>0] = $159;
       $160 = $156&255;
       HEAP8[$136>>0] = $160;
       $161 = $157 >>> 8;
       $162 = $161&255;
       HEAP8[$148>>0] = $162;
       $163 = $157&255;
       HEAP8[$152>>0] = $163;
       $164 = (($i2$04$i) + 1)|0;
       $165 = (($rp1$05$i) + ($bytes_per_pixel$1$i)|0);
       $exitcond7$i = ($164|0)==($row_info$idx$val|0);
       if ($exitcond7$i) {
        break;
       } else {
        $i2$04$i = $164;$rp1$05$i = $165;
       }
      }
      break;
     }
     default: {
      break L63;
     }
     }
    }
   }
  }
 } while(0);
 $166 = HEAP8[$53>>0]|0;
 $167 = ($166<<24>>24)==(3);
 if ($167) {
  $168 = ((($png_ptr)) + 424|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)>(-1);
  if ($170) {
   _png_do_check_palette_indexes($png_ptr,$row_info);
  }
 }
 _png_write_find_filter($png_ptr,$row_info);
 $171 = ((($png_ptr)) + 548|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)==(0|0);
 if ($173) {
  STACKTOP = sp;return;
 }
 $174 = HEAP32[$1>>2]|0;
 $175 = ((($png_ptr)) + 433|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = $176&255;
 FUNCTION_TABLE_viii[$172 & 127]($png_ptr,$174,$177);
 STACKTOP = sp;return;
}
function _png_write_flush($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($png_ptr)) + 372|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($png_ptr)) + 356|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  return;
 }
 _png_compress_IDAT($png_ptr,0,0,2);
 $6 = ((($png_ptr)) + 480|0);
 HEAP32[$6>>2] = 0;
 _png_flush($png_ptr);
 return;
}
function _png_destroy_write_struct($png_ptr_ptr,$info_ptr_ptr) {
 $png_ptr_ptr = $png_ptr_ptr|0;
 $info_ptr_ptr = $info_ptr_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr_ptr|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$png_ptr_ptr>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _png_destroy_info_struct($1,$info_ptr_ptr);
 HEAP32[$png_ptr_ptr>>2] = 0;
 $3 = ((($1)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($1)) + 224|0);
  (_deflateEnd($7)|0);
 }
 $8 = ((($1)) + 280|0);
 _png_free_buffer_list($1,$8);
 $9 = ((($1)) + 384|0);
 $10 = HEAP32[$9>>2]|0;
 _png_free($1,$10);
 HEAP32[$9>>2] = 0;
 $11 = ((($1)) + 380|0);
 $12 = HEAP32[$11>>2]|0;
 _png_free($1,$12);
 $13 = ((($1)) + 388|0);
 $14 = HEAP32[$13>>2]|0;
 _png_free($1,$14);
 $15 = ((($1)) + 392|0);
 $16 = HEAP32[$15>>2]|0;
 _png_free($1,$16);
 $17 = ((($1)) + 396|0);
 $18 = HEAP32[$17>>2]|0;
 _png_free($1,$18);
 $19 = ((($1)) + 400|0);
 $20 = HEAP32[$19>>2]|0;
 _png_free($1,$20);
 HEAP32[$11>>2] = 0;
 $21 = ((($1)) + 621|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($1)) + 620|0);
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;
 HEAP8[$22>>0] = 1;
 $23 = ((($1)) + 624|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  HEAP32[$23>>2] = 0;
  _png_free($1,$24);
 }
 $26 = ((($1)) + 628|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  HEAP32[$26>>2] = 0;
  _png_free($1,$27);
 }
 $29 = ((($1)) + 632|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  HEAP32[$29>>2] = 0;
  _png_free($1,$30);
 }
 $32 = ((($1)) + 636|0);
 $33 = HEAP32[$32>>2]|0;
 _png_free($1,$33);
 $34 = ((($1)) + 640|0);
 $35 = HEAP32[$34>>2]|0;
 _png_free($1,$35);
 HEAP32[$32>>2] = 0;
 HEAP32[$34>>2] = 0;
 $36 = ((($1)) + 696|0);
 $37 = HEAP32[$36>>2]|0;
 _png_free($1,$37);
 HEAP32[$36>>2] = 0;
 _png_destroy_png_struct($1);
 return;
}
function _png_write_png($png_ptr,$info_ptr,$transforms,$params) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $transforms = $transforms|0;
 $params = $params|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i = 0, $or$cond = 0, $pass$03$i = 0, $rp$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($png_ptr|0)==(0|0);
 $1 = ($info_ptr|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  return;
 }
 $2 = ((($info_ptr)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 32768;
 $5 = ($4|0)==(0);
 if ($5) {
  _png_app_error($png_ptr,15583);
  return;
 }
 _png_write_info($png_ptr,$info_ptr);
 $6 = $transforms & 32;
 $7 = ($6|0)==(0);
 if (!($7)) {
  _png_set_invert_mono($png_ptr);
 }
 $8 = $transforms & 64;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = HEAP32[$2>>2]|0;
  $11 = $10 & 2;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($info_ptr)) + 148|0);
   _png_set_shift($png_ptr,$13);
  }
 }
 $14 = $transforms & 4;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _png_set_packing($png_ptr);
 }
 $16 = $transforms & 256;
 $17 = ($16|0)==(0);
 if (!($17)) {
  _png_set_swap_alpha($png_ptr);
 }
 $18 = $transforms & 6144;
 $19 = ($18|0)==(0);
 do {
  if (!($19)) {
   $20 = $transforms & 4096;
   $21 = ($20|0)==(0);
   $22 = $transforms & 2048;
   $23 = ($22|0)!=(0);
   if ($21) {
    if (!($23)) {
     break;
    }
    _png_set_filler($png_ptr,0,0);
    break;
   }
   if ($23) {
    _png_app_error($png_ptr,15620);
   }
   _png_set_filler($png_ptr,0,1);
  }
 } while(0);
 $24 = $transforms & 128;
 $25 = ($24|0)==(0);
 if (!($25)) {
  _png_set_bgr($png_ptr);
 }
 $26 = $transforms & 512;
 $27 = ($26|0)==(0);
 if (!($27)) {
  _png_set_swap($png_ptr);
 }
 $28 = $transforms & 8;
 $29 = ($28|0)==(0);
 if (!($29)) {
  _png_set_packswap($png_ptr);
 }
 $30 = $transforms & 1024;
 $31 = ($30|0)==(0);
 if (!($31)) {
  _png_set_invert_alpha($png_ptr);
 }
 $32 = ((($info_ptr)) + 264|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_png_set_interlace_handling($png_ptr)|0);
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = ((($png_ptr)) + 352|0);
  $$pre$i = HEAP32[$36>>2]|0;
  $37 = $$pre$i;$pass$03$i = 0;
  while(1) {
   $38 = ($37|0)==(0);
   if ($38) {
    $45 = 0;
   } else {
    $i$01$i = 0;$rp$02$i = $33;
    while(1) {
     $39 = HEAP32[$rp$02$i>>2]|0;
     _png_write_row($png_ptr,$39);
     $40 = (($i$01$i) + 1)|0;
     $41 = ((($rp$02$i)) + 4|0);
     $42 = HEAP32[$36>>2]|0;
     $43 = ($40>>>0)<($42>>>0);
     if ($43) {
      $i$01$i = $40;$rp$02$i = $41;
     } else {
      $45 = $42;
      break;
     }
    }
   }
   $44 = (($pass$03$i) + 1)|0;
   $exitcond$i = ($44|0)==($34|0);
   if ($exitcond$i) {
    break;
   } else {
    $37 = $45;$pass$03$i = $44;
   }
  }
 }
 _png_write_end($png_ptr,$info_ptr);
 return;
}
function _png_do_write_transformations($png_ptr,$row_info) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 var $$$i = 0, $$lobit = 0, $$pn$i = 0, $$pn1$i = 0, $$pn2$i = 0, $$pn34$i = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$sink33$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bp$010$i = 0, $bp1$019$i = 0, $bp6$028$i = 0, $channels$0$i = 0, $channels$1$i = 0, $dp$04$i = 0, $dp$1$i = 0, $dp$1$i$lcssa = 0, $dp12$019$i = 0, $dp2$09$i = 0, $dp2$1$i = 0, $dp2$1$i$lcssa = 0, $dp6$013$i = 0, $dp7$015$i = 0, $dp7$020$i = 0, $dp7$1$i = 0, $dp7$1$i$lcssa = 0, $exitcond$i = 0, $exitcond$i1 = 0;
 var $exitcond$i12 = 0, $exitcond$i6 = 0, $exitcond19$i = 0, $exitcond20$i = 0, $exitcond21$i = 0, $exitcond22$i = 0, $exitcond23$i = 0, $exitcond24$i = 0, $exitcond30$i = 0, $exitcond31$i = 0, $exitcond31$i17 = 0, $exitcond32$i = 0, $i$01$i = 0, $i$07$i = 0, $i$07$i5 = 0, $i$09$i = 0, $i10$023$i = 0, $i11$017$i = 0, $i13$020$i = 0, $i2$020$i = 0;
 var $i3$010$i = 0, $i3$010$i8 = 0, $i4$012$i = 0, $i7$014$i = 0, $i7$029$i = 0, $i8$016$i = 0, $j$08$i = 0, $j10$022$i = 0, $j3$013$i = 0, $mask$0$i = 0, $mask$03$i = 0, $mask$1$i = 0, $mask$1$i$lcssa = 0, $or$cond$i = 0, $or$cond3$i = 0, $out$0$lcssa$i = 0, $out$07$i = 0, $out$1$i = 0, $out5$0$lcssa$i = 0, $out5$014$i = 0;
 var $out5$1$i = 0, $shift$010$i = 0, $shift$1$i = 0, $shift$1$i$lcssa = 0, $shift8$021$i = 0, $shift8$1$i = 0, $shift8$1$i$lcssa = 0, $shift_dec$i = 0, $shift_start$i = 0, $sp$05$i = 0, $sp$08$i = 0, $sp$09$i = 0, $sp1$012$i = 0, $sp1$08$i = 0, $sp1$09$i = 0, $sp6$019$i = 0, $sp9$016$i = 0, $v$0$$i = 0, $v$02$i = 0, $v$2$i = 0;
 var $v$2$i$lcssa = 0, $v3$011$i = 0, $v3$1$i = 0, $v3$1$i$lcssa = 0, $v9$022$i = 0, $v9$1$i = 0, $v9$1$i$lcssa = 0, $value$0$lcssa$i = 0, $value$023$i = 0, $value$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $shift_start$i = sp + 16|0;
 $shift_dec$i = sp;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($png_ptr)) + 216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1048576;
 $4 = ($3|0)==(0);
 if ($4) {
  $12 = $2;
 } else {
  $5 = ((($png_ptr)) + 196|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $12 = $2;
  } else {
   $8 = ((($png_ptr)) + 384|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 1|0);
   FUNCTION_TABLE_viii[$6 & 127]($png_ptr,$row_info,$10);
   $$pre = HEAP32[$1>>2]|0;
   $12 = $$pre;
  }
 }
 $11 = $12 & 32768;
 $13 = ($11|0)==(0);
 if ($13) {
  $22 = $12;
 } else {
  $14 = ((($png_ptr)) + 384|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 1|0);
  $17 = ((($png_ptr)) + 212|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 7;
  $$lobit = $19 & 1;
  $20 = $$lobit ^ 1;
  _png_do_strip_channel($row_info,$16,$20);
  $$pre28 = HEAP32[$1>>2]|0;
  $22 = $$pre28;
 }
 $21 = $22 & 65536;
 $23 = ($21|0)==(0);
 if ($23) {
  $28 = $22;
 } else {
  $24 = ((($png_ptr)) + 384|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 1|0);
  _png_do_packswap($row_info,$26);
  $$pre29 = HEAP32[$1>>2]|0;
  $28 = $$pre29;
 }
 $27 = $28 & 4;
 $29 = ($27|0)==(0);
 if ($29) {
  $101 = $28;
 } else {
  $30 = ((($png_ptr)) + 384|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 1|0);
  $33 = ((($png_ptr)) + 436|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ((($row_info)) + 9|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ($37<<24>>24)==(8);
  if ($38) {
   $39 = ((($row_info)) + 10|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(1);
   if ($41) {
    switch ($35|0) {
    case 1:  {
     $42 = HEAP32[$row_info>>2]|0;
     $43 = ($42|0)==(0);
     if ($43) {
      $$pre$phi$iZ2D = $row_info;
     } else {
      $dp$04$i = $32;$i$01$i = 0;$mask$03$i = 128;$sp$05$i = $32;$v$02$i = 0;
      while(1) {
       $44 = HEAP8[$sp$05$i>>0]|0;
       $45 = ($44<<24>>24)==(0);
       $46 = $45 ? 0 : $mask$03$i;
       $v$0$$i = $46 | $v$02$i;
       $47 = ((($sp$05$i)) + 1|0);
       $48 = ($mask$03$i|0)>(1);
       if ($48) {
        $49 = $mask$03$i >> 1;
        $dp$1$i = $dp$04$i;$mask$1$i = $49;$v$2$i = $v$0$$i;
       } else {
        $50 = $v$0$$i&255;
        HEAP8[$dp$04$i>>0] = $50;
        $51 = ((($dp$04$i)) + 1|0);
        $dp$1$i = $51;$mask$1$i = 128;$v$2$i = 0;
       }
       $52 = (($i$01$i) + 1)|0;
       $exitcond$i = ($52|0)==($42|0);
       if ($exitcond$i) {
        $dp$1$i$lcssa = $dp$1$i;$mask$1$i$lcssa = $mask$1$i;$v$2$i$lcssa = $v$2$i;
        break;
       } else {
        $dp$04$i = $dp$1$i;$i$01$i = $52;$mask$03$i = $mask$1$i;$sp$05$i = $47;$v$02$i = $v$2$i;
       }
      }
      $53 = ($mask$1$i$lcssa|0)==(128);
      if ($53) {
       $$pre$phi$iZ2D = $row_info;
      } else {
       $54 = $v$2$i$lcssa&255;
       HEAP8[$dp$1$i$lcssa>>0] = $54;
       $$pre$phi$iZ2D = $row_info;
      }
     }
     break;
    }
    case 2:  {
     $55 = HEAP32[$row_info>>2]|0;
     $56 = ($55|0)==(0);
     if ($56) {
      $$pre$phi$iZ2D = $row_info;
     } else {
      $dp2$09$i = $32;$i4$012$i = 0;$shift$010$i = 6;$sp1$08$i = $32;$v3$011$i = 0;
      while(1) {
       $57 = HEAP8[$sp1$08$i>>0]|0;
       $58 = $57&255;
       $59 = $58 & 3;
       $60 = $59 << $shift$010$i;
       $61 = $60 | $v3$011$i;
       $62 = ($shift$010$i|0)==(0);
       if ($62) {
        $63 = $61&255;
        HEAP8[$dp2$09$i>>0] = $63;
        $64 = ((($dp2$09$i)) + 1|0);
        $dp2$1$i = $64;$shift$1$i = 6;$v3$1$i = 0;
       } else {
        $65 = (($shift$010$i) + -2)|0;
        $dp2$1$i = $dp2$09$i;$shift$1$i = $65;$v3$1$i = $61;
       }
       $66 = ((($sp1$08$i)) + 1|0);
       $67 = (($i4$012$i) + 1)|0;
       $exitcond30$i = ($67|0)==($55|0);
       if ($exitcond30$i) {
        $dp2$1$i$lcssa = $dp2$1$i;$shift$1$i$lcssa = $shift$1$i;$v3$1$i$lcssa = $v3$1$i;
        break;
       } else {
        $dp2$09$i = $dp2$1$i;$i4$012$i = $67;$shift$010$i = $shift$1$i;$sp1$08$i = $66;$v3$011$i = $v3$1$i;
       }
      }
      $68 = ($shift$1$i$lcssa|0)==(6);
      if ($68) {
       $$pre$phi$iZ2D = $row_info;
      } else {
       $69 = $v3$1$i$lcssa&255;
       HEAP8[$dp2$1$i$lcssa>>0] = $69;
       $$pre$phi$iZ2D = $row_info;
      }
     }
     break;
    }
    case 4:  {
     $70 = HEAP32[$row_info>>2]|0;
     $71 = ($70|0)==(0);
     if ($71) {
      $$pre$phi$iZ2D = $row_info;
     } else {
      $dp7$020$i = $32;$i10$023$i = 0;$shift8$021$i = 4;$sp6$019$i = $32;$v9$022$i = 0;
      while(1) {
       $72 = HEAP8[$sp6$019$i>>0]|0;
       $73 = $72&255;
       $74 = $73 & 15;
       $75 = $74 << $shift8$021$i;
       $76 = $75 | $v9$022$i;
       $77 = ($shift8$021$i|0)==(0);
       if ($77) {
        $78 = $76&255;
        HEAP8[$dp7$020$i>>0] = $78;
        $79 = ((($dp7$020$i)) + 1|0);
        $dp7$1$i = $79;$shift8$1$i = 4;$v9$1$i = 0;
       } else {
        $80 = (($shift8$021$i) + -4)|0;
        $dp7$1$i = $dp7$020$i;$shift8$1$i = $80;$v9$1$i = $76;
       }
       $81 = ((($sp6$019$i)) + 1|0);
       $82 = (($i10$023$i) + 1)|0;
       $exitcond31$i = ($82|0)==($70|0);
       if ($exitcond31$i) {
        $dp7$1$i$lcssa = $dp7$1$i;$shift8$1$i$lcssa = $shift8$1$i;$v9$1$i$lcssa = $v9$1$i;
        break;
       } else {
        $dp7$020$i = $dp7$1$i;$i10$023$i = $82;$shift8$021$i = $shift8$1$i;$sp6$019$i = $81;$v9$022$i = $v9$1$i;
       }
      }
      $83 = ($shift8$1$i$lcssa|0)==(4);
      if ($83) {
       $$pre$phi$iZ2D = $row_info;
      } else {
       $84 = $v9$1$i$lcssa&255;
       HEAP8[$dp7$1$i$lcssa>>0] = $84;
       $$pre$phi$iZ2D = $row_info;
      }
     }
     break;
    }
    default: {
     $$pre$phi$iZ2D = $row_info;
    }
    }
    HEAP8[$36>>0] = $34;
    $85 = HEAP8[$39>>0]|0;
    $86 = $85&255;
    $87 = Math_imul($86, $35)|0;
    $88 = $87&255;
    $89 = ((($row_info)) + 11|0);
    HEAP8[$89>>0] = $88;
    $90 = $87 & 255;
    $91 = ($90>>>0)>(7);
    $92 = HEAP32[$$pre$phi$iZ2D>>2]|0;
    if ($91) {
     $93 = $90 >>> 3;
     $94 = Math_imul($93, $92)|0;
     $99 = $94;
    } else {
     $95 = Math_imul($90, $92)|0;
     $96 = (($95) + 7)|0;
     $97 = $96 >>> 3;
     $99 = $97;
    }
    $98 = ((($row_info)) + 4|0);
    HEAP32[$98>>2] = $99;
    $$pre30 = HEAP32[$1>>2]|0;
    $101 = $$pre30;
   } else {
    $101 = $28;
   }
  } else {
   $101 = $28;
  }
 }
 $100 = $101 & 16;
 $102 = ($100|0)==(0);
 if ($102) {
  $107 = $101;
 } else {
  $103 = ((($png_ptr)) + 384|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 1|0);
  _png_do_swap($row_info,$105);
  $$pre31 = HEAP32[$1>>2]|0;
  $107 = $$pre31;
 }
 $106 = $107 & 8;
 $108 = ($106|0)==(0);
 if ($108) {
  $221 = $107;
 } else {
  $109 = ((($png_ptr)) + 384|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 1|0);
  $112 = ((($row_info)) + 8|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = ($113<<24>>24)==(3);
  do {
   if (!($114)) {
    $115 = $113 & 2;
    $116 = ($115<<24>>24)==(0);
    $117 = ((($row_info)) + 9|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    if ($116) {
     $135 = ((($png_ptr)) + 524|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $$pn34$i = $137;$channels$0$i = 1;
    } else {
     $120 = ((($png_ptr)) + 521|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = ((($png_ptr)) + 522|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = $124&255;
     $126 = (($119) - ($125))|0;
     $127 = ((($shift_start$i)) + 4|0);
     HEAP32[$127>>2] = $126;
     $128 = ((($shift_dec$i)) + 4|0);
     HEAP32[$128>>2] = $125;
     $129 = ((($png_ptr)) + 523|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130&255;
     $132 = (($119) - ($131))|0;
     $133 = ((($shift_start$i)) + 8|0);
     HEAP32[$133>>2] = $132;
     $134 = ((($shift_dec$i)) + 8|0);
     HEAP32[$134>>2] = $131;
     $$pn34$i = $122;$channels$0$i = 3;
    }
    $$sink33$i = (($119) - ($$pn34$i))|0;
    HEAP32[$shift_start$i>>2] = $$sink33$i;
    HEAP32[$shift_dec$i>>2] = $$pn34$i;
    $138 = $113 & 4;
    $139 = ($138<<24>>24)==(0);
    if ($139) {
     $channels$1$i = $channels$0$i;
    } else {
     $140 = ((($png_ptr)) + 525|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $141&255;
     $143 = (($119) - ($142))|0;
     $144 = (($shift_start$i) + ($channels$0$i<<2)|0);
     HEAP32[$144>>2] = $143;
     $145 = (($shift_dec$i) + ($channels$0$i<<2)|0);
     HEAP32[$145>>2] = $142;
     $146 = (($channels$0$i) + 1)|0;
     $channels$1$i = $146;
    }
    $147 = ($118&255)<(8);
    if ($147) {
     $148 = ((($row_info)) + 4|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ((($png_ptr)) + 524|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = ($151<<24>>24)==(1);
     $153 = ($118<<24>>24)==(2);
     $or$cond$i = $153 & $152;
     if ($or$cond$i) {
      $mask$0$i = 85;
     } else {
      $154 = ($118<<24>>24)==(4);
      $155 = ($151<<24>>24)==(3);
      $or$cond3$i = $154 & $155;
      $$$i = $or$cond3$i ? 17 : 255;
      $mask$0$i = $$$i;
     }
     $156 = ($149|0)==(0);
     if ($156) {
      break;
     } else {
      $bp$010$i = $111;$i$09$i = 0;
     }
     while(1) {
      $157 = HEAP8[$bp$010$i>>0]|0;
      $158 = $157&255;
      $159 = HEAP32[$shift_start$i>>2]|0;
      $160 = HEAP32[$shift_dec$i>>2]|0;
      $161 = (0 - ($160))|0;
      $162 = ($159|0)>($161|0);
      if ($162) {
       $j$08$i = $159;$out$07$i = 0;
       while(1) {
        $163 = ($j$08$i|0)>(0);
        if ($163) {
         $164 = $158 << $j$08$i;
         $$pn2$i = $164;
        } else {
         $165 = (0 - ($j$08$i))|0;
         $166 = $158 >>> $165;
         $167 = $166 & $mask$0$i;
         $$pn2$i = $167;
        }
        $out$1$i = $$pn2$i | $out$07$i;
        $168 = (($j$08$i) - ($160))|0;
        $169 = ($168|0)>($161|0);
        if ($169) {
         $j$08$i = $168;$out$07$i = $out$1$i;
        } else {
         $out$0$lcssa$i = $out$1$i;
         break;
        }
       }
      } else {
       $out$0$lcssa$i = 0;
      }
      $170 = $out$0$lcssa$i&255;
      HEAP8[$bp$010$i>>0] = $170;
      $171 = (($i$09$i) + 1)|0;
      $172 = ((($bp$010$i)) + 1|0);
      $exitcond$i12 = ($171|0)==($149|0);
      if ($exitcond$i12) {
       break;
      } else {
       $bp$010$i = $172;$i$09$i = $171;
      }
     }
    } else {
     $173 = ($118<<24>>24)==(8);
     $174 = HEAP32[$row_info>>2]|0;
     $175 = Math_imul($174, $channels$1$i)|0;
     $176 = ($175|0)==(0);
     if ($173) {
      if ($176) {
       break;
      } else {
       $bp1$019$i = $111;$i2$020$i = 0;
      }
      while(1) {
       $177 = (($i2$020$i>>>0) % ($channels$1$i>>>0))&-1;
       $178 = HEAP8[$bp1$019$i>>0]|0;
       $179 = $178&255;
       $180 = (($shift_start$i) + ($177<<2)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = (($shift_dec$i) + ($177<<2)|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (0 - ($183))|0;
       $185 = ($181|0)>($184|0);
       if ($185) {
        $j3$013$i = $181;$out5$014$i = 0;
        while(1) {
         $186 = ($j3$013$i|0)>(0);
         $187 = $179 << $j3$013$i;
         $188 = (0 - ($j3$013$i))|0;
         $189 = $179 >>> $188;
         $$pn1$i = $186 ? $187 : $189;
         $out5$1$i = $$pn1$i | $out5$014$i;
         $190 = (($j3$013$i) - ($183))|0;
         $191 = ($190|0)>($184|0);
         if ($191) {
          $j3$013$i = $190;$out5$014$i = $out5$1$i;
         } else {
          $out5$0$lcssa$i = $out5$1$i;
          break;
         }
        }
       } else {
        $out5$0$lcssa$i = 0;
       }
       $192 = $out5$0$lcssa$i&255;
       HEAP8[$bp1$019$i>>0] = $192;
       $193 = (($i2$020$i) + 1)|0;
       $194 = ((($bp1$019$i)) + 1|0);
       $exitcond31$i17 = ($193|0)==($175|0);
       if ($exitcond31$i17) {
        break;
       } else {
        $bp1$019$i = $194;$i2$020$i = $193;
       }
      }
     } else {
      if ($176) {
       break;
      } else {
       $bp6$028$i = $111;$i7$029$i = 0;
      }
      while(1) {
       $195 = (($i7$029$i>>>0) % ($channels$1$i>>>0))&-1;
       $196 = HEAP8[$bp6$028$i>>0]|0;
       $197 = $196&255;
       $198 = $197 << 8;
       $199 = ((($bp6$028$i)) + 1|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = $200&255;
       $202 = $198 | $201;
       $203 = (($shift_start$i) + ($195<<2)|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = (($shift_dec$i) + ($195<<2)|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (0 - ($206))|0;
       $208 = ($204|0)>($207|0);
       if ($208) {
        $j10$022$i = $204;$value$023$i = 0;
        while(1) {
         $209 = ($j10$022$i|0)>(0);
         $210 = $202 << $j10$022$i;
         $211 = (0 - ($j10$022$i))|0;
         $212 = $202 >>> $211;
         $$pn$i = $209 ? $210 : $212;
         $value$1$i = $$pn$i | $value$023$i;
         $213 = (($j10$022$i) - ($206))|0;
         $214 = ($213|0)>($207|0);
         if ($214) {
          $j10$022$i = $213;$value$023$i = $value$1$i;
         } else {
          $value$0$lcssa$i = $value$1$i;
          break;
         }
        }
       } else {
        $value$0$lcssa$i = 0;
       }
       $215 = $value$0$lcssa$i >>> 8;
       $216 = $215&255;
       HEAP8[$bp6$028$i>>0] = $216;
       $217 = $value$0$lcssa$i&255;
       $218 = ((($bp6$028$i)) + 2|0);
       HEAP8[$199>>0] = $217;
       $219 = (($i7$029$i) + 1)|0;
       $exitcond32$i = ($219|0)==($175|0);
       if ($exitcond32$i) {
        break;
       } else {
        $bp6$028$i = $218;$i7$029$i = $219;
       }
      }
     }
    }
   }
  } while(0);
  $$pre32 = HEAP32[$1>>2]|0;
  $221 = $$pre32;
 }
 $220 = $221 & 131072;
 $222 = ($220|0)==(0);
 L100: do {
  if (!($222)) {
   $223 = ((($png_ptr)) + 384|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($224)) + 1|0);
   $226 = ((($row_info)) + 8|0);
   $227 = HEAP8[$226>>0]|0;
   switch ($227<<24>>24) {
   case 6:  {
    $228 = ((($row_info)) + 9|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = ($229<<24>>24)==(8);
    $231 = HEAP32[$row_info>>2]|0;
    $232 = ($231|0)==(0);
    if ($230) {
     if ($232) {
      break L100;
     } else {
      $i$07$i5 = 0;$sp$09$i = $225;
     }
     while(1) {
      $233 = ((($sp$09$i)) + 1|0);
      $234 = HEAP8[$sp$09$i>>0]|0;
      $235 = ((($sp$09$i)) + 2|0);
      $236 = HEAP8[$233>>0]|0;
      HEAP8[$sp$09$i>>0] = $236;
      $237 = ((($sp$09$i)) + 3|0);
      $238 = HEAP8[$235>>0]|0;
      HEAP8[$233>>0] = $238;
      $239 = ((($sp$09$i)) + 4|0);
      $240 = HEAP8[$237>>0]|0;
      HEAP8[$235>>0] = $240;
      HEAP8[$237>>0] = $234;
      $241 = (($i$07$i5) + 1)|0;
      $exitcond$i6 = ($241|0)==($231|0);
      if ($exitcond$i6) {
       break;
      } else {
       $i$07$i5 = $241;$sp$09$i = $239;
      }
     }
    } else {
     if ($232) {
      break L100;
     } else {
      $i3$010$i8 = 0;$sp1$012$i = $225;
     }
     while(1) {
      $242 = ((($sp1$012$i)) + 1|0);
      $243 = HEAP8[$sp1$012$i>>0]|0;
      $244 = ((($sp1$012$i)) + 2|0);
      $245 = HEAP8[$242>>0]|0;
      $246 = ((($sp1$012$i)) + 3|0);
      $247 = HEAP8[$244>>0]|0;
      HEAP8[$sp1$012$i>>0] = $247;
      $248 = ((($sp1$012$i)) + 4|0);
      $249 = HEAP8[$246>>0]|0;
      HEAP8[$242>>0] = $249;
      $250 = ((($sp1$012$i)) + 5|0);
      $251 = HEAP8[$248>>0]|0;
      HEAP8[$244>>0] = $251;
      $252 = ((($sp1$012$i)) + 6|0);
      $253 = HEAP8[$250>>0]|0;
      HEAP8[$246>>0] = $253;
      $254 = ((($sp1$012$i)) + 7|0);
      $255 = HEAP8[$252>>0]|0;
      HEAP8[$248>>0] = $255;
      $256 = ((($sp1$012$i)) + 8|0);
      $257 = HEAP8[$254>>0]|0;
      HEAP8[$250>>0] = $257;
      HEAP8[$252>>0] = $243;
      HEAP8[$254>>0] = $245;
      $258 = (($i3$010$i8) + 1)|0;
      $exitcond22$i = ($258|0)==($231|0);
      if ($exitcond22$i) {
       break;
      } else {
       $i3$010$i8 = $258;$sp1$012$i = $256;
      }
     }
    }
    break;
   }
   case 4:  {
    $259 = ((($row_info)) + 9|0);
    $260 = HEAP8[$259>>0]|0;
    $261 = ($260<<24>>24)==(8);
    $262 = HEAP32[$row_info>>2]|0;
    $263 = ($262|0)==(0);
    if ($261) {
     if ($263) {
      break L100;
     } else {
      $dp7$015$i = $225;$i8$016$i = 0;
     }
     while(1) {
      $264 = ((($dp7$015$i)) + 1|0);
      $265 = HEAP8[$dp7$015$i>>0]|0;
      $266 = ((($dp7$015$i)) + 2|0);
      $267 = HEAP8[$264>>0]|0;
      HEAP8[$dp7$015$i>>0] = $267;
      HEAP8[$264>>0] = $265;
      $268 = (($i8$016$i) + 1)|0;
      $exitcond23$i = ($268|0)==($262|0);
      if ($exitcond23$i) {
       break;
      } else {
       $dp7$015$i = $266;$i8$016$i = $268;
      }
     }
    } else {
     if ($263) {
      break L100;
     } else {
      $dp12$019$i = $225;$i13$020$i = 0;
     }
     while(1) {
      $269 = ((($dp12$019$i)) + 1|0);
      $270 = HEAP8[$dp12$019$i>>0]|0;
      $271 = ((($dp12$019$i)) + 2|0);
      $272 = HEAP8[$269>>0]|0;
      $273 = ((($dp12$019$i)) + 3|0);
      $274 = HEAP8[$271>>0]|0;
      HEAP8[$dp12$019$i>>0] = $274;
      $275 = ((($dp12$019$i)) + 4|0);
      $276 = HEAP8[$273>>0]|0;
      HEAP8[$269>>0] = $276;
      HEAP8[$271>>0] = $270;
      HEAP8[$273>>0] = $272;
      $277 = (($i13$020$i) + 1)|0;
      $exitcond24$i = ($277|0)==($262|0);
      if ($exitcond24$i) {
       break;
      } else {
       $dp12$019$i = $275;$i13$020$i = $277;
      }
     }
    }
    break;
   }
   default: {
    break L100;
   }
   }
  }
 } while(0);
 $278 = HEAP32[$1>>2]|0;
 $279 = $278 & 524288;
 $280 = ($279|0)==(0);
 L120: do {
  if (!($280)) {
   $281 = ((($png_ptr)) + 384|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ((($282)) + 1|0);
   $284 = ((($row_info)) + 8|0);
   $285 = HEAP8[$284>>0]|0;
   switch ($285<<24>>24) {
   case 6:  {
    $286 = ((($row_info)) + 9|0);
    $287 = HEAP8[$286>>0]|0;
    $288 = ($287<<24>>24)==(8);
    $289 = HEAP32[$row_info>>2]|0;
    $290 = ($289|0)==(0);
    if ($288) {
     if ($290) {
      break L120;
     } else {
      $i$07$i = 0;$sp$08$i = $283;
     }
     while(1) {
      $291 = ((($sp$08$i)) + 3|0);
      $292 = ((($sp$08$i)) + 4|0);
      $293 = HEAP8[$291>>0]|0;
      $294 = $293&255;
      $295 = $294 ^ 255;
      $296 = $295&255;
      HEAP8[$291>>0] = $296;
      $297 = (($i$07$i) + 1)|0;
      $exitcond$i1 = ($297|0)==($289|0);
      if ($exitcond$i1) {
       break;
      } else {
       $i$07$i = $297;$sp$08$i = $292;
      }
     }
    } else {
     if ($290) {
      break L120;
     } else {
      $i3$010$i = 0;$sp1$09$i = $283;
     }
     while(1) {
      $298 = ((($sp1$09$i)) + 6|0);
      $299 = ((($sp1$09$i)) + 7|0);
      $300 = HEAP8[$298>>0]|0;
      $301 = $300&255;
      $302 = $301 ^ 255;
      $303 = $302&255;
      HEAP8[$298>>0] = $303;
      $304 = ((($sp1$09$i)) + 8|0);
      $305 = HEAP8[$299>>0]|0;
      $306 = $305&255;
      $307 = $306 ^ 255;
      $308 = $307&255;
      HEAP8[$299>>0] = $308;
      $309 = (($i3$010$i) + 1)|0;
      $exitcond19$i = ($309|0)==($289|0);
      if ($exitcond19$i) {
       break;
      } else {
       $i3$010$i = $309;$sp1$09$i = $304;
      }
     }
    }
    break;
   }
   case 4:  {
    $310 = ((($row_info)) + 9|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = ($311<<24>>24)==(8);
    $313 = HEAP32[$row_info>>2]|0;
    $314 = ($313|0)==(0);
    if ($312) {
     if ($314) {
      break L120;
     } else {
      $dp6$013$i = $283;$i7$014$i = 0;
     }
     while(1) {
      $315 = ((($dp6$013$i)) + 1|0);
      $316 = ((($dp6$013$i)) + 2|0);
      $317 = HEAP8[$315>>0]|0;
      $318 = $317&255;
      $319 = $318 ^ 255;
      $320 = $319&255;
      HEAP8[$315>>0] = $320;
      $321 = (($i7$014$i) + 1)|0;
      $exitcond20$i = ($321|0)==($313|0);
      if ($exitcond20$i) {
       break;
      } else {
       $dp6$013$i = $316;$i7$014$i = $321;
      }
     }
    } else {
     if ($314) {
      break L120;
     } else {
      $i11$017$i = 0;$sp9$016$i = $283;
     }
     while(1) {
      $322 = ((($sp9$016$i)) + 2|0);
      $323 = ((($sp9$016$i)) + 3|0);
      $324 = HEAP8[$322>>0]|0;
      $325 = $324&255;
      $326 = $325 ^ 255;
      $327 = $326&255;
      HEAP8[$322>>0] = $327;
      $328 = ((($sp9$016$i)) + 4|0);
      $329 = HEAP8[$323>>0]|0;
      $330 = $329&255;
      $331 = $330 ^ 255;
      $332 = $331&255;
      HEAP8[$323>>0] = $332;
      $333 = (($i11$017$i) + 1)|0;
      $exitcond21$i = ($333|0)==($313|0);
      if ($exitcond21$i) {
       break;
      } else {
       $i11$017$i = $333;$sp9$016$i = $328;
      }
     }
    }
    break;
   }
   default: {
    break L120;
   }
   }
  }
 } while(0);
 $334 = HEAP32[$1>>2]|0;
 $335 = $334 & 1;
 $336 = ($335|0)==(0);
 if ($336) {
  $341 = $334;
 } else {
  $337 = ((($png_ptr)) + 384|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = ((($338)) + 1|0);
  _png_do_bgr($row_info,$339);
  $$pre33 = HEAP32[$1>>2]|0;
  $341 = $$pre33;
 }
 $340 = $341 & 32;
 $342 = ($340|0)==(0);
 if ($342) {
  STACKTOP = sp;return;
 }
 $343 = ((($png_ptr)) + 384|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = ((($344)) + 1|0);
 _png_do_invert($row_info,$345);
 STACKTOP = sp;return;
}
function _png_write_sig($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_signature = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $png_signature = sp;
 $0 = $png_signature;
 $1 = $0;
 HEAP32[$1>>2] = 1196314761;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 169478669;
 $4 = ((($png_ptr)) + 800|0);
 HEAP32[$4>>2] = 18;
 $5 = ((($png_ptr)) + 441|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($png_signature) + ($7)|0);
 $9 = (8 - ($7))|0;
 _png_write_data($png_ptr,$8,$9);
 $10 = HEAP8[$5>>0]|0;
 $11 = ($10&255)<(3);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($png_ptr)) + 208|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | 4096;
 HEAP32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function _png_write_chunk($png_ptr,$chunk_string,$data,$length) {
 $png_ptr = $png_ptr|0;
 $chunk_string = $chunk_string|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $buf$i1 = 0, $or$cond3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 8|0;
 $buf$i = sp;
 $0 = HEAP8[$chunk_string>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($chunk_string)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($chunk_string)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($chunk_string)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = ($png_ptr|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = ($length|0)<(0);
 if ($18) {
  _png_error($png_ptr,15675);
  // unreachable;
 }
 $19 = ((($png_ptr)) + 800|0);
 HEAP32[$19>>2] = 34;
 $20 = $length >>> 24;
 $21 = $20&255;
 HEAP8[$buf$i>>0] = $21;
 $22 = $length >>> 16;
 $23 = $22&255;
 $24 = ((($buf$i)) + 1|0);
 HEAP8[$24>>0] = $23;
 $25 = $length >>> 8;
 $26 = $25&255;
 $27 = ((($buf$i)) + 2|0);
 HEAP8[$27>>0] = $26;
 $28 = $length&255;
 $29 = ((($buf$i)) + 3|0);
 HEAP8[$29>>0] = $28;
 $30 = ((($buf$i)) + 4|0);
 HEAP8[$30>>0] = $0;
 $31 = ((($buf$i)) + 5|0);
 HEAP8[$31>>0] = $4;
 $32 = ((($buf$i)) + 6|0);
 HEAP8[$32>>0] = $9;
 $33 = ((($buf$i)) + 7|0);
 HEAP8[$33>>0] = $14;
 _png_write_data($png_ptr,$buf$i,8);
 $34 = ((($png_ptr)) + 376|0);
 HEAP32[$34>>2] = $16;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$30,4);
 HEAP32[$19>>2] = 66;
 $35 = ($data|0)!=(0|0);
 $36 = ($length|0)!=(0);
 $or$cond3$i$i = $35 & $36;
 if ($or$cond3$i$i) {
  _png_write_data($png_ptr,$data,$length);
  _png_calculate_crc($png_ptr,$data,$length);
 }
 HEAP32[$19>>2] = 130;
 $37 = ((($png_ptr)) + 412|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 >>> 24;
 $40 = $39&255;
 HEAP8[$buf$i1>>0] = $40;
 $41 = $38 >>> 16;
 $42 = $41&255;
 $43 = ((($buf$i1)) + 1|0);
 HEAP8[$43>>0] = $42;
 $44 = $38 >>> 8;
 $45 = $44&255;
 $46 = ((($buf$i1)) + 2|0);
 HEAP8[$46>>0] = $45;
 $47 = $38&255;
 $48 = ((($buf$i1)) + 3|0);
 HEAP8[$48>>0] = $47;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_free_buffer_list($png_ptr,$listp) {
 $png_ptr = $png_ptr|0;
 $listp = $listp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $list$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$listp>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 HEAP32[$listp>>2] = 0;
 $list$0 = $0;
 while(1) {
  $2 = HEAP32[$list$0>>2]|0;
  _png_free($png_ptr,$list$0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   break;
  } else {
   $list$0 = $2;
  }
 }
 return;
}
function _png_write_IHDR($png_ptr,$width,$height,$bit_depth,$color_type,$compression_type,$filter_type,$interlace_type) {
 $png_ptr = $png_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 $interlace_type = $interlace_type|0;
 var $$0 = 0, $$015 = 0, $$old10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf$i = 0, $buf$i17 = 0, $interlace_type$cmp = 0, $notlhs = 0, $notrhs = 0, $or$cond11 = 0, $or$cond9$not = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i17 = sp + 24|0;
 $buf$i = sp + 16|0;
 $buf = sp;
 L1: do {
  switch ($color_type|0) {
  case 0:  {
   switch ($bit_depth|0) {
   case 16: case 8: case 4: case 2: case 1:  {
    $0 = ((($png_ptr)) + 439|0);
    HEAP8[$0>>0] = 1;
    break L1;
    break;
   }
   default: {
    _png_error($png_ptr,15702);
    // unreachable;
   }
   }
   break;
  }
  case 2:  {
   switch ($bit_depth|0) {
   case 8: case 16:  {
    $1 = ((($png_ptr)) + 439|0);
    HEAP8[$1>>0] = 3;
    break L1;
    break;
   }
   default: {
    _png_error($png_ptr,15740);
    // unreachable;
   }
   }
   break;
  }
  case 3:  {
   switch ($bit_depth|0) {
   case 8: case 4: case 2: case 1:  {
    $2 = ((($png_ptr)) + 439|0);
    HEAP8[$2>>0] = 1;
    break L1;
    break;
   }
   default: {
    _png_error($png_ptr,15772);
    // unreachable;
   }
   }
   break;
  }
  case 4:  {
   switch ($bit_depth|0) {
   case 8: case 16:  {
    $3 = ((($png_ptr)) + 439|0);
    HEAP8[$3>>0] = 2;
    break L1;
    break;
   }
   default: {
    _png_error($png_ptr,15809);
    // unreachable;
   }
   }
   break;
  }
  case 6:  {
   switch ($bit_depth|0) {
   case 8: case 16:  {
    $4 = ((($png_ptr)) + 439|0);
    HEAP8[$4>>0] = 4;
    break L1;
    break;
   }
   default: {
    _png_error($png_ptr,15853);
    // unreachable;
   }
   }
   break;
  }
  default: {
   _png_error($png_ptr,15886);
   // unreachable;
  }
  }
 } while(0);
 $5 = ($compression_type|0)==(0);
 if (!($5)) {
  _png_warning($png_ptr,15921);
 }
 $6 = ((($png_ptr)) + 708|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  label = 23;
 } else {
  $10 = ((($png_ptr)) + 208|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 4096;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $color_type & -5;
   $notlhs = ($14|0)!=(2);
   $notrhs = ($filter_type|0)!=(64);
   $or$cond9$not = $notlhs | $notrhs;
   $15 = ($filter_type|0)!=(0);
   $or$cond11 = $15 & $or$cond9$not;
   if ($or$cond11) {
    label = 24;
   } else {
    $$015 = $filter_type;
   }
  } else {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $$old10 = ($filter_type|0)==(0);
  if ($$old10) {
   $$015 = 0;
  } else {
   label = 24;
  }
 }
 if ((label|0) == 24) {
  _png_warning($png_ptr,15956);
  $$015 = 0;
 }
 $interlace_type$cmp = ($interlace_type>>>0)>(1);
 if ($interlace_type$cmp) {
  _png_warning($png_ptr,15986);
  $$0 = 1;
 } else {
  $$0 = $interlace_type;
 }
 $16 = $bit_depth&255;
 $17 = ((($png_ptr)) + 436|0);
 HEAP8[$17>>0] = $16;
 $18 = $color_type&255;
 $19 = ((($png_ptr)) + 435|0);
 HEAP8[$19>>0] = $18;
 $20 = $$0&255;
 $21 = ((($png_ptr)) + 432|0);
 HEAP8[$21>>0] = $20;
 $22 = $$015&255;
 $23 = ((($png_ptr)) + 712|0);
 HEAP8[$23>>0] = $22;
 $24 = ((($png_ptr)) + 744|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($png_ptr)) + 348|0);
 HEAP32[$25>>2] = $width;
 $26 = ((($png_ptr)) + 352|0);
 HEAP32[$26>>2] = $height;
 $27 = ((($png_ptr)) + 439|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = Math_imul($29, $bit_depth)|0;
 $31 = $30&255;
 $32 = ((($png_ptr)) + 438|0);
 HEAP8[$32>>0] = $31;
 $33 = $30 & 255;
 $34 = ($33>>>0)>(7);
 if ($34) {
  $35 = $33 >>> 3;
  $36 = Math_imul($35, $width)|0;
  $41 = $36;
 } else {
  $37 = Math_imul($33, $width)|0;
  $38 = (($37) + 7)|0;
  $39 = $38 >>> 3;
  $41 = $39;
 }
 $40 = ((($png_ptr)) + 364|0);
 HEAP32[$40>>2] = $41;
 $42 = ((($png_ptr)) + 360|0);
 HEAP32[$42>>2] = $width;
 $43 = ((($png_ptr)) + 437|0);
 HEAP8[$43>>0] = $16;
 $44 = ((($png_ptr)) + 440|0);
 HEAP8[$44>>0] = $28;
 $45 = $width >>> 24;
 $46 = $45&255;
 HEAP8[$buf>>0] = $46;
 $47 = $width >>> 16;
 $48 = $47&255;
 $49 = ((($buf)) + 1|0);
 HEAP8[$49>>0] = $48;
 $50 = $width >>> 8;
 $51 = $50&255;
 $52 = ((($buf)) + 2|0);
 HEAP8[$52>>0] = $51;
 $53 = $width&255;
 $54 = ((($buf)) + 3|0);
 HEAP8[$54>>0] = $53;
 $55 = ((($buf)) + 4|0);
 $56 = $height >>> 24;
 $57 = $56&255;
 HEAP8[$55>>0] = $57;
 $58 = $height >>> 16;
 $59 = $58&255;
 $60 = ((($buf)) + 5|0);
 HEAP8[$60>>0] = $59;
 $61 = $height >>> 8;
 $62 = $61&255;
 $63 = ((($buf)) + 6|0);
 HEAP8[$63>>0] = $62;
 $64 = $height&255;
 $65 = ((($buf)) + 7|0);
 HEAP8[$65>>0] = $64;
 $66 = ((($buf)) + 8|0);
 HEAP8[$66>>0] = $16;
 $67 = ((($buf)) + 9|0);
 HEAP8[$67>>0] = $18;
 $68 = ((($buf)) + 10|0);
 HEAP8[$68>>0] = 0;
 $69 = ((($buf)) + 11|0);
 HEAP8[$69>>0] = $22;
 $70 = ((($buf)) + 12|0);
 HEAP8[$70>>0] = $20;
 $71 = ((($png_ptr)) + 800|0);
 HEAP32[$71>>2] = 34;
 HEAP8[$buf$i17>>0] = 0;
 $72 = ((($buf$i17)) + 1|0);
 HEAP8[$72>>0] = 0;
 $73 = ((($buf$i17)) + 2|0);
 HEAP8[$73>>0] = 0;
 $74 = ((($buf$i17)) + 3|0);
 HEAP8[$74>>0] = 13;
 $75 = ((($buf$i17)) + 4|0);
 HEAP8[$75>>0] = 73;
 $76 = ((($buf$i17)) + 5|0);
 HEAP8[$76>>0] = 72;
 $77 = ((($buf$i17)) + 6|0);
 HEAP8[$77>>0] = 68;
 $78 = ((($buf$i17)) + 7|0);
 HEAP8[$78>>0] = 82;
 _png_write_data($png_ptr,$buf$i17,8);
 $79 = ((($png_ptr)) + 376|0);
 HEAP32[$79>>2] = 1229472850;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$75,4);
 HEAP32[$71>>2] = 66;
 _png_write_data($png_ptr,$buf,13);
 _png_calculate_crc($png_ptr,$buf,13);
 HEAP32[$71>>2] = 130;
 $80 = ((($png_ptr)) + 412|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 >>> 24;
 $83 = $82&255;
 HEAP8[$buf$i>>0] = $83;
 $84 = $81 >>> 16;
 $85 = $84&255;
 $86 = ((($buf$i)) + 1|0);
 HEAP8[$86>>0] = $85;
 $87 = $81 >>> 8;
 $88 = $87&255;
 $89 = ((($buf$i)) + 2|0);
 HEAP8[$89>>0] = $88;
 $90 = $81&255;
 $91 = ((($buf$i)) + 3|0);
 HEAP8[$91>>0] = $90;
 _png_write_data($png_ptr,$buf$i,4);
 $92 = ((($png_ptr)) + 434|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = ($93<<24>>24)==(0);
 if (!($94)) {
  $99 = ((($png_ptr)) + 208|0);
  HEAP32[$99>>2] = 1;
  STACKTOP = sp;return;
 }
 $95 = HEAP8[$19>>0]|0;
 $96 = ($95<<24>>24)==(3);
 if (!($96)) {
  $97 = HEAP8[$17>>0]|0;
  $98 = ($97&255)<(8);
  if (!($98)) {
   HEAP8[$92>>0] = -8;
   $99 = ((($png_ptr)) + 208|0);
   HEAP32[$99>>2] = 1;
   STACKTOP = sp;return;
  }
 }
 HEAP8[$92>>0] = 8;
 $99 = ((($png_ptr)) + 208|0);
 HEAP32[$99>>2] = 1;
 STACKTOP = sp;return;
}
function _png_write_PLTE($png_ptr,$palette,$num_pal) {
 $png_ptr = $png_ptr|0;
 $palette = $palette|0;
 $num_pal = $num_pal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i4 = 0, $exitcond = 0, $i$05 = 0;
 var $or$cond3 = 0, $pal_ptr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i4 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = ((($png_ptr)) + 708|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = $2 | $num_pal;
 $4 = ($3|0)==(0);
 $5 = ($num_pal>>>0)>(256);
 $or$cond3 = $5 | $4;
 $6 = ((($png_ptr)) + 435|0);
 $7 = HEAP8[$6>>0]|0;
 if ($or$cond3) {
  $8 = ($7<<24>>24)==(3);
  if ($8) {
   _png_error($png_ptr,16019);
   // unreachable;
  }
  _png_warning($png_ptr,16019);
  STACKTOP = sp;return;
 }
 $9 = $7 & 2;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  _png_warning($png_ptr,16055);
  STACKTOP = sp;return;
 }
 $11 = $num_pal&65535;
 $12 = ((($png_ptr)) + 420|0);
 HEAP16[$12>>1] = $11;
 $13 = ($num_pal*3)|0;
 $14 = ((($png_ptr)) + 800|0);
 HEAP32[$14>>2] = 34;
 $15 = $13 >>> 24;
 $16 = $15&255;
 HEAP8[$buf$i>>0] = $16;
 $17 = $13 >>> 16;
 $18 = $17&255;
 $19 = ((($buf$i)) + 1|0);
 HEAP8[$19>>0] = $18;
 $20 = $13 >>> 8;
 $21 = $20&255;
 $22 = ((($buf$i)) + 2|0);
 HEAP8[$22>>0] = $21;
 $23 = $13&255;
 $24 = ((($buf$i)) + 3|0);
 HEAP8[$24>>0] = $23;
 $25 = ((($buf$i)) + 4|0);
 HEAP8[$25>>0] = 80;
 $26 = ((($buf$i)) + 5|0);
 HEAP8[$26>>0] = 76;
 $27 = ((($buf$i)) + 6|0);
 HEAP8[$27>>0] = 84;
 $28 = ((($buf$i)) + 7|0);
 HEAP8[$28>>0] = 69;
 _png_write_data($png_ptr,$buf$i,8);
 $29 = ((($png_ptr)) + 376|0);
 HEAP32[$29>>2] = 1347179589;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$25,4);
 HEAP32[$14>>2] = 66;
 $30 = ($num_pal|0)==(0);
 if (!($30)) {
  $31 = ((($buf)) + 1|0);
  $32 = ((($buf)) + 2|0);
  $i$05 = 0;$pal_ptr$06 = $palette;
  while(1) {
   $33 = HEAP8[$pal_ptr$06>>0]|0;
   HEAP8[$buf>>0] = $33;
   $34 = ((($pal_ptr$06)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   HEAP8[$31>>0] = $35;
   $36 = ((($pal_ptr$06)) + 2|0);
   $37 = HEAP8[$36>>0]|0;
   HEAP8[$32>>0] = $37;
   _png_write_data($png_ptr,$buf,3);
   _png_calculate_crc($png_ptr,$buf,3);
   $38 = (($i$05) + 1)|0;
   $39 = ((($pal_ptr$06)) + 3|0);
   $exitcond = ($38|0)==($num_pal|0);
   if ($exitcond) {
    break;
   } else {
    $i$05 = $38;$pal_ptr$06 = $39;
   }
  }
 }
 HEAP32[$14>>2] = 130;
 $40 = ((($png_ptr)) + 412|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 >>> 24;
 $43 = $42&255;
 HEAP8[$buf$i4>>0] = $43;
 $44 = $41 >>> 16;
 $45 = $44&255;
 $46 = ((($buf$i4)) + 1|0);
 HEAP8[$46>>0] = $45;
 $47 = $41 >>> 8;
 $48 = $47&255;
 $49 = ((($buf$i4)) + 2|0);
 HEAP8[$49>>0] = $48;
 $50 = $41&255;
 $51 = ((($buf$i4)) + 3|0);
 HEAP8[$51>>0] = $50;
 _png_write_data($png_ptr,$buf$i4,4);
 $52 = ((($png_ptr)) + 208|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 | 2;
 HEAP32[$52>>2] = $54;
 STACKTOP = sp;return;
}
function _png_compress_IDAT($png_ptr,$input,$input_len,$flush) {
 $png_ptr = $png_ptr|0;
 $input = $input|0;
 $input_len = $input_len|0;
 $flush = $flush|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa53 = 0, $$lcssa55 = 0, $$lcssa57 = 0, $$pre = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre$phiZ2D = 0, $$pre29 = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $buf$i13 = 0, $buf$i14 = 0, $buf$i16 = 0, $half_z_window_size$0$i = 0, $half_z_window_size$0$i8 = 0, $list$0$i = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i6 = 0, $or$cond2$i = 0, $or$cond2$i9 = 0, $or$cond3 = 0, $z_cinfo$0$i = 0, $z_cinfo$0$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i16 = sp + 24|0;
 $buf$i14 = sp + 16|0;
 $buf$i13 = sp + 8|0;
 $buf$i = sp;
 $0 = ((($png_ptr)) + 220|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1229209940);
 do {
  if ($2) {
   $$pre = ((($png_ptr)) + 240|0);
   $$pre29 = ((($png_ptr)) + 280|0);
   $$pre31 = ((($png_ptr)) + 284|0);
   $$pre33 = ((($png_ptr)) + 236|0);
   $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $$pre33;$$pre$phiZ2D = $$pre;
  } else {
   $3 = ((($png_ptr)) + 280|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $6 = ((($png_ptr)) + 284|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + 4)|0;
    $9 = (_png_malloc($png_ptr,$8)|0);
    HEAP32[$3>>2] = $9;
    HEAP32[$9>>2] = 0;
   } else {
    $10 = HEAP32[$4>>2]|0;
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     HEAP32[$4>>2] = 0;
     $list$0$i = $10;
     while(1) {
      $12 = HEAP32[$list$0$i>>2]|0;
      _png_free($png_ptr,$list$0$i);
      $13 = ($12|0)==(0|0);
      if ($13) {
       break;
      } else {
       $list$0$i = $12;
      }
     }
    }
   }
   $14 = (_png_image_size($png_ptr)|0);
   $15 = (_png_deflate_claim($png_ptr,1229209940,$14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $19 = HEAP32[$3>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = ((($png_ptr)) + 236|0);
    HEAP32[$21>>2] = $20;
    $22 = ((($png_ptr)) + 284|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($png_ptr)) + 240|0);
    HEAP32[$24>>2] = $23;
    $$pre$phi30Z2D = $3;$$pre$phi32Z2D = $22;$$pre$phi34Z2D = $21;$$pre$phiZ2D = $24;
    break;
   } else {
    $17 = ((($png_ptr)) + 248|0);
    $18 = HEAP32[$17>>2]|0;
    _png_error($png_ptr,$18);
    // unreachable;
   }
  }
 } while(0);
 $25 = ((($png_ptr)) + 224|0);
 HEAP32[$25>>2] = $input;
 $26 = ((($png_ptr)) + 228|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($png_ptr)) + 208|0);
 $28 = ((($png_ptr)) + 744|0);
 $29 = ((($png_ptr)) + 800|0);
 $30 = ((($buf$i16)) + 1|0);
 $31 = ((($buf$i16)) + 2|0);
 $32 = ((($buf$i16)) + 3|0);
 $33 = ((($buf$i16)) + 4|0);
 $34 = ((($buf$i16)) + 5|0);
 $35 = ((($buf$i16)) + 6|0);
 $36 = ((($buf$i16)) + 7|0);
 $37 = ((($png_ptr)) + 376|0);
 $38 = ((($png_ptr)) + 412|0);
 $39 = ((($buf$i)) + 1|0);
 $40 = ((($buf$i)) + 2|0);
 $41 = ((($buf$i)) + 3|0);
 $42 = ($flush|0)!=(0);
 $$0 = $input_len;
 while(1) {
  HEAP32[$26>>2] = $$0;
  $43 = (_deflate($25,$flush)|0);
  $44 = HEAP32[$26>>2]|0;
  HEAP32[$26>>2] = 0;
  $45 = HEAP32[$$pre$phiZ2D>>2]|0;
  $46 = ($45|0)==(0);
  if ($46) {
   $47 = HEAP32[$$pre$phi30Z2D>>2]|0;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$$pre$phi32Z2D>>2]|0;
   $50 = HEAP32[$27>>2]|0;
   $51 = $50 & 4;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = HEAP8[$28>>0]|0;
    $54 = ($53<<24>>24)==(0);
    if ($54) {
     $55 = (_png_image_size($png_ptr)|0);
     $56 = ($55>>>0)<(16385);
     if ($56) {
      $57 = HEAP8[$48>>0]|0;
      $58 = $57&255;
      $59 = $58 & 15;
      $60 = ($59|0)==(8);
      $61 = $58 & 240;
      $62 = ($61>>>0)<(113);
      $or$cond$i = $60 & $62;
      if ($or$cond$i) {
       $63 = $58 >>> 4;
       $64 = (($63) + 7)|0;
       $65 = 1 << $64;
       $66 = ($65>>>0)<($55>>>0);
       if (!($66)) {
        $half_z_window_size$0$i = $65;$z_cinfo$0$i = $63;
        while(1) {
         $67 = $half_z_window_size$0$i >>> 1;
         $68 = (($z_cinfo$0$i) + -1)|0;
         $69 = ($68|0)==(0);
         $70 = ($67>>>0)<($55>>>0);
         $or$cond2$i = $69 | $70;
         if ($or$cond2$i) {
          $$lcssa53 = $68;
          break;
         } else {
          $half_z_window_size$0$i = $67;$z_cinfo$0$i = $68;
         }
        }
        $71 = $$lcssa53 << 4;
        $72 = $71 | 8;
        $73 = $72&255;
        HEAP8[$48>>0] = $73;
        $74 = ((($47)) + 5|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75&255;
        $77 = $76 & 224;
        $78 = $72 << 8;
        $79 = $77 | $78;
        $80 = (($79>>>0) % 31)&-1;
        $81 = $77 | $80;
        $82 = $81 ^ 31;
        $83 = $82&255;
        HEAP8[$74>>0] = $83;
       }
      }
     }
    }
   }
   $84 = ($49|0)<(0);
   if ($84) {
    label = 21;
    break;
   }
   HEAP32[$29>>2] = 34;
   $85 = $49 >>> 24;
   $86 = $85&255;
   HEAP8[$buf$i16>>0] = $86;
   $87 = $49 >>> 16;
   $88 = $87&255;
   HEAP8[$30>>0] = $88;
   $89 = $49 >>> 8;
   $90 = $89&255;
   HEAP8[$31>>0] = $90;
   $91 = $49&255;
   HEAP8[$32>>0] = $91;
   HEAP8[$33>>0] = 73;
   HEAP8[$34>>0] = 68;
   HEAP8[$35>>0] = 65;
   HEAP8[$36>>0] = 84;
   _png_write_data($png_ptr,$buf$i16,8);
   HEAP32[$37>>2] = 1229209940;
   _png_reset_crc($png_ptr);
   _png_calculate_crc($png_ptr,$33,4);
   HEAP32[$29>>2] = 66;
   $92 = ($49|0)==(0);
   if (!($92)) {
    _png_write_data($png_ptr,$48,$49);
    _png_calculate_crc($png_ptr,$48,$49);
   }
   HEAP32[$29>>2] = 130;
   $93 = HEAP32[$38>>2]|0;
   $94 = $93 >>> 24;
   $95 = $94&255;
   HEAP8[$buf$i>>0] = $95;
   $96 = $93 >>> 16;
   $97 = $96&255;
   HEAP8[$39>>0] = $97;
   $98 = $93 >>> 8;
   $99 = $98&255;
   HEAP8[$40>>0] = $99;
   $100 = $93&255;
   HEAP8[$41>>0] = $100;
   _png_write_data($png_ptr,$buf$i,4);
   $101 = HEAP32[$27>>2]|0;
   $102 = $101 | 4;
   HEAP32[$27>>2] = $102;
   HEAP32[$$pre$phi34Z2D>>2] = $48;
   HEAP32[$$pre$phiZ2D>>2] = $49;
   $103 = ($43|0)==(0);
   $or$cond = $42 & $103;
   if ($or$cond) {
    $$0 = $44;
    continue;
   } else {
    $178 = $49;
   }
  } else {
   $178 = $45;
  }
  $104 = ($43|0)==(0);
  if (!($104)) {
   $$lcssa55 = $43;$$lcssa57 = $178;
   label = 29;
   break;
  }
  $105 = ($44|0)==(0);
  if ($105) {
   label = 27;
   break;
  } else {
   $$0 = $44;
  }
 }
 if ((label|0) == 21) {
  _png_error($png_ptr,15675);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $106 = ($flush|0)==(4);
  if ($106) {
   _png_error($png_ptr,16111);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 29) {
  $107 = ($$lcssa55|0)==(1);
  $108 = ($flush|0)==(4);
  $or$cond3 = $108 & $107;
  if (!($or$cond3)) {
   _png_zstream_error($png_ptr,$$lcssa55);
   $176 = ((($png_ptr)) + 248|0);
   $177 = HEAP32[$176>>2]|0;
   _png_error($png_ptr,$177);
   // unreachable;
  }
  $109 = HEAP32[$$pre$phi30Z2D>>2]|0;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$$pre$phi32Z2D>>2]|0;
  $112 = (($111) - ($$lcssa57))|0;
  $113 = HEAP32[$27>>2]|0;
  $114 = $113 & 4;
  $115 = ($114|0)==(0);
  if ($115) {
   $116 = HEAP8[$28>>0]|0;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $118 = (_png_image_size($png_ptr)|0);
    $119 = ($118>>>0)<(16385);
    if ($119) {
     $120 = HEAP8[$110>>0]|0;
     $121 = $120&255;
     $122 = $121 & 15;
     $123 = ($122|0)==(8);
     $124 = $121 & 240;
     $125 = ($124>>>0)<(113);
     $or$cond$i6 = $123 & $125;
     if ($or$cond$i6) {
      $126 = $121 >>> 4;
      $127 = (($126) + 7)|0;
      $128 = 1 << $127;
      $129 = ($128>>>0)<($118>>>0);
      if (!($129)) {
       $half_z_window_size$0$i8 = $128;$z_cinfo$0$i7 = $126;
       while(1) {
        $130 = $half_z_window_size$0$i8 >>> 1;
        $131 = (($z_cinfo$0$i7) + -1)|0;
        $132 = ($131|0)==(0);
        $133 = ($130>>>0)<($118>>>0);
        $or$cond2$i9 = $132 | $133;
        if ($or$cond2$i9) {
         $$lcssa = $131;
         break;
        } else {
         $half_z_window_size$0$i8 = $130;$z_cinfo$0$i7 = $131;
        }
       }
       $134 = $$lcssa << 4;
       $135 = $134 | 8;
       $136 = $135&255;
       HEAP8[$110>>0] = $136;
       $137 = ((($109)) + 5|0);
       $138 = HEAP8[$137>>0]|0;
       $139 = $138&255;
       $140 = $139 & 224;
       $141 = $135 << 8;
       $142 = $140 | $141;
       $143 = (($142>>>0) % 31)&-1;
       $144 = $140 | $143;
       $145 = $144 ^ 31;
       $146 = $145&255;
       HEAP8[$137>>0] = $146;
      }
     }
    }
   }
  }
  $147 = ($112|0)<(0);
  if ($147) {
   _png_error($png_ptr,15675);
   // unreachable;
  }
  HEAP32[$29>>2] = 34;
  $148 = $112 >>> 24;
  $149 = $148&255;
  HEAP8[$buf$i13>>0] = $149;
  $150 = $112 >>> 16;
  $151 = $150&255;
  $152 = ((($buf$i13)) + 1|0);
  HEAP8[$152>>0] = $151;
  $153 = $112 >>> 8;
  $154 = $153&255;
  $155 = ((($buf$i13)) + 2|0);
  HEAP8[$155>>0] = $154;
  $156 = $112&255;
  $157 = ((($buf$i13)) + 3|0);
  HEAP8[$157>>0] = $156;
  $158 = ((($buf$i13)) + 4|0);
  HEAP8[$158>>0] = 73;
  $159 = ((($buf$i13)) + 5|0);
  HEAP8[$159>>0] = 68;
  $160 = ((($buf$i13)) + 6|0);
  HEAP8[$160>>0] = 65;
  $161 = ((($buf$i13)) + 7|0);
  HEAP8[$161>>0] = 84;
  _png_write_data($png_ptr,$buf$i13,8);
  HEAP32[$37>>2] = 1229209940;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$158,4);
  HEAP32[$29>>2] = 66;
  $162 = ($111|0)==($$lcssa57|0);
  if (!($162)) {
   _png_write_data($png_ptr,$110,$112);
   _png_calculate_crc($png_ptr,$110,$112);
  }
  HEAP32[$29>>2] = 130;
  $163 = HEAP32[$38>>2]|0;
  $164 = $163 >>> 24;
  $165 = $164&255;
  HEAP8[$buf$i14>>0] = $165;
  $166 = $163 >>> 16;
  $167 = $166&255;
  $168 = ((($buf$i14)) + 1|0);
  HEAP8[$168>>0] = $167;
  $169 = $163 >>> 8;
  $170 = $169&255;
  $171 = ((($buf$i14)) + 2|0);
  HEAP8[$171>>0] = $170;
  $172 = $163&255;
  $173 = ((($buf$i14)) + 3|0);
  HEAP8[$173>>0] = $172;
  _png_write_data($png_ptr,$buf$i14,4);
  HEAP32[$$pre$phiZ2D>>2] = 0;
  HEAP32[$$pre$phi34Z2D>>2] = 0;
  $174 = HEAP32[$27>>2]|0;
  $175 = $174 | 12;
  HEAP32[$27>>2] = $175;
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _png_write_IEND($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp;
 $buf$i = sp + 8|0;
 $0 = ($png_ptr|0)==(0|0);
 if ($0) {
  $19 = ((($png_ptr)) + 208|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 | 16;
  HEAP32[$19>>2] = $21;
  STACKTOP = sp;return;
 }
 $1 = ((($png_ptr)) + 800|0);
 HEAP32[$1>>2] = 34;
 $2 = ((($buf$i1)) + 4|0);
 HEAP32[$buf$i1>>2] = 0;
 HEAP8[$2>>0] = 73;
 $3 = ((($buf$i1)) + 5|0);
 HEAP8[$3>>0] = 69;
 $4 = ((($buf$i1)) + 6|0);
 HEAP8[$4>>0] = 78;
 $5 = ((($buf$i1)) + 7|0);
 HEAP8[$5>>0] = 68;
 _png_write_data($png_ptr,$buf$i1,8);
 $6 = ((($png_ptr)) + 376|0);
 HEAP32[$6>>2] = 1229278788;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$2,4);
 HEAP32[$1>>2] = 130;
 $7 = ((($png_ptr)) + 412|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 HEAP8[$buf$i>>0] = $10;
 $11 = $8 >>> 16;
 $12 = $11&255;
 $13 = ((($buf$i)) + 1|0);
 HEAP8[$13>>0] = $12;
 $14 = $8 >>> 8;
 $15 = $14&255;
 $16 = ((($buf$i)) + 2|0);
 HEAP8[$16>>0] = $15;
 $17 = $8&255;
 $18 = ((($buf$i)) + 3|0);
 HEAP8[$18>>0] = $17;
 _png_write_data($png_ptr,$buf$i,4);
 $19 = ((($png_ptr)) + 208|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 | 16;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _png_write_gAMA_fixed($png_ptr,$file_gamma) {
 $png_ptr = $png_ptr|0;
 $file_gamma = $file_gamma|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = $file_gamma >>> 24;
 $1 = $0&255;
 HEAP8[$buf>>0] = $1;
 $2 = $file_gamma >>> 16;
 $3 = $2&255;
 $4 = ((($buf)) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $file_gamma >>> 8;
 $6 = $5&255;
 $7 = ((($buf)) + 2|0);
 HEAP8[$7>>0] = $6;
 $8 = $file_gamma&255;
 $9 = ((($buf)) + 3|0);
 HEAP8[$9>>0] = $8;
 $10 = ($png_ptr|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ((($png_ptr)) + 800|0);
 HEAP32[$11>>2] = 34;
 HEAP8[$buf$i>>0] = 0;
 $12 = ((($buf$i)) + 1|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($buf$i)) + 2|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($buf$i)) + 3|0);
 HEAP8[$14>>0] = 4;
 $15 = ((($buf$i)) + 4|0);
 HEAP8[$15>>0] = 103;
 $16 = ((($buf$i)) + 5|0);
 HEAP8[$16>>0] = 65;
 $17 = ((($buf$i)) + 6|0);
 HEAP8[$17>>0] = 77;
 $18 = ((($buf$i)) + 7|0);
 HEAP8[$18>>0] = 65;
 _png_write_data($png_ptr,$buf$i,8);
 $19 = ((($png_ptr)) + 376|0);
 HEAP32[$19>>2] = 1732332865;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$15,4);
 HEAP32[$11>>2] = 66;
 _png_write_data($png_ptr,$buf,4);
 _png_calculate_crc($png_ptr,$buf,4);
 HEAP32[$11>>2] = 130;
 $20 = ((($png_ptr)) + 412|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 24;
 $23 = $22&255;
 HEAP8[$buf$i1>>0] = $23;
 $24 = $21 >>> 16;
 $25 = $24&255;
 $26 = ((($buf$i1)) + 1|0);
 HEAP8[$26>>0] = $25;
 $27 = $21 >>> 8;
 $28 = $27&255;
 $29 = ((($buf$i1)) + 2|0);
 HEAP8[$29>>0] = $28;
 $30 = $21&255;
 $31 = ((($buf$i1)) + 3|0);
 HEAP8[$31>>0] = $30;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_write_sRGB($png_ptr,$srgb_intent) {
 $png_ptr = $png_ptr|0;
 $srgb_intent = $srgb_intent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = ($srgb_intent|0)>(3);
 if ($0) {
  _png_warning($png_ptr,16146);
 }
 $1 = $srgb_intent&255;
 HEAP8[$buf>>0] = $1;
 $2 = ($png_ptr|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($png_ptr)) + 800|0);
 HEAP32[$3>>2] = 34;
 HEAP8[$buf$i>>0] = 0;
 $4 = ((($buf$i)) + 1|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($buf$i)) + 2|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($buf$i)) + 3|0);
 HEAP8[$6>>0] = 1;
 $7 = ((($buf$i)) + 4|0);
 HEAP8[$7>>0] = 115;
 $8 = ((($buf$i)) + 5|0);
 HEAP8[$8>>0] = 82;
 $9 = ((($buf$i)) + 6|0);
 HEAP8[$9>>0] = 71;
 $10 = ((($buf$i)) + 7|0);
 HEAP8[$10>>0] = 66;
 _png_write_data($png_ptr,$buf$i,8);
 $11 = ((($png_ptr)) + 376|0);
 HEAP32[$11>>2] = 1934772034;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$7,4);
 HEAP32[$3>>2] = 66;
 _png_write_data($png_ptr,$buf,1);
 _png_calculate_crc($png_ptr,$buf,1);
 HEAP32[$3>>2] = 130;
 $12 = ((($png_ptr)) + 412|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 24;
 $15 = $14&255;
 HEAP8[$buf$i1>>0] = $15;
 $16 = $13 >>> 16;
 $17 = $16&255;
 $18 = ((($buf$i1)) + 1|0);
 HEAP8[$18>>0] = $17;
 $19 = $13 >>> 8;
 $20 = $19&255;
 $21 = ((($buf$i1)) + 2|0);
 HEAP8[$21>>0] = $20;
 $22 = $13&255;
 $23 = ((($buf$i1)) + 3|0);
 HEAP8[$23>>0] = $22;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_write_iCCP($png_ptr,$name,$profile) {
 $png_ptr = $png_ptr|0;
 $name = $name|0;
 $profile = $profile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $avail$0$i = 0, $buf$i = 0, $buf$i2 = 0, $comp = 0, $new_name = 0, $next$0$i = 0, $next$0$in$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i$i = 0, $output$0$i = 0, $output_len$0$avail$0$i = 0, $output_len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i2 = sp + 1128|0;
 $buf$i = sp + 1120|0;
 $new_name = sp + 1036|0;
 $comp = sp;
 $0 = ($profile|0)==(0|0);
 if ($0) {
  _png_error($png_ptr,16186);
  // unreachable;
 }
 $1 = HEAP8[$profile>>0]|0;
 $2 = $1&255;
 $3 = $2 << 24;
 $4 = ((($profile)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 16;
 $8 = $7 | $3;
 $9 = ((($profile)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $8 | $12;
 $14 = ((($profile)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $13 | $16;
 $18 = ($17>>>0)<(132);
 if ($18) {
  _png_error($png_ptr,16212);
  // unreachable;
 }
 $19 = ((($profile)) + 8|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20&255)<(4);
 $22 = $16 & 3;
 $23 = ($22|0)==(0);
 $or$cond = $23 | $21;
 if (!($or$cond)) {
  _png_error($png_ptr,16234);
  // unreachable;
 }
 $24 = (_png_check_keyword($png_ptr,$name,$new_name)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  _png_error($png_ptr,16283);
  // unreachable;
 }
 $26 = (($24) + 1)|0;
 $27 = (($new_name) + ($26)|0);
 HEAP8[$27>>0] = 0;
 $28 = (($24) + 2)|0;
 HEAP32[$comp>>2] = $profile;
 $29 = ((($comp)) + 4|0);
 HEAP32[$29>>2] = $17;
 $30 = ((($comp)) + 8|0);
 HEAP32[$30>>2] = 0;
 $31 = (_png_text_compress($png_ptr,1766015824,$comp,$28)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = ((($png_ptr)) + 248|0);
  $34 = HEAP32[$33>>2]|0;
  _png_error($png_ptr,$34);
  // unreachable;
 }
 $35 = HEAP32[$30>>2]|0;
 $36 = (($35) + ($28))|0;
 $37 = ($png_ptr|0)==(0|0);
 if ($37) {
  $61 = 0;
 } else {
  $38 = ((($png_ptr)) + 800|0);
  HEAP32[$38>>2] = 34;
  $39 = $36 >>> 24;
  $40 = $39&255;
  HEAP8[$buf$i2>>0] = $40;
  $41 = $36 >>> 16;
  $42 = $41&255;
  $43 = ((($buf$i2)) + 1|0);
  HEAP8[$43>>0] = $42;
  $44 = $36 >>> 8;
  $45 = $44&255;
  $46 = ((($buf$i2)) + 2|0);
  HEAP8[$46>>0] = $45;
  $47 = $36&255;
  $48 = ((($buf$i2)) + 3|0);
  HEAP8[$48>>0] = $47;
  $49 = ((($buf$i2)) + 4|0);
  HEAP8[$49>>0] = 105;
  $50 = ((($buf$i2)) + 5|0);
  HEAP8[$50>>0] = 67;
  $51 = ((($buf$i2)) + 6|0);
  HEAP8[$51>>0] = 67;
  $52 = ((($buf$i2)) + 7|0);
  HEAP8[$52>>0] = 80;
  _png_write_data($png_ptr,$buf$i2,8);
  $53 = ((($png_ptr)) + 376|0);
  HEAP32[$53>>2] = 1766015824;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$49,4);
  HEAP32[$38>>2] = 66;
  $54 = ($28|0)==(0);
  if ($54) {
   $61 = 1;
  } else {
   _png_write_data($png_ptr,$new_name,$28);
   _png_calculate_crc($png_ptr,$new_name,$28);
   $61 = 1;
  }
 }
 $55 = HEAP32[$30>>2]|0;
 $56 = ((($comp)) + 12|0);
 $57 = ((($png_ptr)) + 280|0);
 $58 = ((($png_ptr)) + 284|0);
 $avail$0$i = 1024;$next$0$in$i = $57;$output$0$i = $56;$output_len$0$i = $55;
 while(1) {
  $next$0$i = HEAP32[$next$0$in$i>>2]|0;
  $59 = ($avail$0$i>>>0)>($output_len$0$i>>>0);
  $output_len$0$avail$0$i = $59 ? $output_len$0$i : $avail$0$i;
  $60 = ($output_len$0$avail$0$i|0)!=(0);
  $or$cond3$i$i = $61 & $60;
  if ($or$cond3$i$i) {
   _png_write_data($png_ptr,$output$0$i,$output_len$0$avail$0$i);
   _png_calculate_crc($png_ptr,$output$0$i,$output_len$0$avail$0$i);
  }
  $62 = ($output_len$0$i|0)==($output_len$0$avail$0$i|0);
  $63 = ($next$0$i|0)==(0|0);
  $or$cond$i = $62 | $63;
  if ($or$cond$i) {
   break;
  }
  $64 = (($output_len$0$i) - ($output_len$0$avail$0$i))|0;
  $65 = HEAP32[$58>>2]|0;
  $66 = ((($next$0$i)) + 4|0);
  $avail$0$i = $65;$next$0$in$i = $next$0$i;$output$0$i = $66;$output_len$0$i = $64;
 }
 if (!($62)) {
  _png_error($png_ptr,16305);
  // unreachable;
 }
 if ($37) {
  STACKTOP = sp;return;
 }
 $67 = ((($png_ptr)) + 800|0);
 HEAP32[$67>>2] = 130;
 $68 = ((($png_ptr)) + 412|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 >>> 24;
 $71 = $70&255;
 HEAP8[$buf$i>>0] = $71;
 $72 = $69 >>> 16;
 $73 = $72&255;
 $74 = ((($buf$i)) + 1|0);
 HEAP8[$74>>0] = $73;
 $75 = $69 >>> 8;
 $76 = $75&255;
 $77 = ((($buf$i)) + 2|0);
 HEAP8[$77>>0] = $76;
 $78 = $69&255;
 $79 = ((($buf$i)) + 3|0);
 HEAP8[$79>>0] = $78;
 _png_write_data($png_ptr,$buf$i,4);
 STACKTOP = sp;return;
}
function _png_write_sPLT($png_ptr,$spalette) {
 $png_ptr = $png_ptr|0;
 $spalette = $spalette|0;
 var $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $buf$i2 = 0, $entrybuf = 0, $ep$05 = 0, $new_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i2 = sp + 104|0;
 $buf$i = sp + 96|0;
 $new_name = sp + 16|0;
 $entrybuf = sp;
 $0 = ((($spalette)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(8);
 $3 = $2 ? 6 : 10;
 $4 = ((($spalette)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$spalette>>2]|0;
 $7 = (_png_check_keyword($png_ptr,$6,$new_name)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  _png_error($png_ptr,16353);
  // unreachable;
 }
 $9 = Math_imul($3, $5)|0;
 $10 = (($7) + 2)|0;
 $11 = (($10) + ($9))|0;
 $12 = ($png_ptr|0)==(0|0);
 if ($12) {
  $103 = 0;
 } else {
  $13 = ((($png_ptr)) + 800|0);
  HEAP32[$13>>2] = 34;
  $14 = $11 >>> 24;
  $15 = $14&255;
  HEAP8[$buf$i>>0] = $15;
  $16 = $11 >>> 16;
  $17 = $16&255;
  $18 = ((($buf$i)) + 1|0);
  HEAP8[$18>>0] = $17;
  $19 = $11 >>> 8;
  $20 = $19&255;
  $21 = ((($buf$i)) + 2|0);
  HEAP8[$21>>0] = $20;
  $22 = $11&255;
  $23 = ((($buf$i)) + 3|0);
  HEAP8[$23>>0] = $22;
  $24 = ((($buf$i)) + 4|0);
  HEAP8[$24>>0] = 115;
  $25 = ((($buf$i)) + 5|0);
  HEAP8[$25>>0] = 80;
  $26 = ((($buf$i)) + 6|0);
  HEAP8[$26>>0] = 76;
  $27 = ((($buf$i)) + 7|0);
  HEAP8[$27>>0] = 84;
  _png_write_data($png_ptr,$buf$i,8);
  $28 = ((($png_ptr)) + 376|0);
  HEAP32[$28>>2] = 1934642260;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$24,4);
  HEAP32[$13>>2] = 66;
  $29 = (($7) + 1)|0;
  $30 = ($29|0)==(0);
  if (!($30)) {
   _png_write_data($png_ptr,$new_name,$29);
   _png_calculate_crc($png_ptr,$new_name,$29);
  }
  _png_write_data($png_ptr,$0,1);
  _png_calculate_crc($png_ptr,$0,1);
  $103 = 1;
 }
 $31 = ((($spalette)) + 8|0);
 $32 = HEAP32[$4>>2]|0;
 $33 = ($32|0)>(0);
 if ($33) {
  $34 = HEAP32[$31>>2]|0;
  $35 = ((($entrybuf)) + 1|0);
  $36 = ((($entrybuf)) + 2|0);
  $37 = ((($entrybuf)) + 3|0);
  $38 = ((($entrybuf)) + 4|0);
  $39 = ((($entrybuf)) + 5|0);
  $40 = ((($entrybuf)) + 6|0);
  $41 = ((($entrybuf)) + 7|0);
  $42 = ((($entrybuf)) + 8|0);
  $43 = ((($entrybuf)) + 9|0);
  $104 = $32;$105 = $34;$ep$05 = $34;
  while(1) {
   $44 = HEAP8[$0>>0]|0;
   $45 = ($44<<24>>24)==(8);
   $46 = HEAP16[$ep$05>>1]|0;
   if ($45) {
    $47 = $46&255;
    HEAP8[$entrybuf>>0] = $47;
    $48 = ((($ep$05)) + 2|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&255;
    HEAP8[$35>>0] = $50;
    $51 = ((($ep$05)) + 4|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52&255;
    HEAP8[$36>>0] = $53;
    $54 = ((($ep$05)) + 6|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&255;
    HEAP8[$37>>0] = $56;
    $57 = ((($ep$05)) + 8|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = ($58&65535) >>> 8;
    $60 = $59&255;
    HEAP8[$38>>0] = $60;
    $61 = $58&255;
    HEAP8[$39>>0] = $61;
   } else {
    $62 = ($46&65535) >>> 8;
    $63 = $62&255;
    HEAP8[$entrybuf>>0] = $63;
    $64 = $46&255;
    HEAP8[$35>>0] = $64;
    $65 = ((($ep$05)) + 2|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = ($66&65535) >>> 8;
    $68 = $67&255;
    HEAP8[$36>>0] = $68;
    $69 = $66&255;
    HEAP8[$37>>0] = $69;
    $70 = ((($ep$05)) + 4|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = ($71&65535) >>> 8;
    $73 = $72&255;
    HEAP8[$38>>0] = $73;
    $74 = $71&255;
    HEAP8[$39>>0] = $74;
    $75 = ((($ep$05)) + 6|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = ($76&65535) >>> 8;
    $78 = $77&255;
    HEAP8[$40>>0] = $78;
    $79 = $76&255;
    HEAP8[$41>>0] = $79;
    $80 = ((($ep$05)) + 8|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = ($81&65535) >>> 8;
    $83 = $82&255;
    HEAP8[$42>>0] = $83;
    $84 = $81&255;
    HEAP8[$43>>0] = $84;
   }
   if ($103) {
    _png_write_data($png_ptr,$entrybuf,$3);
    _png_calculate_crc($png_ptr,$entrybuf,$3);
    $$pre = HEAP32[$31>>2]|0;
    $$pre6 = HEAP32[$4>>2]|0;
    $87 = $$pre;$88 = $$pre6;
   } else {
    $87 = $105;$88 = $104;
   }
   $85 = ((($ep$05)) + 10|0);
   $86 = (($87) + (($88*10)|0)|0);
   $89 = ($85>>>0)<($86>>>0);
   if ($89) {
    $104 = $88;$105 = $87;$ep$05 = $85;
   } else {
    break;
   }
  }
 }
 if ($12) {
  STACKTOP = sp;return;
 }
 $90 = ((($png_ptr)) + 800|0);
 HEAP32[$90>>2] = 130;
 $91 = ((($png_ptr)) + 412|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 >>> 24;
 $94 = $93&255;
 HEAP8[$buf$i2>>0] = $94;
 $95 = $92 >>> 16;
 $96 = $95&255;
 $97 = ((($buf$i2)) + 1|0);
 HEAP8[$97>>0] = $96;
 $98 = $92 >>> 8;
 $99 = $98&255;
 $100 = ((($buf$i2)) + 2|0);
 HEAP8[$100>>0] = $99;
 $101 = $92&255;
 $102 = ((($buf$i2)) + 3|0);
 HEAP8[$102>>0] = $101;
 _png_write_data($png_ptr,$buf$i2,4);
 STACKTOP = sp;return;
}
function _png_write_sBIT($png_ptr,$sbit,$color_type) {
 $png_ptr = $png_ptr|0;
 $sbit = $sbit|0;
 $color_type = $color_type|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i3 = 0, $size$0 = 0, $size$146 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i3 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = $color_type & 2;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $19 = ((($sbit)) + 3|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = ((($png_ptr)) + 437|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($20&255)>($23&255);
    if (!($24)) {
     HEAP8[$buf>>0] = $20;
     $size$0 = 1;
     break;
    }
   }
   _png_warning($png_ptr,16375);
   STACKTOP = sp;return;
  } else {
   $2 = ($color_type|0)==(3);
   if ($2) {
    $8 = 8;
   } else {
    $3 = ((($png_ptr)) + 437|0);
    $4 = HEAP8[$3>>0]|0;
    $8 = $4;
   }
   $5 = HEAP8[$sbit>>0]|0;
   $6 = (($5) + -1)<<24>>24;
   $7 = ($6&255)<($8&255);
   if ($7) {
    $9 = ((($sbit)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = (($10) + -1)<<24>>24;
    $12 = ($11&255)<($8&255);
    if ($12) {
     $13 = ((($sbit)) + 2|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = (($14) + -1)<<24>>24;
     $16 = ($15&255)<($8&255);
     if ($16) {
      HEAP8[$buf>>0] = $5;
      $17 = ((($buf)) + 1|0);
      HEAP8[$17>>0] = $10;
      $18 = ((($buf)) + 2|0);
      HEAP8[$18>>0] = $14;
      $size$0 = 3;
      break;
     }
    }
   }
   _png_warning($png_ptr,16375);
   STACKTOP = sp;return;
  }
 } while(0);
 $25 = $color_type & 4;
 $26 = ($25|0)==(0);
 do {
  if ($26) {
   $33 = ($png_ptr|0)==(0|0);
   if ($33) {
    STACKTOP = sp;return;
   } else {
    $$pre$phiZ2D = $buf$i;$52 = $buf;$size$146 = $size$0;
    break;
   }
  } else {
   $27 = ((($sbit)) + 4|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   if (!($29)) {
    $30 = ((($png_ptr)) + 437|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = ($28&255)>($31&255);
    if (!($32)) {
     $34 = (($size$0) + 1)|0;
     $35 = (($buf) + ($size$0)|0);
     HEAP8[$35>>0] = $28;
     $$pre$phiZ2D = $buf$i;$52 = $buf;$size$146 = $34;
     break;
    }
   }
   _png_warning($png_ptr,16375);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = ((($png_ptr)) + 800|0);
 HEAP32[$36>>2] = 34;
 $37 = $size$146 >>> 24;
 $38 = $37&255;
 HEAP8[$$pre$phiZ2D>>0] = $38;
 $39 = $size$146 >>> 16;
 $40 = $39&255;
 $41 = ((($buf$i)) + 1|0);
 HEAP8[$41>>0] = $40;
 $42 = $size$146 >>> 8;
 $43 = $42&255;
 $44 = ((($buf$i)) + 2|0);
 HEAP8[$44>>0] = $43;
 $45 = $size$146&255;
 $46 = ((($buf$i)) + 3|0);
 HEAP8[$46>>0] = $45;
 $47 = ((($buf$i)) + 4|0);
 HEAP8[$47>>0] = 115;
 $48 = ((($buf$i)) + 5|0);
 HEAP8[$48>>0] = 66;
 $49 = ((($buf$i)) + 6|0);
 HEAP8[$49>>0] = 73;
 $50 = ((($buf$i)) + 7|0);
 HEAP8[$50>>0] = 84;
 _png_write_data($png_ptr,$$pre$phiZ2D,8);
 $51 = ((($png_ptr)) + 376|0);
 HEAP32[$51>>2] = 1933723988;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$47,4);
 HEAP32[$36>>2] = 66;
 _png_write_data($png_ptr,$52,$size$146);
 _png_calculate_crc($png_ptr,$52,$size$146);
 HEAP32[$36>>2] = 130;
 $53 = ((($png_ptr)) + 412|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 >>> 24;
 $56 = $55&255;
 HEAP8[$buf$i3>>0] = $56;
 $57 = $54 >>> 16;
 $58 = $57&255;
 $59 = ((($buf$i3)) + 1|0);
 HEAP8[$59>>0] = $58;
 $60 = $54 >>> 8;
 $61 = $60&255;
 $62 = ((($buf$i3)) + 2|0);
 HEAP8[$62>>0] = $61;
 $63 = $54&255;
 $64 = ((($buf$i3)) + 3|0);
 HEAP8[$64>>0] = $63;
 _png_write_data($png_ptr,$buf$i3,4);
 STACKTOP = sp;return;
}
function _png_write_cHRM_fixed($png_ptr,$xy) {
 $png_ptr = $png_ptr|0;
 $xy = $xy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 40|0;
 $buf$i = sp + 32|0;
 $buf = sp;
 $0 = ((($xy)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _png_save_int_32($buf,$1);
 $2 = ((($buf)) + 4|0);
 $3 = ((($xy)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _png_save_int_32($2,$4);
 $5 = ((($buf)) + 8|0);
 $6 = HEAP32[$xy>>2]|0;
 _png_save_int_32($5,$6);
 $7 = ((($buf)) + 12|0);
 $8 = ((($xy)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 _png_save_int_32($7,$9);
 $10 = ((($buf)) + 16|0);
 $11 = ((($xy)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _png_save_int_32($10,$12);
 $13 = ((($buf)) + 20|0);
 $14 = ((($xy)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 _png_save_int_32($13,$15);
 $16 = ((($buf)) + 24|0);
 $17 = ((($xy)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 _png_save_int_32($16,$18);
 $19 = ((($buf)) + 28|0);
 $20 = ((($xy)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 _png_save_int_32($19,$21);
 $22 = ($png_ptr|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = ((($png_ptr)) + 800|0);
 HEAP32[$23>>2] = 34;
 HEAP8[$buf$i>>0] = 0;
 $24 = ((($buf$i)) + 1|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($buf$i)) + 2|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($buf$i)) + 3|0);
 HEAP8[$26>>0] = 32;
 $27 = ((($buf$i)) + 4|0);
 HEAP8[$27>>0] = 99;
 $28 = ((($buf$i)) + 5|0);
 HEAP8[$28>>0] = 72;
 $29 = ((($buf$i)) + 6|0);
 HEAP8[$29>>0] = 82;
 $30 = ((($buf$i)) + 7|0);
 HEAP8[$30>>0] = 77;
 _png_write_data($png_ptr,$buf$i,8);
 $31 = ((($png_ptr)) + 376|0);
 HEAP32[$31>>2] = 1665684045;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$27,4);
 HEAP32[$23>>2] = 66;
 _png_write_data($png_ptr,$buf,32);
 _png_calculate_crc($png_ptr,$buf,32);
 HEAP32[$23>>2] = 130;
 $32 = ((($png_ptr)) + 412|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >>> 24;
 $35 = $34&255;
 HEAP8[$buf$i1>>0] = $35;
 $36 = $33 >>> 16;
 $37 = $36&255;
 $38 = ((($buf$i1)) + 1|0);
 HEAP8[$38>>0] = $37;
 $39 = $33 >>> 8;
 $40 = $39&255;
 $41 = ((($buf$i1)) + 2|0);
 HEAP8[$41>>0] = $40;
 $42 = $33&255;
 $43 = ((($buf$i1)) + 3|0);
 HEAP8[$43>>0] = $42;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_write_tRNS($png_ptr,$trans_alpha,$tran,$num_trans,$color_type) {
 $png_ptr = $png_ptr|0;
 $trans_alpha = $trans_alpha|0;
 $tran = $tran|0;
 $num_trans = $num_trans|0;
 $color_type = $color_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf$i = 0, $buf$i10 = 0, $buf$i12 = 0, $buf$i3 = 0, $buf$i5 = 0;
 var $buf$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i12 = sp + 40|0;
 $buf$i10 = sp + 32|0;
 $buf$i8 = sp + 24|0;
 $buf$i5 = sp + 16|0;
 $buf$i3 = sp + 12|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 switch ($color_type|0) {
 case 3:  {
  $0 = ($num_trans|0)<(1);
  if (!($0)) {
   $1 = ((($png_ptr)) + 420|0);
   $2 = HEAP16[$1>>1]|0;
   $3 = $2&65535;
   $4 = ($3|0)<($num_trans|0);
   if (!($4)) {
    $5 = ((($png_ptr)) + 800|0);
    HEAP32[$5>>2] = 34;
    $6 = $num_trans >>> 24;
    $7 = $6&255;
    HEAP8[$buf$i8>>0] = $7;
    $8 = $num_trans >>> 16;
    $9 = $8&255;
    $10 = ((($buf$i8)) + 1|0);
    HEAP8[$10>>0] = $9;
    $11 = $num_trans >>> 8;
    $12 = $11&255;
    $13 = ((($buf$i8)) + 2|0);
    HEAP8[$13>>0] = $12;
    $14 = $num_trans&255;
    $15 = ((($buf$i8)) + 3|0);
    HEAP8[$15>>0] = $14;
    $16 = ((($buf$i8)) + 4|0);
    HEAP8[$16>>0] = 116;
    $17 = ((($buf$i8)) + 5|0);
    HEAP8[$17>>0] = 82;
    $18 = ((($buf$i8)) + 6|0);
    HEAP8[$18>>0] = 78;
    $19 = ((($buf$i8)) + 7|0);
    HEAP8[$19>>0] = 83;
    _png_write_data($png_ptr,$buf$i8,8);
    $20 = ((($png_ptr)) + 376|0);
    HEAP32[$20>>2] = 1951551059;
    _png_reset_crc($png_ptr);
    _png_calculate_crc($png_ptr,$16,4);
    HEAP32[$5>>2] = 66;
    $21 = ($trans_alpha|0)==(0|0);
    if (!($21)) {
     _png_write_data($png_ptr,$trans_alpha,$num_trans);
     _png_calculate_crc($png_ptr,$trans_alpha,$num_trans);
    }
    HEAP32[$5>>2] = 130;
    $22 = ((($png_ptr)) + 412|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 >>> 24;
    $25 = $24&255;
    HEAP8[$buf$i>>0] = $25;
    $26 = $23 >>> 16;
    $27 = $26&255;
    $28 = ((($buf$i)) + 1|0);
    HEAP8[$28>>0] = $27;
    $29 = $23 >>> 8;
    $30 = $29&255;
    $31 = ((($buf$i)) + 2|0);
    HEAP8[$31>>0] = $30;
    $32 = $23&255;
    $33 = ((($buf$i)) + 3|0);
    HEAP8[$33>>0] = $32;
    _png_write_data($png_ptr,$buf$i,4);
    STACKTOP = sp;return;
   }
  }
  _png_app_warning($png_ptr,16404);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $34 = ((($tran)) + 8|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ((($png_ptr)) + 436|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = 1 << $39;
  $41 = ($36|0)<($40|0);
  if ($41) {
   $42 = ($35&65535) >>> 8;
   $43 = $42&255;
   HEAP8[$buf>>0] = $43;
   $44 = $35&255;
   $45 = ((($buf)) + 1|0);
   HEAP8[$45>>0] = $44;
   $46 = ((($png_ptr)) + 800|0);
   HEAP32[$46>>2] = 34;
   HEAP8[$buf$i5>>0] = 0;
   $47 = ((($buf$i5)) + 1|0);
   HEAP8[$47>>0] = 0;
   $48 = ((($buf$i5)) + 2|0);
   HEAP8[$48>>0] = 0;
   $49 = ((($buf$i5)) + 3|0);
   HEAP8[$49>>0] = 2;
   $50 = ((($buf$i5)) + 4|0);
   HEAP8[$50>>0] = 116;
   $51 = ((($buf$i5)) + 5|0);
   HEAP8[$51>>0] = 82;
   $52 = ((($buf$i5)) + 6|0);
   HEAP8[$52>>0] = 78;
   $53 = ((($buf$i5)) + 7|0);
   HEAP8[$53>>0] = 83;
   _png_write_data($png_ptr,$buf$i5,8);
   $54 = ((($png_ptr)) + 376|0);
   HEAP32[$54>>2] = 1951551059;
   _png_reset_crc($png_ptr);
   _png_calculate_crc($png_ptr,$50,4);
   HEAP32[$46>>2] = 66;
   _png_write_data($png_ptr,$buf,2);
   _png_calculate_crc($png_ptr,$buf,2);
   HEAP32[$46>>2] = 130;
   $55 = ((($png_ptr)) + 412|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 >>> 24;
   $58 = $57&255;
   HEAP8[$buf$i3>>0] = $58;
   $59 = $56 >>> 16;
   $60 = $59&255;
   $61 = ((($buf$i3)) + 1|0);
   HEAP8[$61>>0] = $60;
   $62 = $56 >>> 8;
   $63 = $62&255;
   $64 = ((($buf$i3)) + 2|0);
   HEAP8[$64>>0] = $63;
   $65 = $56&255;
   $66 = ((($buf$i3)) + 3|0);
   HEAP8[$66>>0] = $65;
   _png_write_data($png_ptr,$buf$i3,4);
   STACKTOP = sp;return;
  } else {
   _png_app_warning($png_ptr,16451);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $67 = ((($tran)) + 2|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = ($68&65535) >>> 8;
  $70 = $69&255;
  HEAP8[$buf>>0] = $70;
  $71 = $68&255;
  $72 = ((($buf)) + 1|0);
  HEAP8[$72>>0] = $71;
  $73 = ((($buf)) + 2|0);
  $74 = ((($tran)) + 4|0);
  $75 = HEAP16[$74>>1]|0;
  $76 = ($75&65535) >>> 8;
  $77 = $76&255;
  HEAP8[$73>>0] = $77;
  $78 = $75&255;
  $79 = ((($buf)) + 3|0);
  HEAP8[$79>>0] = $78;
  $80 = ((($buf)) + 4|0);
  $81 = ((($tran)) + 6|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = ($82&65535) >>> 8;
  $84 = $83&255;
  HEAP8[$80>>0] = $84;
  $85 = $82&255;
  $86 = ((($buf)) + 5|0);
  HEAP8[$86>>0] = $85;
  $87 = ((($png_ptr)) + 436|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = ($88<<24>>24)==(8);
  if ($89) {
   $90 = $76 | $69;
   $91 = $90 | $83;
   $92 = ($91<<16>>16)==(0);
   if (!($92)) {
    _png_app_warning($png_ptr,16515);
    STACKTOP = sp;return;
   }
  }
  $93 = ((($png_ptr)) + 800|0);
  HEAP32[$93>>2] = 34;
  HEAP8[$buf$i10>>0] = 0;
  $94 = ((($buf$i10)) + 1|0);
  HEAP8[$94>>0] = 0;
  $95 = ((($buf$i10)) + 2|0);
  HEAP8[$95>>0] = 0;
  $96 = ((($buf$i10)) + 3|0);
  HEAP8[$96>>0] = 6;
  $97 = ((($buf$i10)) + 4|0);
  HEAP8[$97>>0] = 116;
  $98 = ((($buf$i10)) + 5|0);
  HEAP8[$98>>0] = 82;
  $99 = ((($buf$i10)) + 6|0);
  HEAP8[$99>>0] = 78;
  $100 = ((($buf$i10)) + 7|0);
  HEAP8[$100>>0] = 83;
  _png_write_data($png_ptr,$buf$i10,8);
  $101 = ((($png_ptr)) + 376|0);
  HEAP32[$101>>2] = 1951551059;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$97,4);
  HEAP32[$93>>2] = 66;
  _png_write_data($png_ptr,$buf,6);
  _png_calculate_crc($png_ptr,$buf,6);
  HEAP32[$93>>2] = 130;
  $102 = ((($png_ptr)) + 412|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103 >>> 24;
  $105 = $104&255;
  HEAP8[$buf$i12>>0] = $105;
  $106 = $103 >>> 16;
  $107 = $106&255;
  $108 = ((($buf$i12)) + 1|0);
  HEAP8[$108>>0] = $107;
  $109 = $103 >>> 8;
  $110 = $109&255;
  $111 = ((($buf$i12)) + 2|0);
  HEAP8[$111>>0] = $110;
  $112 = $103&255;
  $113 = ((($buf$i12)) + 3|0);
  HEAP8[$113>>0] = $112;
  _png_write_data($png_ptr,$buf$i12,4);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _png_app_warning($png_ptr,16579);
  STACKTOP = sp;return;
 }
 }
}
function _png_write_bKGD($png_ptr,$back,$color_type) {
 $png_ptr = $png_ptr|0;
 $back = $back|0;
 $color_type = $color_type|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0;
 var $buf$i10 = 0, $buf$i3 = 0, $buf$i6 = 0, $buf$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i10 = sp + 48|0;
 $buf$i8 = sp + 40|0;
 $buf$i6 = sp + 32|0;
 $buf$i3 = sp + 24|0;
 $buf$i1 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = ($color_type|0)==(3);
 if ($0) {
  $1 = ((($png_ptr)) + 420|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = ($2<<16>>16)==(0);
  if ($3) {
   $4 = ((($png_ptr)) + 708|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 1;
   $7 = ($6|0)==(0);
   if ($7) {
    label = 5;
   } else {
    $$pre = HEAP8[$back>>0]|0;
    $12 = $$pre;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   $8 = HEAP8[$back>>0]|0;
   $9 = $8&255;
   $10 = $2&65535;
   $11 = ($9>>>0)<($10>>>0);
   if ($11) {
    $12 = $8;
   } else {
    _png_warning($png_ptr,16618);
    STACKTOP = sp;return;
   }
  }
  HEAP8[$buf>>0] = $12;
  $13 = ((($png_ptr)) + 800|0);
  HEAP32[$13>>2] = 34;
  HEAP8[$buf$i1>>0] = 0;
  $14 = ((($buf$i1)) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = ((($buf$i1)) + 2|0);
  HEAP8[$15>>0] = 0;
  $16 = ((($buf$i1)) + 3|0);
  HEAP8[$16>>0] = 1;
  $17 = ((($buf$i1)) + 4|0);
  HEAP8[$17>>0] = 98;
  $18 = ((($buf$i1)) + 5|0);
  HEAP8[$18>>0] = 75;
  $19 = ((($buf$i1)) + 6|0);
  HEAP8[$19>>0] = 71;
  $20 = ((($buf$i1)) + 7|0);
  HEAP8[$20>>0] = 68;
  _png_write_data($png_ptr,$buf$i1,8);
  $21 = ((($png_ptr)) + 376|0);
  HEAP32[$21>>2] = 1649100612;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$17,4);
  HEAP32[$13>>2] = 66;
  _png_write_data($png_ptr,$buf,1);
  _png_calculate_crc($png_ptr,$buf,1);
  HEAP32[$13>>2] = 130;
  $22 = ((($png_ptr)) + 412|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> 24;
  $25 = $24&255;
  HEAP8[$buf$i>>0] = $25;
  $26 = $23 >>> 16;
  $27 = $26&255;
  $28 = ((($buf$i)) + 1|0);
  HEAP8[$28>>0] = $27;
  $29 = $23 >>> 8;
  $30 = $29&255;
  $31 = ((($buf$i)) + 2|0);
  HEAP8[$31>>0] = $30;
  $32 = $23&255;
  $33 = ((($buf$i)) + 3|0);
  HEAP8[$33>>0] = $32;
  _png_write_data($png_ptr,$buf$i,4);
  STACKTOP = sp;return;
 }
 $34 = $color_type & 2;
 $35 = ($34|0)==(0);
 if ($35) {
  $83 = ((($back)) + 8|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = ((($png_ptr)) + 436|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = 1 << $88;
  $90 = ($85|0)<($89|0);
  if ($90) {
   $91 = ($84&65535) >>> 8;
   $92 = $91&255;
   HEAP8[$buf>>0] = $92;
   $93 = $84&255;
   $94 = ((($buf)) + 1|0);
   HEAP8[$94>>0] = $93;
   $95 = ((($png_ptr)) + 800|0);
   HEAP32[$95>>2] = 34;
   HEAP8[$buf$i8>>0] = 0;
   $96 = ((($buf$i8)) + 1|0);
   HEAP8[$96>>0] = 0;
   $97 = ((($buf$i8)) + 2|0);
   HEAP8[$97>>0] = 0;
   $98 = ((($buf$i8)) + 3|0);
   HEAP8[$98>>0] = 2;
   $99 = ((($buf$i8)) + 4|0);
   HEAP8[$99>>0] = 98;
   $100 = ((($buf$i8)) + 5|0);
   HEAP8[$100>>0] = 75;
   $101 = ((($buf$i8)) + 6|0);
   HEAP8[$101>>0] = 71;
   $102 = ((($buf$i8)) + 7|0);
   HEAP8[$102>>0] = 68;
   _png_write_data($png_ptr,$buf$i8,8);
   $103 = ((($png_ptr)) + 376|0);
   HEAP32[$103>>2] = 1649100612;
   _png_reset_crc($png_ptr);
   _png_calculate_crc($png_ptr,$99,4);
   HEAP32[$95>>2] = 66;
   _png_write_data($png_ptr,$buf,2);
   _png_calculate_crc($png_ptr,$buf,2);
   HEAP32[$95>>2] = 130;
   $104 = ((($png_ptr)) + 412|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 >>> 24;
   $107 = $106&255;
   HEAP8[$buf$i10>>0] = $107;
   $108 = $105 >>> 16;
   $109 = $108&255;
   $110 = ((($buf$i10)) + 1|0);
   HEAP8[$110>>0] = $109;
   $111 = $105 >>> 8;
   $112 = $111&255;
   $113 = ((($buf$i10)) + 2|0);
   HEAP8[$113>>0] = $112;
   $114 = $105&255;
   $115 = ((($buf$i10)) + 3|0);
   HEAP8[$115>>0] = $114;
   _png_write_data($png_ptr,$buf$i10,4);
   STACKTOP = sp;return;
  } else {
   _png_warning($png_ptr,16715);
   STACKTOP = sp;return;
  }
 }
 $36 = ((($back)) + 2|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($37&65535) >>> 8;
 $39 = $38&255;
 HEAP8[$buf>>0] = $39;
 $40 = $37&255;
 $41 = ((($buf)) + 1|0);
 HEAP8[$41>>0] = $40;
 $42 = ((($buf)) + 2|0);
 $43 = ((($back)) + 4|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = ($44&65535) >>> 8;
 $46 = $45&255;
 HEAP8[$42>>0] = $46;
 $47 = $44&255;
 $48 = ((($buf)) + 3|0);
 HEAP8[$48>>0] = $47;
 $49 = ((($buf)) + 4|0);
 $50 = ((($back)) + 6|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = ($51&65535) >>> 8;
 $53 = $52&255;
 HEAP8[$49>>0] = $53;
 $54 = $51&255;
 $55 = ((($buf)) + 5|0);
 HEAP8[$55>>0] = $54;
 $56 = ((($png_ptr)) + 436|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)==(8);
 if ($58) {
  $59 = $45 | $38;
  $60 = $59 | $52;
  $61 = ($60<<16>>16)==(0);
  if (!($61)) {
   _png_warning($png_ptr,16651);
   STACKTOP = sp;return;
  }
 }
 $62 = ((($png_ptr)) + 800|0);
 HEAP32[$62>>2] = 34;
 HEAP8[$buf$i6>>0] = 0;
 $63 = ((($buf$i6)) + 1|0);
 HEAP8[$63>>0] = 0;
 $64 = ((($buf$i6)) + 2|0);
 HEAP8[$64>>0] = 0;
 $65 = ((($buf$i6)) + 3|0);
 HEAP8[$65>>0] = 6;
 $66 = ((($buf$i6)) + 4|0);
 HEAP8[$66>>0] = 98;
 $67 = ((($buf$i6)) + 5|0);
 HEAP8[$67>>0] = 75;
 $68 = ((($buf$i6)) + 6|0);
 HEAP8[$68>>0] = 71;
 $69 = ((($buf$i6)) + 7|0);
 HEAP8[$69>>0] = 68;
 _png_write_data($png_ptr,$buf$i6,8);
 $70 = ((($png_ptr)) + 376|0);
 HEAP32[$70>>2] = 1649100612;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$66,4);
 HEAP32[$62>>2] = 66;
 _png_write_data($png_ptr,$buf,6);
 _png_calculate_crc($png_ptr,$buf,6);
 HEAP32[$62>>2] = 130;
 $71 = ((($png_ptr)) + 412|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 >>> 24;
 $74 = $73&255;
 HEAP8[$buf$i3>>0] = $74;
 $75 = $72 >>> 16;
 $76 = $75&255;
 $77 = ((($buf$i3)) + 1|0);
 HEAP8[$77>>0] = $76;
 $78 = $72 >>> 8;
 $79 = $78&255;
 $80 = ((($buf$i3)) + 2|0);
 HEAP8[$80>>0] = $79;
 $81 = $72&255;
 $82 = ((($buf$i3)) + 3|0);
 HEAP8[$82>>0] = $81;
 _png_write_data($png_ptr,$buf$i3,4);
 STACKTOP = sp;return;
}
function _png_write_hIST($png_ptr,$hist,$num_hist) {
 $png_ptr = $png_ptr|0;
 $hist = $hist|0;
 $num_hist = $num_hist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = ((($png_ptr)) + 420|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($2|0)<($num_hist|0);
 if ($3) {
  _png_warning($png_ptr,16779);
  STACKTOP = sp;return;
 }
 $4 = $num_hist << 1;
 $5 = ((($png_ptr)) + 800|0);
 HEAP32[$5>>2] = 34;
 $6 = $num_hist >>> 23;
 $7 = $6&255;
 HEAP8[$buf$i>>0] = $7;
 $8 = $num_hist >>> 15;
 $9 = $8&255;
 $10 = ((($buf$i)) + 1|0);
 HEAP8[$10>>0] = $9;
 $11 = $num_hist >>> 7;
 $12 = $11&255;
 $13 = ((($buf$i)) + 2|0);
 HEAP8[$13>>0] = $12;
 $14 = $4&255;
 $15 = ((($buf$i)) + 3|0);
 HEAP8[$15>>0] = $14;
 $16 = ((($buf$i)) + 4|0);
 HEAP8[$16>>0] = 104;
 $17 = ((($buf$i)) + 5|0);
 HEAP8[$17>>0] = 73;
 $18 = ((($buf$i)) + 6|0);
 HEAP8[$18>>0] = 83;
 $19 = ((($buf$i)) + 7|0);
 HEAP8[$19>>0] = 84;
 _png_write_data($png_ptr,$buf$i,8);
 $20 = ((($png_ptr)) + 376|0);
 HEAP32[$20>>2] = 1749635924;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$16,4);
 HEAP32[$5>>2] = 66;
 $21 = ($num_hist|0)>(0);
 if ($21) {
  $22 = ((($buf)) + 1|0);
  $i$02 = 0;
  while(1) {
   $23 = (($hist) + ($i$02<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = ($24&65535) >>> 8;
   $26 = $25&255;
   HEAP8[$buf>>0] = $26;
   $27 = $24&255;
   HEAP8[$22>>0] = $27;
   _png_write_data($png_ptr,$buf,2);
   _png_calculate_crc($png_ptr,$buf,2);
   $28 = (($i$02) + 1)|0;
   $exitcond = ($28|0)==($num_hist|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $28;
   }
  }
 }
 HEAP32[$5>>2] = 130;
 $29 = ((($png_ptr)) + 412|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 >>> 24;
 $32 = $31&255;
 HEAP8[$buf$i1>>0] = $32;
 $33 = $30 >>> 16;
 $34 = $33&255;
 $35 = ((($buf$i1)) + 1|0);
 HEAP8[$35>>0] = $34;
 $36 = $30 >>> 8;
 $37 = $36&255;
 $38 = ((($buf$i1)) + 2|0);
 HEAP8[$38>>0] = $37;
 $39 = $30&255;
 $40 = ((($buf$i1)) + 3|0);
 HEAP8[$40>>0] = $39;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_write_tEXt($png_ptr,$key,$text,$text_len) {
 $png_ptr = $png_ptr|0;
 $key = $key|0;
 $text = $text|0;
 $text_len = $text_len|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $buf$i3 = 0, $new_key = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i3 = sp + 88|0;
 $buf$i = sp + 80|0;
 $new_key = sp;
 $0 = (_png_check_keyword($png_ptr,$key,$new_key)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _png_error($png_ptr,16825);
  // unreachable;
 }
 $2 = ($text|0)==(0|0);
 if ($2) {
  $$04 = 0;
 } else {
  $3 = HEAP8[$text>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $$04 = 0;
  } else {
   $5 = (_strlen($text)|0);
   $6 = (2147483646 - ($0))|0;
   $7 = ($5>>>0)>($6>>>0);
   if ($7) {
    _png_error($png_ptr,16847);
    // unreachable;
   } else {
    $$04 = $5;
   }
  }
 }
 $8 = (($0) + 1)|0;
 $9 = (($8) + ($$04))|0;
 $10 = ($png_ptr|0)==(0|0);
 if ($10) {
  $43 = $buf$i3;
  STACKTOP = sp;return;
 }
 $11 = ((($png_ptr)) + 800|0);
 HEAP32[$11>>2] = 34;
 $12 = $9 >>> 24;
 $13 = $12&255;
 HEAP8[$buf$i>>0] = $13;
 $14 = $9 >>> 16;
 $15 = $14&255;
 $16 = ((($buf$i)) + 1|0);
 HEAP8[$16>>0] = $15;
 $17 = $9 >>> 8;
 $18 = $17&255;
 $19 = ((($buf$i)) + 2|0);
 HEAP8[$19>>0] = $18;
 $20 = $9&255;
 $21 = ((($buf$i)) + 3|0);
 HEAP8[$21>>0] = $20;
 $22 = ((($buf$i)) + 4|0);
 HEAP8[$22>>0] = 116;
 $23 = ((($buf$i)) + 5|0);
 HEAP8[$23>>0] = 69;
 $24 = ((($buf$i)) + 6|0);
 HEAP8[$24>>0] = 88;
 $25 = ((($buf$i)) + 7|0);
 HEAP8[$25>>0] = 116;
 _png_write_data($png_ptr,$buf$i,8);
 $26 = ((($png_ptr)) + 376|0);
 HEAP32[$26>>2] = 1950701684;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$22,4);
 HEAP32[$11>>2] = 66;
 $27 = ($8|0)==(0);
 if (!($27)) {
  _png_write_data($png_ptr,$new_key,$8);
  _png_calculate_crc($png_ptr,$new_key,$8);
 }
 $28 = ($$04|0)!=(0);
 $29 = ($text|0)!=(0|0);
 $or$cond = $28 & $29;
 if ($or$cond) {
  _png_write_data($png_ptr,$text,$$04);
  _png_calculate_crc($png_ptr,$text,$$04);
 }
 if ($10) {
  $43 = $buf$i3;
  STACKTOP = sp;return;
 }
 $30 = ((($png_ptr)) + 800|0);
 HEAP32[$30>>2] = 130;
 $31 = ((($png_ptr)) + 412|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >>> 24;
 $34 = $33&255;
 HEAP8[$buf$i3>>0] = $34;
 $35 = $32 >>> 16;
 $36 = $35&255;
 $37 = ((($buf$i3)) + 1|0);
 HEAP8[$37>>0] = $36;
 $38 = $32 >>> 8;
 $39 = $38&255;
 $40 = ((($buf$i3)) + 2|0);
 HEAP8[$40>>0] = $39;
 $41 = $32&255;
 $42 = ((($buf$i3)) + 3|0);
 HEAP8[$42>>0] = $41;
 _png_write_data($png_ptr,$buf$i3,4);
 $43 = $buf$i3;
 STACKTOP = sp;return;
}
function _png_write_zTXt($png_ptr,$key,$text,$compression) {
 $png_ptr = $png_ptr|0;
 $key = $key|0;
 $text = $text|0;
 $compression = $compression|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avail$0$i = 0;
 var $buf$i = 0, $buf$i1 = 0, $comp = 0, $new_key = 0, $next$0$i = 0, $next$0$in$i = 0, $or$cond$i = 0, $or$cond3$i$i = 0, $output$0$i = 0, $output_len$0$avail$0$i = 0, $output_len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 1128|0;
 $buf$i = sp + 1120|0;
 $new_key = sp + 1036|0;
 $comp = sp;
 switch ($compression|0) {
 case -1:  {
  _png_write_tEXt($png_ptr,$key,$text,0);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $0 = (_png_check_keyword($png_ptr,$key,$new_key)|0);
  $1 = ($0|0)==(0);
  if ($1) {
   _png_error($png_ptr,16898);
   // unreachable;
  }
  $2 = (($0) + 1)|0;
  $3 = (($new_key) + ($2)|0);
  HEAP8[$3>>0] = 0;
  $4 = (($0) + 2)|0;
  $5 = ($text|0)==(0|0);
  if ($5) {
   $8 = 0;
  } else {
   $6 = (_strlen($text)|0);
   $8 = $6;
  }
  HEAP32[$comp>>2] = $text;
  $7 = ((($comp)) + 4|0);
  HEAP32[$7>>2] = $8;
  $9 = ((($comp)) + 8|0);
  HEAP32[$9>>2] = 0;
  $10 = (_png_text_compress($png_ptr,2052348020,$comp,$4)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($png_ptr)) + 248|0);
   $13 = HEAP32[$12>>2]|0;
   _png_error($png_ptr,$13);
   // unreachable;
  }
  $14 = HEAP32[$9>>2]|0;
  $15 = (($14) + ($4))|0;
  $16 = ($png_ptr|0)==(0|0);
  if ($16) {
   $40 = 0;
  } else {
   $17 = ((($png_ptr)) + 800|0);
   HEAP32[$17>>2] = 34;
   $18 = $15 >>> 24;
   $19 = $18&255;
   HEAP8[$buf$i1>>0] = $19;
   $20 = $15 >>> 16;
   $21 = $20&255;
   $22 = ((($buf$i1)) + 1|0);
   HEAP8[$22>>0] = $21;
   $23 = $15 >>> 8;
   $24 = $23&255;
   $25 = ((($buf$i1)) + 2|0);
   HEAP8[$25>>0] = $24;
   $26 = $15&255;
   $27 = ((($buf$i1)) + 3|0);
   HEAP8[$27>>0] = $26;
   $28 = ((($buf$i1)) + 4|0);
   HEAP8[$28>>0] = 122;
   $29 = ((($buf$i1)) + 5|0);
   HEAP8[$29>>0] = 84;
   $30 = ((($buf$i1)) + 6|0);
   HEAP8[$30>>0] = 88;
   $31 = ((($buf$i1)) + 7|0);
   HEAP8[$31>>0] = 116;
   _png_write_data($png_ptr,$buf$i1,8);
   $32 = ((($png_ptr)) + 376|0);
   HEAP32[$32>>2] = 2052348020;
   _png_reset_crc($png_ptr);
   _png_calculate_crc($png_ptr,$28,4);
   HEAP32[$17>>2] = 66;
   $33 = ($4|0)==(0);
   if ($33) {
    $40 = 1;
   } else {
    _png_write_data($png_ptr,$new_key,$4);
    _png_calculate_crc($png_ptr,$new_key,$4);
    $40 = 1;
   }
  }
  $34 = HEAP32[$9>>2]|0;
  $35 = ((($comp)) + 12|0);
  $36 = ((($png_ptr)) + 280|0);
  $37 = ((($png_ptr)) + 284|0);
  $avail$0$i = 1024;$next$0$in$i = $36;$output$0$i = $35;$output_len$0$i = $34;
  while(1) {
   $next$0$i = HEAP32[$next$0$in$i>>2]|0;
   $38 = ($avail$0$i>>>0)>($output_len$0$i>>>0);
   $output_len$0$avail$0$i = $38 ? $output_len$0$i : $avail$0$i;
   $39 = ($output_len$0$avail$0$i|0)!=(0);
   $or$cond3$i$i = $40 & $39;
   if ($or$cond3$i$i) {
    _png_write_data($png_ptr,$output$0$i,$output_len$0$avail$0$i);
    _png_calculate_crc($png_ptr,$output$0$i,$output_len$0$avail$0$i);
   }
   $41 = ($output_len$0$i|0)==($output_len$0$avail$0$i|0);
   $42 = ($next$0$i|0)==(0|0);
   $or$cond$i = $41 | $42;
   if ($or$cond$i) {
    break;
   }
   $43 = (($output_len$0$i) - ($output_len$0$avail$0$i))|0;
   $44 = HEAP32[$37>>2]|0;
   $45 = ((($next$0$i)) + 4|0);
   $avail$0$i = $44;$next$0$in$i = $next$0$i;$output$0$i = $45;$output_len$0$i = $43;
  }
  if (!($41)) {
   _png_error($png_ptr,16305);
   // unreachable;
  }
  if (!($16)) {
   $46 = ((($png_ptr)) + 800|0);
   HEAP32[$46>>2] = 130;
   $47 = ((($png_ptr)) + 412|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >>> 24;
   $50 = $49&255;
   HEAP8[$buf$i>>0] = $50;
   $51 = $48 >>> 16;
   $52 = $51&255;
   $53 = ((($buf$i)) + 1|0);
   HEAP8[$53>>0] = $52;
   $54 = $48 >>> 8;
   $55 = $54&255;
   $56 = ((($buf$i)) + 2|0);
   HEAP8[$56>>0] = $55;
   $57 = $48&255;
   $58 = ((($buf$i)) + 3|0);
   HEAP8[$58>>0] = $57;
   _png_write_data($png_ptr,$buf$i,4);
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  _png_error($png_ptr,16867);
  // unreachable;
 }
 }
}
function _png_write_iTXt($png_ptr,$compression,$key,$lang,$lang_key,$text) {
 $png_ptr = $png_ptr|0;
 $compression = $compression|0;
 $key = $key|0;
 $lang = $lang|0;
 $lang_key = $lang_key|0;
 $text = $text|0;
 var $$0 = 0, $$03 = 0, $$lang = 0, $$pre = 0, $$text = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $avail$0$i = 0, $buf$i = 0, $buf$i4 = 0, $comp = 0, $key_len$0 = 0, $new_key = 0, $next$0$i = 0, $next$0$in$i = 0, $or$cond$i10 = 0, $or$cond$i11 = 0, $or$cond3$i$i = 0, $or$cond3$i12 = 0, $or$cond3$i5 = 0;
 var $or$cond3$i8 = 0, $output$0$i = 0, $output_len$0$avail$0$i = 0, $output_len$0$i = 0, $prefix_len$0 = 0, $prefix_len$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i4 = sp + 1128|0;
 $buf$i = sp + 1120|0;
 $new_key = sp + 1036|0;
 $comp = sp;
 $0 = (_png_check_keyword($png_ptr,$key,$new_key)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _png_error($png_ptr,16920);
  // unreachable;
 }
 switch ($compression|0) {
 case -1: case 1:  {
  $2 = (($0) + 1)|0;
  $3 = (($new_key) + ($2)|0);
  HEAP8[$3>>0] = 0;
  $$0 = 0;$key_len$0 = $2;
  break;
 }
 case 2: case 0:  {
  $4 = (($0) + 1)|0;
  $5 = (($new_key) + ($4)|0);
  HEAP8[$5>>0] = 1;
  $$0 = 1;$key_len$0 = $4;
  break;
 }
 default: {
  _png_error($png_ptr,16942);
  // unreachable;
 }
 }
 $6 = (($key_len$0) + 1)|0;
 $7 = (($new_key) + ($6)|0);
 HEAP8[$7>>0] = 0;
 $8 = (($key_len$0) + 2)|0;
 $9 = ($lang|0)==(0|0);
 $$lang = $9 ? 18199 : $lang;
 $10 = (_strlen($$lang)|0);
 $11 = (($10) + 1)|0;
 $12 = ($lang_key|0)==(0|0);
 $$03 = $12 ? 18199 : $lang_key;
 $13 = (_strlen($$03)|0);
 $14 = (($13) + 1)|0;
 $15 = ($text|0)==(0|0);
 $$text = $15 ? 18199 : $text;
 $16 = (2147483645 - ($key_len$0))|0;
 $17 = ($11>>>0)>($16>>>0);
 $18 = (($11) + ($8))|0;
 $prefix_len$0 = $17 ? 2147483647 : $18;
 $19 = (2147483647 - ($prefix_len$0))|0;
 $20 = ($14>>>0)>($19>>>0);
 $21 = (($prefix_len$0) + ($14))|0;
 $prefix_len$1 = $20 ? 2147483647 : $21;
 $22 = (_strlen($$text)|0);
 HEAP32[$comp>>2] = $$text;
 $23 = ((($comp)) + 4|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($comp)) + 8|0);
 HEAP32[$24>>2] = 0;
 do {
  if ($$0) {
   $25 = (_png_text_compress($png_ptr,1767135348,$comp,$prefix_len$1)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$pre = HEAP32[$24>>2]|0;
    $32 = $$pre;
    break;
   } else {
    $27 = ((($png_ptr)) + 248|0);
    $28 = HEAP32[$27>>2]|0;
    _png_error($png_ptr,$28);
    // unreachable;
   }
  } else {
   $29 = (2147483647 - ($prefix_len$1))|0;
   $30 = ($22>>>0)>($29>>>0);
   if ($30) {
    _png_error($png_ptr,16968);
    // unreachable;
   } else {
    HEAP32[$24>>2] = $22;
    $32 = $22;
    break;
   }
  }
 } while(0);
 $31 = (($32) + ($prefix_len$1))|0;
 $33 = ($png_ptr|0)==(0|0);
 if ($33) {
  $61 = 0;
 } else {
  $34 = ((($png_ptr)) + 800|0);
  HEAP32[$34>>2] = 34;
  $35 = $31 >>> 24;
  $36 = $35&255;
  HEAP8[$buf$i4>>0] = $36;
  $37 = $31 >>> 16;
  $38 = $37&255;
  $39 = ((($buf$i4)) + 1|0);
  HEAP8[$39>>0] = $38;
  $40 = $31 >>> 8;
  $41 = $40&255;
  $42 = ((($buf$i4)) + 2|0);
  HEAP8[$42>>0] = $41;
  $43 = $31&255;
  $44 = ((($buf$i4)) + 3|0);
  HEAP8[$44>>0] = $43;
  $45 = ((($buf$i4)) + 4|0);
  HEAP8[$45>>0] = 105;
  $46 = ((($buf$i4)) + 5|0);
  HEAP8[$46>>0] = 84;
  $47 = ((($buf$i4)) + 6|0);
  HEAP8[$47>>0] = 88;
  $48 = ((($buf$i4)) + 7|0);
  HEAP8[$48>>0] = 116;
  _png_write_data($png_ptr,$buf$i4,8);
  $49 = ((($png_ptr)) + 376|0);
  HEAP32[$49>>2] = 1767135348;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$45,4);
  HEAP32[$34>>2] = 66;
  $50 = ($8|0)==(0);
  if (!($50)) {
   _png_write_data($png_ptr,$new_key,$8);
   _png_calculate_crc($png_ptr,$new_key,$8);
  }
  $51 = ($$lang|0)!=(0|0);
  $52 = ($11|0)!=(0);
  $or$cond3$i5 = $52 & $51;
  if ($or$cond3$i5) {
   _png_write_data($png_ptr,$$lang,$11);
   _png_calculate_crc($png_ptr,$$lang,$11);
  }
  $53 = ($$03|0)!=(0|0);
  $54 = ($14|0)!=(0);
  $or$cond3$i8 = $54 & $53;
  if ($or$cond3$i8) {
   _png_write_data($png_ptr,$$03,$14);
   _png_calculate_crc($png_ptr,$$03,$14);
   $61 = 1;
  } else {
   $61 = 1;
  }
 }
 $55 = HEAP32[$24>>2]|0;
 if ($$0) {
  $56 = ((($comp)) + 12|0);
  $57 = ((($png_ptr)) + 280|0);
  $58 = ((($png_ptr)) + 284|0);
  $avail$0$i = 1024;$next$0$in$i = $57;$output$0$i = $56;$output_len$0$i = $55;
  while(1) {
   $next$0$i = HEAP32[$next$0$in$i>>2]|0;
   $59 = ($avail$0$i>>>0)>($output_len$0$i>>>0);
   $output_len$0$avail$0$i = $59 ? $output_len$0$i : $avail$0$i;
   $60 = ($output_len$0$avail$0$i|0)!=(0);
   $or$cond3$i$i = $61 & $60;
   if ($or$cond3$i$i) {
    _png_write_data($png_ptr,$output$0$i,$output_len$0$avail$0$i);
    _png_calculate_crc($png_ptr,$output$0$i,$output_len$0$avail$0$i);
   }
   $62 = ($output_len$0$i|0)==($output_len$0$avail$0$i|0);
   $63 = ($next$0$i|0)==(0|0);
   $or$cond$i10 = $62 | $63;
   if ($or$cond$i10) {
    break;
   }
   $64 = (($output_len$0$i) - ($output_len$0$avail$0$i))|0;
   $65 = HEAP32[$58>>2]|0;
   $66 = ((($next$0$i)) + 4|0);
   $avail$0$i = $65;$next$0$in$i = $next$0$i;$output$0$i = $66;$output_len$0$i = $64;
  }
  if (!($62)) {
   _png_error($png_ptr,16305);
   // unreachable;
  }
 } else {
  $67 = ($$text|0)!=(0|0);
  $or$cond$i11 = $67 & $61;
  $68 = ($55|0)!=(0);
  $or$cond3$i12 = $or$cond$i11 & $68;
  if ($or$cond3$i12) {
   _png_write_data($png_ptr,$$text,$55);
   _png_calculate_crc($png_ptr,$$text,$55);
  }
 }
 if ($33) {
  STACKTOP = sp;return;
 }
 $69 = ((($png_ptr)) + 800|0);
 HEAP32[$69>>2] = 130;
 $70 = ((($png_ptr)) + 412|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 >>> 24;
 $73 = $72&255;
 HEAP8[$buf$i>>0] = $73;
 $74 = $71 >>> 16;
 $75 = $74&255;
 $76 = ((($buf$i)) + 1|0);
 HEAP8[$76>>0] = $75;
 $77 = $71 >>> 8;
 $78 = $77&255;
 $79 = ((($buf$i)) + 2|0);
 HEAP8[$79>>0] = $78;
 $80 = $71&255;
 $81 = ((($buf$i)) + 3|0);
 HEAP8[$81>>0] = $80;
 _png_write_data($png_ptr,$buf$i,4);
 STACKTOP = sp;return;
}
function _png_write_oFFs($png_ptr,$x_offset,$y_offset,$unit_type) {
 $png_ptr = $png_ptr|0;
 $x_offset = $x_offset|0;
 $y_offset = $y_offset|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 24|0;
 $buf$i = sp + 16|0;
 $buf = sp;
 $0 = ($unit_type|0)>(1);
 if ($0) {
  _png_warning($png_ptr,17001);
 }
 _png_save_int_32($buf,$x_offset);
 $1 = ((($buf)) + 4|0);
 _png_save_int_32($1,$y_offset);
 $2 = $unit_type&255;
 $3 = ((($buf)) + 8|0);
 HEAP8[$3>>0] = $2;
 $4 = ($png_ptr|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($png_ptr)) + 800|0);
 HEAP32[$5>>2] = 34;
 HEAP8[$buf$i>>0] = 0;
 $6 = ((($buf$i)) + 1|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($buf$i)) + 2|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($buf$i)) + 3|0);
 HEAP8[$8>>0] = 9;
 $9 = ((($buf$i)) + 4|0);
 HEAP8[$9>>0] = 111;
 $10 = ((($buf$i)) + 5|0);
 HEAP8[$10>>0] = 70;
 $11 = ((($buf$i)) + 6|0);
 HEAP8[$11>>0] = 70;
 $12 = ((($buf$i)) + 7|0);
 HEAP8[$12>>0] = 115;
 _png_write_data($png_ptr,$buf$i,8);
 $13 = ((($png_ptr)) + 376|0);
 HEAP32[$13>>2] = 1866876531;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$9,4);
 HEAP32[$5>>2] = 66;
 _png_write_data($png_ptr,$buf,9);
 _png_calculate_crc($png_ptr,$buf,9);
 HEAP32[$5>>2] = 130;
 $14 = ((($png_ptr)) + 412|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 24;
 $17 = $16&255;
 HEAP8[$buf$i1>>0] = $17;
 $18 = $15 >>> 16;
 $19 = $18&255;
 $20 = ((($buf$i1)) + 1|0);
 HEAP8[$20>>0] = $19;
 $21 = $15 >>> 8;
 $22 = $21&255;
 $23 = ((($buf$i1)) + 2|0);
 HEAP8[$23>>0] = $22;
 $24 = $15&255;
 $25 = ((($buf$i1)) + 3|0);
 HEAP8[$25>>0] = $24;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_write_pCAL($png_ptr,$purpose,$X0,$X1,$type,$nparams,$units,$params) {
 $png_ptr = $png_ptr|0;
 $purpose = $purpose|0;
 $X0 = $X0|0;
 $X1 = $X1|0;
 $type = $type|0;
 $nparams = $nparams|0;
 $units = $units|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i8 = 0, $exitcond = 0, $exitcond16 = 0, $i$014 = 0, $i$112 = 0, $new_purpose = 0, $not$ = 0, $not$1 = 0, $or$cond$i5 = 0, $or$cond3$i3 = 0, $or$cond3$i6 = 0;
 var $total_len$0$lcssa = 0, $total_len$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i8 = sp + 104|0;
 $buf$i = sp + 96|0;
 $buf = sp + 80|0;
 $new_purpose = sp;
 $0 = ($type|0)>(3);
 if ($0) {
  _png_error($png_ptr,17039);
  // unreachable;
 }
 $1 = (_png_check_keyword($png_ptr,$purpose,$new_purpose)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _png_error($png_ptr,17081);
  // unreachable;
 }
 $3 = (($1) + 1)|0;
 $4 = (_strlen($units)|0);
 $not$ = ($nparams|0)!=(0);
 $5 = $not$&1;
 $6 = (($4) + ($5))|0;
 $7 = (($1) + 11)|0;
 $8 = (($7) + ($6))|0;
 $9 = $nparams << 2;
 $10 = (_png_malloc($png_ptr,$9)|0);
 $11 = ($nparams|0)>(0);
 if ($11) {
  $12 = (($nparams) + -1)|0;
  $i$014 = 0;$total_len$013 = $8;
  while(1) {
   $13 = (($params) + ($i$014<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strlen($14)|0);
   $not$1 = ($i$014|0)!=($12|0);
   $16 = $not$1&1;
   $17 = (($15) + ($16))|0;
   $18 = (($10) + ($i$014<<2)|0);
   HEAP32[$18>>2] = $17;
   $19 = (($17) + ($total_len$013))|0;
   $20 = (($i$014) + 1)|0;
   $exitcond16 = ($20|0)==($nparams|0);
   if ($exitcond16) {
    $total_len$0$lcssa = $19;
    break;
   } else {
    $i$014 = $20;$total_len$013 = $19;
   }
  }
 } else {
  $total_len$0$lcssa = $8;
 }
 $21 = ($png_ptr|0)==(0|0);
 if ($21) {
  $51 = 0;
 } else {
  $22 = ((($png_ptr)) + 800|0);
  HEAP32[$22>>2] = 34;
  $23 = $total_len$0$lcssa >>> 24;
  $24 = $23&255;
  HEAP8[$buf$i>>0] = $24;
  $25 = $total_len$0$lcssa >>> 16;
  $26 = $25&255;
  $27 = ((($buf$i)) + 1|0);
  HEAP8[$27>>0] = $26;
  $28 = $total_len$0$lcssa >>> 8;
  $29 = $28&255;
  $30 = ((($buf$i)) + 2|0);
  HEAP8[$30>>0] = $29;
  $31 = $total_len$0$lcssa&255;
  $32 = ((($buf$i)) + 3|0);
  HEAP8[$32>>0] = $31;
  $33 = ((($buf$i)) + 4|0);
  HEAP8[$33>>0] = 112;
  $34 = ((($buf$i)) + 5|0);
  HEAP8[$34>>0] = 67;
  $35 = ((($buf$i)) + 6|0);
  HEAP8[$35>>0] = 65;
  $36 = ((($buf$i)) + 7|0);
  HEAP8[$36>>0] = 76;
  _png_write_data($png_ptr,$buf$i,8);
  $37 = ((($png_ptr)) + 376|0);
  HEAP32[$37>>2] = 1883455820;
  _png_reset_crc($png_ptr);
  _png_calculate_crc($png_ptr,$33,4);
  HEAP32[$22>>2] = 66;
  $38 = ($3|0)==(0);
  if ($38) {
   $51 = 1;
  } else {
   _png_write_data($png_ptr,$new_purpose,$3);
   _png_calculate_crc($png_ptr,$new_purpose,$3);
   $51 = 1;
  }
 }
 _png_save_int_32($buf,$X0);
 $39 = ((($buf)) + 4|0);
 _png_save_int_32($39,$X1);
 $40 = $type&255;
 $41 = ((($buf)) + 8|0);
 HEAP8[$41>>0] = $40;
 $42 = $nparams&255;
 $43 = ((($buf)) + 9|0);
 HEAP8[$43>>0] = $42;
 if ($51) {
  _png_write_data($png_ptr,$buf,10);
  _png_calculate_crc($png_ptr,$buf,10);
  $44 = ($units|0)!=(0|0);
  $45 = ($6|0)!=(0);
  $or$cond3$i3 = $45 & $44;
  if ($or$cond3$i3) {
   _png_write_data($png_ptr,$units,$6);
   _png_calculate_crc($png_ptr,$units,$6);
  }
 }
 if ($11) {
  $i$112 = 0;
  while(1) {
   $46 = (($params) + ($i$112<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($10) + ($i$112<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47|0)!=(0|0);
   $or$cond$i5 = $51 & $50;
   $52 = ($49|0)!=(0);
   $or$cond3$i6 = $or$cond$i5 & $52;
   if ($or$cond3$i6) {
    _png_write_data($png_ptr,$47,$49);
    _png_calculate_crc($png_ptr,$47,$49);
   }
   $53 = (($i$112) + 1)|0;
   $exitcond = ($53|0)==($nparams|0);
   if ($exitcond) {
    break;
   } else {
    $i$112 = $53;
   }
  }
 }
 _png_free($png_ptr,$10);
 if ($21) {
  STACKTOP = sp;return;
 }
 $54 = ((($png_ptr)) + 800|0);
 HEAP32[$54>>2] = 130;
 $55 = ((($png_ptr)) + 412|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 >>> 24;
 $58 = $57&255;
 HEAP8[$buf$i8>>0] = $58;
 $59 = $56 >>> 16;
 $60 = $59&255;
 $61 = ((($buf$i8)) + 1|0);
 HEAP8[$61>>0] = $60;
 $62 = $56 >>> 8;
 $63 = $62&255;
 $64 = ((($buf$i8)) + 2|0);
 HEAP8[$64>>0] = $63;
 $65 = $56&255;
 $66 = ((($buf$i8)) + 3|0);
 HEAP8[$66>>0] = $65;
 _png_write_data($png_ptr,$buf$i8,4);
 STACKTOP = sp;return;
}
function _png_write_sCAL_s($png_ptr,$unit,$width,$height) {
 $png_ptr = $png_ptr|0;
 $unit = $unit|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0;
 var $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 72|0;
 $buf$i = sp + 64|0;
 $buf = sp;
 $0 = (_strlen($width)|0);
 $1 = (_strlen($height)|0);
 $2 = (($0) + 2)|0;
 $3 = (($2) + ($1))|0;
 $4 = ($3>>>0)>(64);
 if ($4) {
  _png_warning($png_ptr,17103);
  STACKTOP = sp;return;
 }
 $5 = $unit&255;
 HEAP8[$buf>>0] = $5;
 $6 = ((($buf)) + 1|0);
 $7 = (($0) + 1)|0;
 _memcpy(($6|0),($width|0),($7|0))|0;
 $8 = (($buf) + ($2)|0);
 _memcpy(($8|0),($height|0),($1|0))|0;
 $9 = ($png_ptr|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($png_ptr)) + 800|0);
 HEAP32[$10>>2] = 34;
 $11 = $3 >>> 24;
 $12 = $11&255;
 HEAP8[$buf$i>>0] = $12;
 $13 = $3 >>> 16;
 $14 = $13&255;
 $15 = ((($buf$i)) + 1|0);
 HEAP8[$15>>0] = $14;
 $16 = $3 >>> 8;
 $17 = $16&255;
 $18 = ((($buf$i)) + 2|0);
 HEAP8[$18>>0] = $17;
 $19 = $3&255;
 $20 = ((($buf$i)) + 3|0);
 HEAP8[$20>>0] = $19;
 $21 = ((($buf$i)) + 4|0);
 HEAP8[$21>>0] = 115;
 $22 = ((($buf$i)) + 5|0);
 HEAP8[$22>>0] = 67;
 $23 = ((($buf$i)) + 6|0);
 HEAP8[$23>>0] = 65;
 $24 = ((($buf$i)) + 7|0);
 HEAP8[$24>>0] = 76;
 _png_write_data($png_ptr,$buf$i,8);
 $25 = ((($png_ptr)) + 376|0);
 HEAP32[$25>>2] = 1933787468;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$21,4);
 HEAP32[$10>>2] = 66;
 $26 = ($3|0)==(0);
 if (!($26)) {
  _png_write_data($png_ptr,$buf,$3);
  _png_calculate_crc($png_ptr,$buf,$3);
 }
 HEAP32[$10>>2] = 130;
 $27 = ((($png_ptr)) + 412|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 24;
 $30 = $29&255;
 HEAP8[$buf$i1>>0] = $30;
 $31 = $28 >>> 16;
 $32 = $31&255;
 $33 = ((($buf$i1)) + 1|0);
 HEAP8[$33>>0] = $32;
 $34 = $28 >>> 8;
 $35 = $34&255;
 $36 = ((($buf$i1)) + 2|0);
 HEAP8[$36>>0] = $35;
 $37 = $28&255;
 $38 = ((($buf$i1)) + 3|0);
 HEAP8[$38>>0] = $37;
 _png_write_data($png_ptr,$buf$i1,4);
 STACKTOP = sp;return;
}
function _png_write_pHYs($png_ptr,$x_pixels_per_unit,$y_pixels_per_unit,$unit_type) {
 $png_ptr = $png_ptr|0;
 $x_pixels_per_unit = $x_pixels_per_unit|0;
 $y_pixels_per_unit = $y_pixels_per_unit|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i1 = sp + 16|0;
 $buf$i = sp + 12|0;
 $buf = sp;
 $0 = ($unit_type|0)>(1);
 if ($0) {
  _png_warning($png_ptr,17139);
 }
 $1 = $x_pixels_per_unit >>> 24;
 $2 = $1&255;
 HEAP8[$buf>>0] = $2;
 $3 = $x_pixels_per_unit >>> 16;
 $4 = $3&255;
 $5 = ((($buf)) + 1|0);
 HEAP8[$5>>0] = $4;
 $6 = $x_pixels_per_unit >>> 8;
 $7 = $6&255;
 $8 = ((($buf)) + 2|0);
 HEAP8[$8>>0] = $7;
 $9 = $x_pixels_per_unit&255;
 $10 = ((($buf)) + 3|0);
 HEAP8[$10>>0] = $9;
 $11 = ((($buf)) + 4|0);
 $12 = $y_pixels_per_unit >>> 24;
 $13 = $12&255;
 HEAP8[$11>>0] = $13;
 $14 = $y_pixels_per_unit >>> 16;
 $15 = $14&255;
 $16 = ((($buf)) + 5|0);
 HEAP8[$16>>0] = $15;
 $17 = $y_pixels_per_unit >>> 8;
 $18 = $17&255;
 $19 = ((($buf)) + 6|0);
 HEAP8[$19>>0] = $18;
 $20 = $y_pixels_per_unit&255;
 $21 = ((($buf)) + 7|0);
 HEAP8[$21>>0] = $20;
 $22 = $unit_type&255;
 $23 = ((($buf)) + 8|0);
 HEAP8[$23>>0] = $22;
 $24 = ($png_ptr|0)==(0|0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = ((($png_ptr)) + 800|0);
 HEAP32[$25>>2] = 34;
 HEAP8[$buf$i1>>0] = 0;
 $26 = ((($buf$i1)) + 1|0);
 HEAP8[$26>>0] = 0;
 $27 = ((($buf$i1)) + 2|0);
 HEAP8[$27>>0] = 0;
 $28 = ((($buf$i1)) + 3|0);
 HEAP8[$28>>0] = 9;
 $29 = ((($buf$i1)) + 4|0);
 HEAP8[$29>>0] = 112;
 $30 = ((($buf$i1)) + 5|0);
 HEAP8[$30>>0] = 72;
 $31 = ((($buf$i1)) + 6|0);
 HEAP8[$31>>0] = 89;
 $32 = ((($buf$i1)) + 7|0);
 HEAP8[$32>>0] = 115;
 _png_write_data($png_ptr,$buf$i1,8);
 $33 = ((($png_ptr)) + 376|0);
 HEAP32[$33>>2] = 1883789683;
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr,$29,4);
 HEAP32[$25>>2] = 66;
 _png_write_data($png_ptr,$buf,9);
 _png_calculate_crc($png_ptr,$buf,9);
 HEAP32[$25>>2] = 130;
 $34 = ((($png_ptr)) + 412|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 24;
 $37 = $36&255;
 HEAP8[$buf$i>>0] = $37;
 $38 = $35 >>> 16;
 $39 = $38&255;
 $40 = ((($buf$i)) + 1|0);
 HEAP8[$40>>0] = $39;
 $41 = $35 >>> 8;
 $42 = $41&255;
 $43 = ((($buf$i)) + 2|0);
 HEAP8[$43>>0] = $42;
 $44 = $35&255;
 $45 = ((($buf$i)) + 3|0);
 HEAP8[$45>>0] = $44;
 _png_write_data($png_ptr,$buf$i,4);
 STACKTOP = sp;return;
}
function _png_write_tIME($png_ptr,$mod_time) {
 $png_ptr = $png_ptr|0;
 $mod_time = $mod_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf$i = 0, $buf$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i2 = sp + 16|0;
 $buf$i = sp + 8|0;
 $buf = sp;
 $0 = ((($mod_time)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (($1) + -1)<<24>>24;
 $3 = ($2&255)>(11);
 if (!($3)) {
  $4 = ((($mod_time)) + 3|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = (($5) + -1)<<24>>24;
  $7 = ($6&255)>(30);
  if (!($7)) {
   $8 = ((($mod_time)) + 4|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9&255)>(23);
   if (!($10)) {
    $11 = ((($mod_time)) + 6|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12&255)>(60);
    if (!($13)) {
     $14 = HEAP16[$mod_time>>1]|0;
     $15 = ($14&65535) >>> 8;
     $16 = $15&255;
     HEAP8[$buf>>0] = $16;
     $17 = $14&255;
     $18 = ((($buf)) + 1|0);
     HEAP8[$18>>0] = $17;
     $19 = ((($buf)) + 2|0);
     HEAP8[$19>>0] = $1;
     $20 = ((($buf)) + 3|0);
     HEAP8[$20>>0] = $5;
     $21 = ((($buf)) + 4|0);
     HEAP8[$21>>0] = $9;
     $22 = ((($mod_time)) + 5|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ((($buf)) + 5|0);
     HEAP8[$24>>0] = $23;
     $25 = ((($buf)) + 6|0);
     HEAP8[$25>>0] = $12;
     $26 = ($png_ptr|0)==(0|0);
     if ($26) {
      STACKTOP = sp;return;
     }
     $27 = ((($png_ptr)) + 800|0);
     HEAP32[$27>>2] = 34;
     HEAP8[$buf$i>>0] = 0;
     $28 = ((($buf$i)) + 1|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($buf$i)) + 2|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($buf$i)) + 3|0);
     HEAP8[$30>>0] = 7;
     $31 = ((($buf$i)) + 4|0);
     HEAP8[$31>>0] = 116;
     $32 = ((($buf$i)) + 5|0);
     HEAP8[$32>>0] = 73;
     $33 = ((($buf$i)) + 6|0);
     HEAP8[$33>>0] = 77;
     $34 = ((($buf$i)) + 7|0);
     HEAP8[$34>>0] = 69;
     _png_write_data($png_ptr,$buf$i,8);
     $35 = ((($png_ptr)) + 376|0);
     HEAP32[$35>>2] = 1950960965;
     _png_reset_crc($png_ptr);
     _png_calculate_crc($png_ptr,$31,4);
     HEAP32[$27>>2] = 66;
     _png_write_data($png_ptr,$buf,7);
     _png_calculate_crc($png_ptr,$buf,7);
     HEAP32[$27>>2] = 130;
     $36 = ((($png_ptr)) + 412|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 >>> 24;
     $39 = $38&255;
     HEAP8[$buf$i2>>0] = $39;
     $40 = $37 >>> 16;
     $41 = $40&255;
     $42 = ((($buf$i2)) + 1|0);
     HEAP8[$42>>0] = $41;
     $43 = $37 >>> 8;
     $44 = $43&255;
     $45 = ((($buf$i2)) + 2|0);
     HEAP8[$45>>0] = $44;
     $46 = $37&255;
     $47 = ((($buf$i2)) + 3|0);
     HEAP8[$47>>0] = $46;
     _png_write_data($png_ptr,$buf$i2,4);
     STACKTOP = sp;return;
    }
   }
  }
 }
 _png_warning($png_ptr,17177);
 STACKTOP = sp;return;
}
function _png_write_start_row($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$pr = 0, $$pr1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 440|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($png_ptr)) + 437|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = Math_imul($5, $2)|0;
 $7 = ($6>>>0)>(7);
 $8 = ((($png_ptr)) + 348|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $10 = $6 >>> 3;
  $11 = Math_imul($10, $9)|0;
  $16 = $11;
 } else {
  $12 = Math_imul($6, $9)|0;
  $13 = (($12) + 7)|0;
  $14 = $13 >>> 3;
  $16 = $14;
 }
 $15 = (($16) + 1)|0;
 $17 = ((($png_ptr)) + 438|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ((($png_ptr)) + 443|0);
 HEAP8[$19>>0] = $18;
 $20 = $6&255;
 $21 = ((($png_ptr)) + 442|0);
 HEAP8[$21>>0] = $20;
 $22 = (_png_malloc($png_ptr,$15)|0);
 $23 = ((($png_ptr)) + 384|0);
 HEAP32[$23>>2] = $22;
 HEAP8[$22>>0] = 0;
 $24 = ((($png_ptr)) + 434|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & 16;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  $33 = $25;
 } else {
  $28 = ((($png_ptr)) + 364|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  $31 = (_png_malloc($png_ptr,$30)|0);
  $32 = ((($png_ptr)) + 388|0);
  HEAP32[$32>>2] = $31;
  HEAP8[$31>>0] = 1;
  $$pr = HEAP8[$24>>0]|0;
  $33 = $$pr;
 }
 $34 = ($33&255)>(31);
 if ($34) {
  $35 = (_png_calloc($png_ptr,$15)|0);
  $36 = ((($png_ptr)) + 380|0);
  HEAP32[$36>>2] = $35;
  $37 = HEAP8[$24>>0]|0;
  $38 = $37 & 32;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $46 = $37;
  } else {
   $40 = ((($png_ptr)) + 364|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 1)|0;
   $43 = (_png_malloc($png_ptr,$42)|0);
   $44 = ((($png_ptr)) + 392|0);
   HEAP32[$44>>2] = $43;
   HEAP8[$43>>0] = 2;
   $$pre = HEAP8[$24>>0]|0;
   $46 = $$pre;
  }
  $45 = $46 & 64;
  $47 = ($45<<24>>24)==(0);
  if ($47) {
   $53 = $46;
  } else {
   $48 = ((($png_ptr)) + 364|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 1)|0;
   $51 = (_png_malloc($png_ptr,$50)|0);
   $52 = ((($png_ptr)) + 396|0);
   HEAP32[$52>>2] = $51;
   HEAP8[$51>>0] = 3;
   $$pr1 = HEAP8[$24>>0]|0;
   $53 = $$pr1;
  }
  $54 = ($53<<24>>24)<(0);
  if ($54) {
   $55 = ((($png_ptr)) + 364|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 1)|0;
   $58 = (_png_malloc($png_ptr,$57)|0);
   $59 = ((($png_ptr)) + 400|0);
   HEAP32[$59>>2] = $58;
   HEAP8[$58>>0] = 4;
  }
 }
 $60 = ((($png_ptr)) + 432|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  $79 = ((($png_ptr)) + 352|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($png_ptr)) + 356|0);
  HEAP32[$81>>2] = $80;
  $82 = HEAP32[$8>>2]|0;
  $83 = ((($png_ptr)) + 360|0);
  HEAP32[$83>>2] = $82;
  return;
 }
 $63 = ((($png_ptr)) + 216|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 $67 = ((($png_ptr)) + 352|0);
 $68 = HEAP32[$67>>2]|0;
 if ($66) {
  $69 = (($68) + 7)|0;
  $70 = $69 >>> 3;
  $71 = ((($png_ptr)) + 356|0);
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$8>>2]|0;
  $73 = (($72) + 7)|0;
  $74 = $73 >>> 3;
  $75 = ((($png_ptr)) + 360|0);
  HEAP32[$75>>2] = $74;
  return;
 } else {
  $76 = ((($png_ptr)) + 356|0);
  HEAP32[$76>>2] = $68;
  $77 = HEAP32[$8>>2]|0;
  $78 = ((($png_ptr)) + 360|0);
  HEAP32[$78>>2] = $77;
  return;
 }
}
function _png_write_finish_row($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$lcssa = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 372|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($png_ptr)) + 356|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  return;
 }
 $6 = ((($png_ptr)) + 432|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  HEAP32[$0>>2] = 0;
  $9 = ((($png_ptr)) + 216|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 2;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($png_ptr)) + 348|0);
   $14 = ((($png_ptr)) + 433|0);
   $15 = ((($png_ptr)) + 360|0);
   $16 = ((($png_ptr)) + 352|0);
   $$promoted = HEAP8[$14>>0]|0;
   $21 = $$promoted;
   while(1) {
    $20 = (($21) + 1)<<24>>24;
    $22 = $20&255;
    $23 = ($20&255)>(6);
    if ($23) {
     $$lcssa = $20;
     break;
    }
    $24 = HEAP32[$13>>2]|0;
    $25 = (17215 + ($22)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = (17222 + ($22)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = (($24) + -1)|0;
    $32 = (($31) + ($27))|0;
    $33 = (($32) - ($30))|0;
    $34 = (($33>>>0) / ($27>>>0))&-1;
    HEAP32[$15>>2] = $34;
    $35 = HEAP32[$16>>2]|0;
    $36 = (17229 + ($22)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = (17236 + ($22)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = (($35) + -1)|0;
    $43 = (($42) + ($38))|0;
    $44 = (($43) - ($41))|0;
    $45 = (($44>>>0) / ($38>>>0))&-1;
    HEAP32[$3>>2] = $45;
    $46 = ($34|0)==(0);
    $47 = ($45|0)==(0);
    $or$cond = $47 | $46;
    if ($or$cond) {
     $21 = $20;
    } else {
     $$lcssa = $20;
     break;
    }
   }
   HEAP8[$14>>0] = $$lcssa;
   $48 = $$lcssa;
  } else {
   $17 = ((($png_ptr)) + 433|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = (($18) + 1)<<24>>24;
   HEAP8[$17>>0] = $19;
   $48 = $19;
  }
  $49 = ($48&255)<(7);
  if ($49) {
   $50 = ((($png_ptr)) + 380|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    return;
   }
   $53 = ((($png_ptr)) + 440|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ((($png_ptr)) + 437|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = Math_imul($58, $55)|0;
   $60 = ($59>>>0)>(7);
   $61 = ((($png_ptr)) + 348|0);
   $62 = HEAP32[$61>>2]|0;
   if ($60) {
    $63 = $59 >>> 3;
    $64 = Math_imul($63, $62)|0;
    $69 = $64;
   } else {
    $65 = Math_imul($59, $62)|0;
    $66 = (($65) + 7)|0;
    $67 = $66 >>> 3;
    $69 = $67;
   }
   $68 = (($69) + 1)|0;
   _memset(($51|0),0,($68|0))|0;
   return;
  }
 }
 _png_compress_IDAT($png_ptr,0,0,4);
 return;
}
function _png_do_write_interlace($row_info,$row,$pass) {
 $row_info = $row_info|0;
 $row = $row|0;
 $pass = $pass|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d$04 = 0, $d$1 = 0, $d$1$lcssa = 0, $d11$022 = 0, $d11$1 = 0, $d11$1$lcssa = 0, $d4$011 = 0, $d4$1 = 0, $d4$1$lcssa = 0, $dp$06 = 0, $dp$1 = 0, $dp$1$lcssa = 0, $dp16$01 = 0, $dp2$013 = 0, $dp2$1 = 0, $dp2$1$lcssa = 0, $dp9$020 = 0, $dp9$1 = 0, $dp9$1$lcssa = 0, $i$03 = 0;
 var $i13$023 = 0, $i17$02 = 0, $i6$010 = 0, $shift$05 = 0, $shift$1 = 0, $shift$1$lcssa = 0, $shift10$021 = 0, $shift10$1 = 0, $shift10$1$lcssa = 0, $shift3$012 = 0, $shift3$1 = 0, $shift3$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pass|0)<(6);
 if (!($0)) {
  return;
 }
 $1 = ((($row_info)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 switch ($3|0) {
 case 1:  {
  $4 = HEAP32[$row_info>>2]|0;
  $5 = (17222 + ($pass)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7>>>0)<($4>>>0);
  if ($8) {
   $9 = (17215 + ($pass)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $d$04 = 0;$dp$06 = $row;$i$03 = $7;$shift$05 = 7;
   while(1) {
    $12 = $i$03 >>> 3;
    $13 = (($row) + ($12)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = $i$03 & 7;
    $17 = $16 ^ 7;
    $18 = $15 >>> $17;
    $19 = $18 & 1;
    $20 = $19 << $shift$05;
    $21 = $20 | $d$04;
    $22 = ($shift$05|0)==(0);
    if ($22) {
     $23 = $21&255;
     $24 = ((($dp$06)) + 1|0);
     HEAP8[$dp$06>>0] = $23;
     $d$1 = 0;$dp$1 = $24;$shift$1 = 7;
    } else {
     $25 = (($shift$05) + -1)|0;
     $d$1 = $21;$dp$1 = $dp$06;$shift$1 = $25;
    }
    $26 = (($11) + ($i$03))|0;
    $27 = ($26>>>0)<($4>>>0);
    if ($27) {
     $d$04 = $d$1;$dp$06 = $dp$1;$i$03 = $26;$shift$05 = $shift$1;
    } else {
     $d$1$lcssa = $d$1;$dp$1$lcssa = $dp$1;$shift$1$lcssa = $shift$1;
     break;
    }
   }
   $28 = ($shift$1$lcssa|0)==(7);
   if ($28) {
    $$pre$phiZ2D = $row_info;$104 = $6;
   } else {
    $29 = $d$1$lcssa&255;
    HEAP8[$dp$1$lcssa>>0] = $29;
    $$pre$phiZ2D = $row_info;$104 = $6;
   }
  } else {
   $$pre$phiZ2D = $row_info;$104 = $6;
  }
  break;
 }
 case 2:  {
  $30 = HEAP32[$row_info>>2]|0;
  $31 = (17222 + ($pass)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33>>>0)<($30>>>0);
  if ($34) {
   $35 = (17215 + ($pass)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $d4$011 = 0;$dp2$013 = $row;$i6$010 = $33;$shift3$012 = 6;
   while(1) {
    $38 = $i6$010 >>> 2;
    $39 = (($row) + ($38)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $i6$010 << 1;
    $43 = $42 & 6;
    $44 = $43 ^ 6;
    $45 = $41 >>> $44;
    $46 = $45 & 3;
    $47 = $46 << $shift3$012;
    $48 = $47 | $d4$011;
    $49 = ($shift3$012|0)==(0);
    if ($49) {
     $50 = $48&255;
     $51 = ((($dp2$013)) + 1|0);
     HEAP8[$dp2$013>>0] = $50;
     $d4$1 = 0;$dp2$1 = $51;$shift3$1 = 6;
    } else {
     $52 = (($shift3$012) + -2)|0;
     $d4$1 = $48;$dp2$1 = $dp2$013;$shift3$1 = $52;
    }
    $53 = (($37) + ($i6$010))|0;
    $54 = ($53>>>0)<($30>>>0);
    if ($54) {
     $d4$011 = $d4$1;$dp2$013 = $dp2$1;$i6$010 = $53;$shift3$012 = $shift3$1;
    } else {
     $d4$1$lcssa = $d4$1;$dp2$1$lcssa = $dp2$1;$shift3$1$lcssa = $shift3$1;
     break;
    }
   }
   $55 = ($shift3$1$lcssa|0)==(6);
   if ($55) {
    $$pre$phiZ2D = $row_info;$104 = $32;
   } else {
    $56 = $d4$1$lcssa&255;
    HEAP8[$dp2$1$lcssa>>0] = $56;
    $$pre$phiZ2D = $row_info;$104 = $32;
   }
  } else {
   $$pre$phiZ2D = $row_info;$104 = $32;
  }
  break;
 }
 case 4:  {
  $57 = HEAP32[$row_info>>2]|0;
  $58 = (17222 + ($pass)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ($60>>>0)<($57>>>0);
  if ($61) {
   $62 = (17215 + ($pass)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $d11$022 = 0;$dp9$020 = $row;$i13$023 = $60;$shift10$021 = 4;
   while(1) {
    $65 = $i13$023 >>> 1;
    $66 = (($row) + ($65)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $i13$023 << 2;
    $70 = $69 & 4;
    $71 = $70 ^ 4;
    $72 = $68 >>> $71;
    $73 = $72 & 15;
    $74 = $73 << $shift10$021;
    $75 = $74 | $d11$022;
    $76 = ($shift10$021|0)==(0);
    if ($76) {
     $77 = $75&255;
     $78 = ((($dp9$020)) + 1|0);
     HEAP8[$dp9$020>>0] = $77;
     $d11$1 = 0;$dp9$1 = $78;$shift10$1 = 4;
    } else {
     $79 = (($shift10$021) + -4)|0;
     $d11$1 = $75;$dp9$1 = $dp9$020;$shift10$1 = $79;
    }
    $80 = (($64) + ($i13$023))|0;
    $81 = ($80>>>0)<($57>>>0);
    if ($81) {
     $d11$022 = $d11$1;$dp9$020 = $dp9$1;$i13$023 = $80;$shift10$021 = $shift10$1;
    } else {
     $d11$1$lcssa = $d11$1;$dp9$1$lcssa = $dp9$1;$shift10$1$lcssa = $shift10$1;
     break;
    }
   }
   $82 = ($shift10$1$lcssa|0)==(4);
   if ($82) {
    $$pre$phiZ2D = $row_info;$104 = $59;
   } else {
    $83 = $d11$1$lcssa&255;
    HEAP8[$dp9$1$lcssa>>0] = $83;
    $$pre$phiZ2D = $row_info;$104 = $59;
   }
  } else {
   $$pre$phiZ2D = $row_info;$104 = $59;
  }
  break;
 }
 default: {
  $84 = HEAP32[$row_info>>2]|0;
  $85 = $3 >>> 3;
  $86 = (17222 + ($pass)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = ($88>>>0)<($84>>>0);
  if ($89) {
   $90 = (17215 + ($pass)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $dp16$01 = $row;$i17$02 = $88;
   while(1) {
    $93 = Math_imul($i17$02, $85)|0;
    $94 = (($row) + ($93)|0);
    $95 = ($dp16$01|0)==($94|0);
    if (!($95)) {
     _memcpy(($dp16$01|0),($94|0),($85|0))|0;
    }
    $96 = (($dp16$01) + ($85)|0);
    $97 = (($92) + ($i17$02))|0;
    $98 = ($97>>>0)<($84>>>0);
    if ($98) {
     $dp16$01 = $96;$i17$02 = $97;
    } else {
     $$pre$phiZ2D = $row_info;$104 = $87;
     break;
    }
   }
  } else {
   $$pre$phiZ2D = $row_info;$104 = $87;
  }
 }
 }
 $99 = HEAP32[$$pre$phiZ2D>>2]|0;
 $100 = (17215 + ($pass)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $104&255;
 $105 = (($99) + -1)|0;
 $106 = (($105) + ($102))|0;
 $107 = (($106) - ($103))|0;
 $108 = (($107>>>0) / ($102>>>0))&-1;
 HEAP32[$$pre$phiZ2D>>2] = $108;
 $109 = HEAP8[$1>>0]|0;
 $110 = $109&255;
 $111 = ($109&255)>(7);
 if ($111) {
  $112 = $110 >>> 3;
  $113 = Math_imul($112, $108)|0;
  $118 = $113;
 } else {
  $114 = Math_imul($110, $108)|0;
  $115 = (($114) + 7)|0;
  $116 = $115 >>> 3;
  $118 = $116;
 }
 $117 = ((($row_info)) + 4|0);
 HEAP32[$117>>2] = $118;
 return;
}
function _png_write_find_filter($png_ptr,$row_info) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 var $$lcssa351 = 0, $$lcssa353 = 0, $$lcssa356 = 0, $$pn = 0, $$pn253 = 0, $$pn254 = 0, $$pn255 = 0, $$pn256 = 0, $$pn257 = 0, $$pn258 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best_row$0 = 0, $best_row$1 = 0, $best_row$2 = 0, $best_row$3 = 0, $cp$029 = 0, $cp56$056 = 0, $div = 0, $div6 = 0, $dp$0 = 0, $dp$0$lcssa = 0, $dp$0192 = 0, $dp$0195 = 0, $dp$1187 = 0;
 var $dp14$0151 = 0, $dp17$0170 = 0, $dp30$0 = 0, $dp30$0$lcssa = 0, $dp30$094 = 0, $dp30$098 = 0, $dp30$187 = 0, $dp35$0 = 0, $dp35$0$lcssa = 0, $dp35$0125 = 0, $dp35$0130 = 0, $dp35$1114 = 0, $dp4$0 = 0, $dp4$0$lcssa = 0, $dp4$0219 = 0, $dp4$0223 = 0, $dp4$1210 = 0, $dp49$0 = 0, $dp49$0$lcssa = 0, $dp49$034 = 0;
 var $dp49$038 = 0, $dp49$127 = 0, $dp54$0 = 0, $dp54$0$lcssa = 0, $dp54$065 = 0, $dp54$070 = 0, $dp54$154 = 0, $exitcond = 0, $exitcond295 = 0, $exitcond296 = 0, $exitcond300 = 0, $exitcond301 = 0, $exitcond302 = 0, $exitcond306 = 0, $exitcond307 = 0, $exitcond311 = 0, $exitcond312 = 0, $exitcond313 = 0, $exitcond314 = 0, $exitcond315 = 0;
 var $exitcond316 = 0, $exitcond319 = 0, $exitcond321 = 0, $exitcond324 = 0, $exitcond326 = 0, $exitcond327 = 0, $exitcond328 = 0, $i$0247 = 0, $i15$0149 = 0, $i2$0$lcssa = 0, $i2$0193 = 0, $i2$1186 = 0, $i21$0168 = 0, $i33$0$lcssa = 0, $i33$096 = 0, $i33$190 = 0, $i40$0$lcssa = 0, $i40$0128 = 0, $i40$1118 = 0, $i52$0$lcssa = 0;
 var $i52$037 = 0, $i52$131 = 0, $i60$0$lcssa = 0, $i60$069 = 0, $i60$159 = 0, $i7$0$lcssa = 0, $i7$0222 = 0, $i7$1213 = 0, $j$0238 = 0, $j10$0201 = 0, $j23$0178 = 0, $j26$0156 = 0, $j42$0138 = 0, $j45$0105 = 0, $j62$078 = 0, $j72$045 = 0, $j75$0$lcssa = 0, $j75$025 = 0, $j9$0230 = 0, $lmhi$0$lcssa = 0;
 var $lmhi$0231 = 0, $lmhi$1 = 0, $lmhi24$0$lcssa = 0, $lmhi24$0179 = 0, $lmhi24$1 = 0, $lmhi43$0$lcssa = 0, $lmhi43$0139 = 0, $lmhi43$1 = 0, $lmhi63$0$lcssa = 0, $lmhi63$079 = 0, $lmhi63$1 = 0, $lmins$0 = 0, $lmins20$0 = 0, $lmins39$0 = 0, $lmins59$0 = 0, $lmlo$0$lcssa = 0, $lmlo$0232 = 0, $lmlo$1 = 0, $lmlo25$0$lcssa = 0, $lmlo25$0180 = 0;
 var $lmlo25$1 = 0, $lmlo44$0$lcssa = 0, $lmlo44$0140 = 0, $lmlo44$1 = 0, $lmlo64$0$lcssa = 0, $lmlo64$080 = 0, $lmlo64$1 = 0, $lp$0188 = 0, $lp32$089 = 0, $lp37$0116 = 0, $lp5$0211 = 0, $lp51$030 = 0, $lp57$057 = 0, $mins$0 = 0, $mins$1 = 0, $mins$2 = 0, $mins$3 = 0, $or$cond = 0, $or$cond16 = 0, $or$cond17 = 0;
 var $or$cond329 = 0, $pp$0150 = 0, $pp18$0169 = 0, $pp31$0 = 0, $pp31$0$lcssa = 0, $pp31$093 = 0, $pp31$097 = 0, $pp31$188 = 0, $pp36$0 = 0, $pp36$0$lcssa = 0, $pp36$0124 = 0, $pp36$0129 = 0, $pp36$1115 = 0, $pp50$0$lcssa = 0, $pp50$036 = 0, $pp50$128 = 0, $pp55$0$lcssa = 0, $pp55$067 = 0, $pp55$155 = 0, $rp$0249 = 0;
 var $rp1$0$lcssa = 0, $rp1$0194 = 0, $rp1$1189 = 0, $rp13$0152 = 0, $rp16$0171 = 0, $rp29$0$lcssa = 0, $rp29$095 = 0, $rp29$186 = 0, $rp3$0$lcssa = 0, $rp3$0220 = 0, $rp3$1209 = 0, $rp34$0$lcssa = 0, $rp34$0126 = 0, $rp34$1113 = 0, $rp48$0$lcssa = 0, $rp48$035 = 0, $rp48$126 = 0, $rp53$0$lcssa = 0, $rp53$066 = 0, $rp53$153 = 0;
 var $scevgep = 0, $scevgep293 = 0, $scevgep294 = 0, $scevgep297 = 0, $scevgep298 = 0, $scevgep299 = 0, $scevgep303 = 0, $scevgep304 = 0, $scevgep305 = 0, $scevgep308 = 0, $scevgep309 = 0, $scevgep310 = 0, $scevgep317 = 0, $scevgep318 = 0, $scevgep322 = 0, $scevgep323 = 0, $smax = 0, $sum$0$lcssa = 0, $sum$0248 = 0, $sum19$0167 = 0;
 var $sum19$1 = 0, $sum19$2 = 0, $sum38$0$lcssa = 0, $sum38$0127 = 0, $sum38$1117 = 0, $sum38$2 = 0, $sum38$3 = 0, $sum58$0$lcssa = 0, $sum58$068 = 0, $sum58$158 = 0, $sum58$2 = 0, $sum58$3 = 0, $sum6$0$lcssa = 0, $sum6$0221 = 0, $sum6$1212 = 0, $sum6$2 = 0, $sum6$3 = 0, $sumhi$0$lcssa = 0, $sumhi$0240 = 0, $sumhi$1 = 0;
 var $sumhi11$0$lcssa = 0, $sumhi11$0202 = 0, $sumhi11$1 = 0, $sumhi27$0$lcssa = 0, $sumhi27$0157 = 0, $sumhi27$1 = 0, $sumhi46$0$lcssa = 0, $sumhi46$0106 = 0, $sumhi46$1 = 0, $sumhi73$0$lcssa = 0, $sumhi73$046 = 0, $sumhi73$1 = 0, $sumlo$0$lcssa = 0, $sumlo$0239 = 0, $sumlo$1 = 0, $sumlo12$0$lcssa = 0, $sumlo12$0203 = 0, $sumlo12$1 = 0, $sumlo28$0$lcssa = 0, $sumlo28$0158 = 0;
 var $sumlo28$1 = 0, $sumlo47$0$lcssa = 0, $sumlo47$0107 = 0, $sumlo47$1 = 0, $sumlo74$0$lcssa = 0, $sumlo74$047 = 0, $sumlo74$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 434|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ((($row_info)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($png_ptr)) + 621|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((($row_info)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) + 7)|0;
 $11 = $10 >>> 3;
 $12 = ((($png_ptr)) + 380|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($png_ptr)) + 384|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1&255;
 $17 = $16 & 8;
 $18 = ($17|0)==(0);
 $19 = ($1<<24>>24)==(8);
 $or$cond = $19 | $18;
 if ($or$cond) {
  $mins$0 = 2147483647;
 } else {
  $20 = ($3|0)==(0);
  if ($20) {
   $sum$0$lcssa = 0;
  } else {
   $$pn258 = $15;$i$0247 = 0;$sum$0248 = 0;
   while(1) {
    $rp$0249 = ((($$pn258)) + 1|0);
    $21 = HEAP8[$rp$0249>>0]|0;
    $22 = $21&255;
    $23 = ($21<<24>>24)>(-1);
    $24 = (256 - ($22))|0;
    $25 = $23 ? $22 : $24;
    $26 = (($25) + ($sum$0248))|0;
    $27 = (($i$0247) + 1)|0;
    $exitcond328 = ($27|0)==($3|0);
    if ($exitcond328) {
     $sum$0$lcssa = $26;
     break;
    } else {
     $$pn258 = $rp$0249;$i$0247 = $27;$sum$0248 = $26;
    }
   }
  }
  $28 = ((($png_ptr)) + 620|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)==(2);
  if ($30) {
   $31 = $sum$0$lcssa & 65535;
   $32 = $sum$0$lcssa >>> 10;
   $33 = $32 & 4194240;
   $34 = ($5<<24>>24)==(0);
   if ($34) {
    $sumhi$0$lcssa = $33;$sumlo$0$lcssa = $31;
   } else {
    $35 = ((($png_ptr)) + 624|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($png_ptr)) + 628|0);
    $j$0238 = 0;$sumhi$0240 = $33;$sumlo$0239 = $31;
    while(1) {
     $38 = (($36) + ($j$0238)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = (($41) + ($j$0238<<1)|0);
      $43 = HEAP16[$42>>1]|0;
      $44 = $43&65535;
      $45 = Math_imul($44, $sumlo$0239)|0;
      $46 = $45 >>> 8;
      $47 = Math_imul($44, $sumhi$0240)|0;
      $48 = $47 >>> 8;
      $sumhi$1 = $48;$sumlo$1 = $46;
     } else {
      $sumhi$1 = $sumhi$0240;$sumlo$1 = $sumlo$0239;
     }
     $49 = (($j$0238) + 1)|0;
     $exitcond327 = ($49|0)==($6|0);
     if ($exitcond327) {
      $sumhi$0$lcssa = $sumhi$1;$sumlo$0$lcssa = $sumlo$1;
      break;
     } else {
      $j$0238 = $49;$sumhi$0240 = $sumhi$1;$sumlo$0239 = $sumlo$1;
     }
    }
   }
   $50 = ((($png_ptr)) + 636|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $54 = Math_imul($53, $sumhi$0$lcssa)|0;
   $55 = ($54>>>0)>(33553927);
   if ($55) {
    $mins$0 = 2147483647;
   } else {
    $56 = $54 >>> 3;
    $57 = Math_imul($53, $sumlo$0$lcssa)|0;
    $58 = $57 >>> 3;
    $59 = $56 << 10;
    $60 = (($59) + ($58))|0;
    $mins$0 = $60;
   }
  } else {
   $mins$0 = $sum$0$lcssa;
  }
 }
 $61 = ($1<<24>>24)==(16);
 if ($61) {
  $62 = ((($15)) + 1|0);
  $63 = ((($png_ptr)) + 388|0);
  $64 = HEAP32[$63>>2]|0;
  $dp$0192 = ((($64)) + 1|0);
  $65 = ($11|0)==(0);
  if ($65) {
   $dp$0$lcssa = $dp$0192;$i2$0$lcssa = 0;$rp1$0$lcssa = $62;
  } else {
   $66 = (($11) + 1)|0;
   $scevgep317 = (($64) + ($66)|0);
   $dp$0195 = $dp$0192;$i2$0193 = 0;$rp1$0194 = $62;
   while(1) {
    $68 = HEAP8[$rp1$0194>>0]|0;
    HEAP8[$dp$0195>>0] = $68;
    $69 = (($i2$0193) + 1)|0;
    $70 = ((($rp1$0194)) + 1|0);
    $dp$0 = ((($dp$0195)) + 1|0);
    $exitcond319 = ($69|0)==($11|0);
    if ($exitcond319) {
     break;
    } else {
     $dp$0195 = $dp$0;$i2$0193 = $69;$rp1$0194 = $70;
    }
   }
   $scevgep318 = (($15) + ($66)|0);
   $dp$0$lcssa = $scevgep317;$i2$0$lcssa = $11;$rp1$0$lcssa = $scevgep318;
  }
  $67 = ($i2$0$lcssa>>>0)<($3>>>0);
  if ($67) {
   $dp$1187 = $dp$0$lcssa;$i2$1186 = $i2$0$lcssa;$lp$0188 = $62;$rp1$1189 = $rp1$0$lcssa;
   while(1) {
    $71 = HEAP8[$rp1$1189>>0]|0;
    $72 = $71&255;
    $73 = HEAP8[$lp$0188>>0]|0;
    $74 = $73&255;
    $75 = (($72) - ($74))|0;
    $76 = $75&255;
    HEAP8[$dp$1187>>0] = $76;
    $77 = (($i2$1186) + 1)|0;
    $78 = ((($rp1$1189)) + 1|0);
    $79 = ((($lp$0188)) + 1|0);
    $80 = ((($dp$1187)) + 1|0);
    $exitcond316 = ($77|0)==($3|0);
    if ($exitcond316) {
     break;
    } else {
     $dp$1187 = $80;$i2$1186 = $77;$lp$0188 = $79;$rp1$1189 = $78;
    }
   }
  }
  $81 = HEAP32[$63>>2]|0;
  $best_row$0 = $81;$mins$1 = $mins$0;
 } else {
  $82 = $16 & 16;
  $83 = ($82|0)==(0);
  if ($83) {
   $best_row$0 = $15;$mins$1 = $mins$0;
  } else {
   $84 = ((($png_ptr)) + 620|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)==(2);
   if ($86) {
    $87 = $mins$0 & 65535;
    $88 = $mins$0 >>> 10;
    $89 = $88 & 4194240;
    $90 = ($5<<24>>24)==(0);
    if ($90) {
     $lmhi$0$lcssa = $89;$lmlo$0$lcssa = $87;
    } else {
     $91 = ((($png_ptr)) + 624|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($png_ptr)) + 632|0);
     $j9$0230 = 0;$lmhi$0231 = $89;$lmlo$0232 = $87;
     while(1) {
      $94 = (($92) + ($j9$0230)|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = ($95<<24>>24)==(1);
      if ($96) {
       $97 = HEAP32[$93>>2]|0;
       $98 = (($97) + ($j9$0230<<1)|0);
       $99 = HEAP16[$98>>1]|0;
       $100 = $99&65535;
       $101 = Math_imul($100, $lmlo$0232)|0;
       $102 = $101 >>> 8;
       $103 = Math_imul($100, $lmhi$0231)|0;
       $104 = $103 >>> 8;
       $lmhi$1 = $104;$lmlo$1 = $102;
      } else {
       $lmhi$1 = $lmhi$0231;$lmlo$1 = $lmlo$0232;
      }
      $105 = (($j9$0230) + 1)|0;
      $exitcond326 = ($105|0)==($6|0);
      if ($exitcond326) {
       $lmhi$0$lcssa = $lmhi$1;$lmlo$0$lcssa = $lmlo$1;
       break;
      } else {
       $j9$0230 = $105;$lmhi$0231 = $lmhi$1;$lmlo$0232 = $lmlo$1;
      }
     }
    }
    $106 = ((($png_ptr)) + 640|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ((($107)) + 2|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109&65535;
    $111 = Math_imul($110, $lmhi$0$lcssa)|0;
    $112 = ($111>>>0)>(33553927);
    if ($112) {
     $lmins$0 = 2147483647;
    } else {
     $113 = $111 >>> 3;
     $114 = Math_imul($110, $lmlo$0$lcssa)|0;
     $115 = $114 >>> 3;
     $116 = $113 << 10;
     $117 = (($116) + ($115))|0;
     $lmins$0 = $117;
    }
   } else {
    $lmins$0 = $mins$0;
   }
   $118 = ((($15)) + 1|0);
   $119 = ((($png_ptr)) + 388|0);
   $120 = HEAP32[$119>>2]|0;
   $dp4$0219 = ((($120)) + 1|0);
   $121 = ($11|0)==(0);
   if ($121) {
    $dp4$0$lcssa = $dp4$0219;$i7$0$lcssa = 0;$rp3$0$lcssa = $118;$sum6$0$lcssa = 0;
   } else {
    $122 = (($11) + 1)|0;
    $scevgep322 = (($120) + ($122)|0);
    $dp4$0223 = $dp4$0219;$i7$0222 = 0;$rp3$0220 = $118;$sum6$0221 = 0;
    while(1) {
     $124 = HEAP8[$rp3$0220>>0]|0;
     HEAP8[$dp4$0223>>0] = $124;
     $125 = $124&255;
     $126 = ($124<<24>>24)>(-1);
     $127 = (256 - ($125))|0;
     $128 = $126 ? $125 : $127;
     $129 = (($128) + ($sum6$0221))|0;
     $130 = (($i7$0222) + 1)|0;
     $131 = ((($rp3$0220)) + 1|0);
     $dp4$0 = ((($dp4$0223)) + 1|0);
     $exitcond324 = ($130|0)==($11|0);
     if ($exitcond324) {
      $$lcssa356 = $129;
      break;
     } else {
      $dp4$0223 = $dp4$0;$i7$0222 = $130;$rp3$0220 = $131;$sum6$0221 = $129;
     }
    }
    $scevgep323 = (($15) + ($122)|0);
    $dp4$0$lcssa = $scevgep322;$i7$0$lcssa = $11;$rp3$0$lcssa = $scevgep323;$sum6$0$lcssa = $$lcssa356;
   }
   $123 = ($i7$0$lcssa>>>0)<($3>>>0);
   L50: do {
    if ($123) {
     $dp4$1210 = $dp4$0$lcssa;$i7$1213 = $i7$0$lcssa;$lp5$0211 = $118;$rp3$1209 = $rp3$0$lcssa;$sum6$1212 = $sum6$0$lcssa;
     while(1) {
      $132 = HEAP8[$rp3$1209>>0]|0;
      $133 = $132&255;
      $134 = HEAP8[$lp5$0211>>0]|0;
      $135 = $134&255;
      $136 = (($133) - ($135))|0;
      $137 = $136&255;
      HEAP8[$dp4$1210>>0] = $137;
      $138 = $136 & 255;
      $139 = ($138>>>0)<(128);
      $140 = (256 - ($138))|0;
      $141 = $139 ? $138 : $140;
      $142 = (($141) + ($sum6$1212))|0;
      $143 = ($142>>>0)>($lmins$0>>>0);
      if ($143) {
       $sum6$2 = $142;
       break L50;
      }
      $144 = (($i7$1213) + 1)|0;
      $145 = ((($rp3$1209)) + 1|0);
      $146 = ((($lp5$0211)) + 1|0);
      $147 = ((($dp4$1210)) + 1|0);
      $148 = ($144>>>0)<($3>>>0);
      if ($148) {
       $dp4$1210 = $147;$i7$1213 = $144;$lp5$0211 = $146;$rp3$1209 = $145;$sum6$1212 = $142;
      } else {
       $sum6$2 = $142;
       break;
      }
     }
    } else {
     $sum6$2 = $sum6$0$lcssa;
    }
   } while(0);
   $149 = HEAP8[$84>>0]|0;
   $150 = ($149<<24>>24)==(2);
   if ($150) {
    $151 = $sum6$2 & 65535;
    $152 = $sum6$2 >>> 10;
    $153 = $152 & 4194240;
    $154 = ($5<<24>>24)==(0);
    if ($154) {
     $sumhi11$0$lcssa = $153;$sumlo12$0$lcssa = $151;
    } else {
     $155 = ((($png_ptr)) + 624|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($png_ptr)) + 632|0);
     $j10$0201 = 0;$sumhi11$0202 = $153;$sumlo12$0203 = $151;
     while(1) {
      $158 = (($156) + ($j10$0201)|0);
      $159 = HEAP8[$158>>0]|0;
      $160 = ($159<<24>>24)==(1);
      if ($160) {
       $161 = HEAP32[$157>>2]|0;
       $162 = (($161) + ($j10$0201<<1)|0);
       $163 = HEAP16[$162>>1]|0;
       $164 = $163&65535;
       $165 = Math_imul($164, $sumlo12$0203)|0;
       $166 = $165 >>> 8;
       $167 = Math_imul($164, $sumhi11$0202)|0;
       $168 = $167 >>> 8;
       $sumhi11$1 = $168;$sumlo12$1 = $166;
      } else {
       $sumhi11$1 = $sumhi11$0202;$sumlo12$1 = $sumlo12$0203;
      }
      $169 = (($j10$0201) + 1)|0;
      $exitcond321 = ($169|0)==($6|0);
      if ($exitcond321) {
       $sumhi11$0$lcssa = $sumhi11$1;$sumlo12$0$lcssa = $sumlo12$1;
       break;
      } else {
       $j10$0201 = $169;$sumhi11$0202 = $sumhi11$1;$sumlo12$0203 = $sumlo12$1;
      }
     }
    }
    $170 = ((($png_ptr)) + 640|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ((($171)) + 2|0);
    $173 = HEAP16[$172>>1]|0;
    $174 = $173&65535;
    $175 = Math_imul($174, $sumhi11$0$lcssa)|0;
    $176 = ($175>>>0)>(33553927);
    if ($176) {
     $sum6$3 = 2147483647;
    } else {
     $177 = $175 >>> 3;
     $178 = Math_imul($174, $sumlo12$0$lcssa)|0;
     $179 = $178 >>> 3;
     $180 = $177 << 10;
     $181 = (($180) + ($179))|0;
     $sum6$3 = $181;
    }
   } else {
    $sum6$3 = $sum6$2;
   }
   $182 = ($sum6$3>>>0)<($mins$0>>>0);
   if ($182) {
    $183 = HEAP32[$119>>2]|0;
    $best_row$0 = $183;$mins$1 = $sum6$3;
   } else {
    $best_row$0 = $15;$mins$1 = $mins$0;
   }
  }
 }
 $184 = ($1<<24>>24)==(32);
 if ($184) {
  $185 = ((($png_ptr)) + 392|0);
  $186 = ($3|0)==(0);
  if (!($186)) {
   $187 = HEAP32[$185>>2]|0;
   $$pn255 = $15;$$pn256 = $187;$$pn257 = $13;$i15$0149 = 0;
   while(1) {
    $pp$0150 = ((($$pn257)) + 1|0);
    $dp14$0151 = ((($$pn256)) + 1|0);
    $rp13$0152 = ((($$pn255)) + 1|0);
    $188 = HEAP8[$rp13$0152>>0]|0;
    $189 = $188&255;
    $190 = HEAP8[$pp$0150>>0]|0;
    $191 = $190&255;
    $192 = (($189) - ($191))|0;
    $193 = $192&255;
    HEAP8[$dp14$0151>>0] = $193;
    $194 = (($i15$0149) + 1)|0;
    $exitcond313 = ($194|0)==($3|0);
    if ($exitcond313) {
     break;
    } else {
     $$pn255 = $rp13$0152;$$pn256 = $dp14$0151;$$pn257 = $pp$0150;$i15$0149 = $194;
    }
   }
  }
  $195 = HEAP32[$185>>2]|0;
  $best_row$1 = $195;$mins$2 = $mins$1;
 } else {
  $196 = $16 & 32;
  $197 = ($196|0)==(0);
  if ($197) {
   $best_row$1 = $best_row$0;$mins$2 = $mins$1;
  } else {
   $198 = ((($png_ptr)) + 620|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = ($199<<24>>24)==(2);
   if ($200) {
    $201 = $mins$1 & 65535;
    $202 = $mins$1 >>> 10;
    $203 = $202 & 4194240;
    $204 = ($5<<24>>24)==(0);
    if ($204) {
     $lmhi24$0$lcssa = $203;$lmlo25$0$lcssa = $201;
    } else {
     $205 = ((($png_ptr)) + 624|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = ((($png_ptr)) + 632|0);
     $j23$0178 = 0;$lmhi24$0179 = $203;$lmlo25$0180 = $201;
     while(1) {
      $208 = (($206) + ($j23$0178)|0);
      $209 = HEAP8[$208>>0]|0;
      $210 = ($209<<24>>24)==(2);
      if ($210) {
       $211 = HEAP32[$207>>2]|0;
       $212 = (($211) + ($j23$0178<<1)|0);
       $213 = HEAP16[$212>>1]|0;
       $214 = $213&65535;
       $215 = Math_imul($214, $lmlo25$0180)|0;
       $216 = $215 >>> 8;
       $217 = Math_imul($214, $lmhi24$0179)|0;
       $218 = $217 >>> 8;
       $lmhi24$1 = $218;$lmlo25$1 = $216;
      } else {
       $lmhi24$1 = $lmhi24$0179;$lmlo25$1 = $lmlo25$0180;
      }
      $219 = (($j23$0178) + 1)|0;
      $exitcond315 = ($219|0)==($6|0);
      if ($exitcond315) {
       $lmhi24$0$lcssa = $lmhi24$1;$lmlo25$0$lcssa = $lmlo25$1;
       break;
      } else {
       $j23$0178 = $219;$lmhi24$0179 = $lmhi24$1;$lmlo25$0180 = $lmlo25$1;
      }
     }
    }
    $220 = ((($png_ptr)) + 640|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = ((($221)) + 4|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223&65535;
    $225 = Math_imul($224, $lmhi24$0$lcssa)|0;
    $226 = ($225>>>0)>(33553927);
    if ($226) {
     $lmins20$0 = 2147483647;
    } else {
     $227 = $225 >>> 3;
     $228 = Math_imul($224, $lmlo25$0$lcssa)|0;
     $229 = $228 >>> 3;
     $230 = $227 << 10;
     $231 = (($230) + ($229))|0;
     $lmins20$0 = $231;
    }
   } else {
    $lmins20$0 = $mins$1;
   }
   $232 = ((($png_ptr)) + 392|0);
   $233 = ($3|0)==(0);
   if ($233) {
    $sum19$1 = 0;
   } else {
    $234 = HEAP32[$232>>2]|0;
    $$pn = $15;$$pn253 = $234;$$pn254 = $13;$i21$0168 = 0;$sum19$0167 = 0;
    while(1) {
     $pp18$0169 = ((($$pn254)) + 1|0);
     $dp17$0170 = ((($$pn253)) + 1|0);
     $rp16$0171 = ((($$pn)) + 1|0);
     $235 = HEAP8[$rp16$0171>>0]|0;
     $236 = $235&255;
     $237 = HEAP8[$pp18$0169>>0]|0;
     $238 = $237&255;
     $239 = (($236) - ($238))|0;
     $240 = $239&255;
     HEAP8[$dp17$0170>>0] = $240;
     $241 = $239 & 255;
     $242 = ($241>>>0)<(128);
     $243 = (256 - ($241))|0;
     $244 = $242 ? $241 : $243;
     $245 = (($244) + ($sum19$0167))|0;
     $246 = ($245>>>0)<=($lmins20$0>>>0);
     $247 = (($i21$0168) + 1)|0;
     $248 = ($247>>>0)<($3>>>0);
     $or$cond329 = $246 & $248;
     if ($or$cond329) {
      $$pn = $rp16$0171;$$pn253 = $dp17$0170;$$pn254 = $pp18$0169;$i21$0168 = $247;$sum19$0167 = $245;
     } else {
      $sum19$1 = $245;
      break;
     }
    }
   }
   $249 = HEAP8[$198>>0]|0;
   $250 = ($249<<24>>24)==(2);
   if ($250) {
    $251 = $sum19$1 & 65535;
    $252 = $sum19$1 >>> 10;
    $253 = $252 & 4194240;
    $254 = ($5<<24>>24)==(0);
    if ($254) {
     $sumhi27$0$lcssa = $253;$sumlo28$0$lcssa = $251;
    } else {
     $255 = ((($png_ptr)) + 624|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = ((($png_ptr)) + 628|0);
     $j26$0156 = 0;$sumhi27$0157 = $253;$sumlo28$0158 = $251;
     while(1) {
      $258 = (($256) + ($j26$0156)|0);
      $259 = HEAP8[$258>>0]|0;
      $260 = ($259<<24>>24)==(2);
      if ($260) {
       $261 = HEAP32[$257>>2]|0;
       $262 = (($261) + ($j26$0156<<1)|0);
       $263 = HEAP16[$262>>1]|0;
       $264 = $263&65535;
       $265 = Math_imul($264, $sumlo28$0158)|0;
       $266 = $265 >>> 8;
       $267 = Math_imul($264, $sumhi27$0157)|0;
       $268 = $267 >>> 8;
       $sumhi27$1 = $268;$sumlo28$1 = $266;
      } else {
       $sumhi27$1 = $sumhi27$0157;$sumlo28$1 = $sumlo28$0158;
      }
      $269 = (($j26$0156) + 1)|0;
      $exitcond314 = ($269|0)==($6|0);
      if ($exitcond314) {
       $sumhi27$0$lcssa = $sumhi27$1;$sumlo28$0$lcssa = $sumlo28$1;
       break;
      } else {
       $j26$0156 = $269;$sumhi27$0157 = $sumhi27$1;$sumlo28$0158 = $sumlo28$1;
      }
     }
    }
    $270 = ((($png_ptr)) + 636|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ((($271)) + 4|0);
    $273 = HEAP16[$272>>1]|0;
    $274 = $273&65535;
    $275 = Math_imul($274, $sumhi27$0$lcssa)|0;
    $276 = ($275>>>0)>(33553927);
    if ($276) {
     $sum19$2 = 2147483647;
    } else {
     $277 = $275 >>> 3;
     $278 = Math_imul($274, $sumlo28$0$lcssa)|0;
     $279 = $278 >>> 3;
     $280 = $277 << 10;
     $281 = (($280) + ($279))|0;
     $sum19$2 = $281;
    }
   } else {
    $sum19$2 = $sum19$1;
   }
   $282 = ($sum19$2>>>0)<($mins$1>>>0);
   if ($282) {
    $283 = HEAP32[$232>>2]|0;
    $best_row$1 = $283;$mins$2 = $sum19$2;
   } else {
    $best_row$1 = $best_row$0;$mins$2 = $mins$1;
   }
  }
 }
 $284 = ($1<<24>>24)==(64);
 if ($284) {
  $285 = ((($15)) + 1|0);
  $286 = ((($png_ptr)) + 396|0);
  $287 = HEAP32[$286>>2]|0;
  $pp31$093 = ((($13)) + 1|0);
  $dp30$094 = ((($287)) + 1|0);
  $288 = ($11|0)==(0);
  if ($288) {
   $dp30$0$lcssa = $dp30$094;$i33$0$lcssa = 0;$pp31$0$lcssa = $pp31$093;$rp29$0$lcssa = $285;
  } else {
   $289 = (($11) + 1)|0;
   $scevgep304 = (($13) + ($289)|0);
   $dp30$098 = $dp30$094;$i33$096 = 0;$pp31$097 = $pp31$093;$rp29$095 = $285;
   while(1) {
    $291 = ((($rp29$095)) + 1|0);
    $292 = HEAP8[$rp29$095>>0]|0;
    $293 = $292&255;
    $294 = HEAP8[$pp31$097>>0]|0;
    $div6 = ($294&255) >>> 1;
    $295 = $div6&255;
    $296 = (($293) - ($295))|0;
    $297 = $296&255;
    HEAP8[$dp30$098>>0] = $297;
    $298 = (($i33$096) + 1)|0;
    $pp31$0 = ((($pp31$097)) + 1|0);
    $dp30$0 = ((($dp30$098)) + 1|0);
    $exitcond306 = ($298|0)==($11|0);
    if ($exitcond306) {
     break;
    } else {
     $dp30$098 = $dp30$0;$i33$096 = $298;$pp31$097 = $pp31$0;$rp29$095 = $291;
    }
   }
   $scevgep303 = (($287) + ($289)|0);
   $scevgep305 = (($15) + ($289)|0);
   $dp30$0$lcssa = $scevgep303;$i33$0$lcssa = $11;$pp31$0$lcssa = $scevgep304;$rp29$0$lcssa = $scevgep305;
  }
  $290 = ($i33$0$lcssa>>>0)<($3>>>0);
  if ($290) {
   $dp30$187 = $dp30$0$lcssa;$i33$190 = $i33$0$lcssa;$lp32$089 = $285;$pp31$188 = $pp31$0$lcssa;$rp29$186 = $rp29$0$lcssa;
   while(1) {
    $299 = ((($rp29$186)) + 1|0);
    $300 = HEAP8[$rp29$186>>0]|0;
    $301 = $300&255;
    $302 = ((($pp31$188)) + 1|0);
    $303 = HEAP8[$pp31$188>>0]|0;
    $304 = $303&255;
    $305 = ((($lp32$089)) + 1|0);
    $306 = HEAP8[$lp32$089>>0]|0;
    $307 = $306&255;
    $308 = (($307) + ($304))|0;
    $309 = $308 >>> 1;
    $310 = (($301) - ($309))|0;
    $311 = $310&255;
    $312 = ((($dp30$187)) + 1|0);
    HEAP8[$dp30$187>>0] = $311;
    $313 = (($i33$190) + 1)|0;
    $exitcond302 = ($313|0)==($3|0);
    if ($exitcond302) {
     break;
    } else {
     $dp30$187 = $312;$i33$190 = $313;$lp32$089 = $305;$pp31$188 = $302;$rp29$186 = $299;
    }
   }
  }
  $314 = HEAP32[$286>>2]|0;
  $best_row$2 = $314;$mins$3 = $mins$2;
 } else {
  $315 = $16 & 64;
  $316 = ($315|0)==(0);
  if ($316) {
   $best_row$2 = $best_row$1;$mins$3 = $mins$2;
  } else {
   $317 = ((($png_ptr)) + 620|0);
   $318 = HEAP8[$317>>0]|0;
   $319 = ($318<<24>>24)==(2);
   if ($319) {
    $320 = $mins$2 & 65535;
    $321 = $mins$2 >>> 10;
    $322 = $321 & 4194240;
    $323 = ($5<<24>>24)==(0);
    if ($323) {
     $lmhi43$0$lcssa = $322;$lmlo44$0$lcssa = $320;
    } else {
     $324 = ((($png_ptr)) + 624|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ((($png_ptr)) + 632|0);
     $j42$0138 = 0;$lmhi43$0139 = $322;$lmlo44$0140 = $320;
     while(1) {
      $327 = (($325) + ($j42$0138)|0);
      $328 = HEAP8[$327>>0]|0;
      $329 = ($328<<24>>24)==(3);
      if ($329) {
       $330 = HEAP32[$326>>2]|0;
       $331 = (($330) + ($j42$0138<<1)|0);
       $332 = HEAP16[$331>>1]|0;
       $333 = $332&65535;
       $334 = Math_imul($333, $lmlo44$0140)|0;
       $335 = $334 >>> 8;
       $336 = Math_imul($333, $lmhi43$0139)|0;
       $337 = $336 >>> 8;
       $lmhi43$1 = $337;$lmlo44$1 = $335;
      } else {
       $lmhi43$1 = $lmhi43$0139;$lmlo44$1 = $lmlo44$0140;
      }
      $338 = (($j42$0138) + 1)|0;
      $exitcond312 = ($338|0)==($6|0);
      if ($exitcond312) {
       $lmhi43$0$lcssa = $lmhi43$1;$lmlo44$0$lcssa = $lmlo44$1;
       break;
      } else {
       $j42$0138 = $338;$lmhi43$0139 = $lmhi43$1;$lmlo44$0140 = $lmlo44$1;
      }
     }
    }
    $339 = ((($png_ptr)) + 640|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = ((($340)) + 6|0);
    $342 = HEAP16[$341>>1]|0;
    $343 = $342&65535;
    $344 = Math_imul($343, $lmhi43$0$lcssa)|0;
    $345 = ($344>>>0)>(33553927);
    if ($345) {
     $lmins39$0 = 2147483647;
    } else {
     $346 = $344 >>> 3;
     $347 = Math_imul($343, $lmlo44$0$lcssa)|0;
     $348 = $347 >>> 3;
     $349 = $346 << 10;
     $350 = (($349) + ($348))|0;
     $lmins39$0 = $350;
    }
   } else {
    $lmins39$0 = $mins$2;
   }
   $351 = ((($15)) + 1|0);
   $352 = ((($png_ptr)) + 396|0);
   $353 = HEAP32[$352>>2]|0;
   $pp36$0124 = ((($13)) + 1|0);
   $dp35$0125 = ((($353)) + 1|0);
   $354 = ($11|0)==(0);
   if ($354) {
    $dp35$0$lcssa = $dp35$0125;$i40$0$lcssa = 0;$pp36$0$lcssa = $pp36$0124;$rp34$0$lcssa = $351;$sum38$0$lcssa = 0;
   } else {
    $355 = (($11) + 1)|0;
    $scevgep309 = (($13) + ($355)|0);
    $dp35$0130 = $dp35$0125;$i40$0128 = 0;$pp36$0129 = $pp36$0124;$rp34$0126 = $351;$sum38$0127 = 0;
    while(1) {
     $357 = ((($rp34$0126)) + 1|0);
     $358 = HEAP8[$rp34$0126>>0]|0;
     $359 = $358&255;
     $360 = HEAP8[$pp36$0129>>0]|0;
     $div = ($360&255) >>> 1;
     $361 = $div&255;
     $362 = (($359) - ($361))|0;
     $363 = $362&255;
     HEAP8[$dp35$0130>>0] = $363;
     $364 = $362 & 255;
     $365 = ($364>>>0)<(128);
     $366 = (256 - ($364))|0;
     $367 = $365 ? $364 : $366;
     $368 = (($367) + ($sum38$0127))|0;
     $369 = (($i40$0128) + 1)|0;
     $pp36$0 = ((($pp36$0129)) + 1|0);
     $dp35$0 = ((($dp35$0130)) + 1|0);
     $exitcond311 = ($369|0)==($11|0);
     if ($exitcond311) {
      $$lcssa353 = $368;
      break;
     } else {
      $dp35$0130 = $dp35$0;$i40$0128 = $369;$pp36$0129 = $pp36$0;$rp34$0126 = $357;$sum38$0127 = $368;
     }
    }
    $scevgep308 = (($353) + ($355)|0);
    $scevgep310 = (($15) + ($355)|0);
    $dp35$0$lcssa = $scevgep308;$i40$0$lcssa = $11;$pp36$0$lcssa = $scevgep309;$rp34$0$lcssa = $scevgep310;$sum38$0$lcssa = $$lcssa353;
   }
   $356 = ($i40$0$lcssa>>>0)<($3>>>0);
   L141: do {
    if ($356) {
     $dp35$1114 = $dp35$0$lcssa;$i40$1118 = $i40$0$lcssa;$lp37$0116 = $351;$pp36$1115 = $pp36$0$lcssa;$rp34$1113 = $rp34$0$lcssa;$sum38$1117 = $sum38$0$lcssa;
     while(1) {
      $370 = HEAP8[$rp34$1113>>0]|0;
      $371 = $370&255;
      $372 = HEAP8[$pp36$1115>>0]|0;
      $373 = $372&255;
      $374 = HEAP8[$lp37$0116>>0]|0;
      $375 = $374&255;
      $376 = (($375) + ($373))|0;
      $377 = $376 >>> 1;
      $378 = (($371) - ($377))|0;
      $379 = $378&255;
      HEAP8[$dp35$1114>>0] = $379;
      $380 = $378 & 255;
      $381 = ($380>>>0)<(128);
      $382 = (256 - ($380))|0;
      $383 = $381 ? $380 : $382;
      $384 = (($383) + ($sum38$1117))|0;
      $385 = ($384>>>0)>($lmins39$0>>>0);
      if ($385) {
       $sum38$2 = $384;
       break L141;
      }
      $386 = ((($dp35$1114)) + 1|0);
      $387 = ((($lp37$0116)) + 1|0);
      $388 = ((($pp36$1115)) + 1|0);
      $389 = ((($rp34$1113)) + 1|0);
      $390 = (($i40$1118) + 1)|0;
      $391 = ($390>>>0)<($3>>>0);
      if ($391) {
       $dp35$1114 = $386;$i40$1118 = $390;$lp37$0116 = $387;$pp36$1115 = $388;$rp34$1113 = $389;$sum38$1117 = $384;
      } else {
       $sum38$2 = $384;
       break;
      }
     }
    } else {
     $sum38$2 = $sum38$0$lcssa;
    }
   } while(0);
   $392 = HEAP8[$317>>0]|0;
   $393 = ($392<<24>>24)==(2);
   if ($393) {
    $394 = $sum38$2 & 65535;
    $395 = $sum38$2 >>> 10;
    $396 = $395 & 4194240;
    $397 = ($5<<24>>24)==(0);
    if ($397) {
     $sumhi46$0$lcssa = $396;$sumlo47$0$lcssa = $394;
    } else {
     $398 = ((($png_ptr)) + 624|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = ((($png_ptr)) + 628|0);
     $j45$0105 = 0;$sumhi46$0106 = $396;$sumlo47$0107 = $394;
     while(1) {
      $401 = (($399) + ($j45$0105)|0);
      $402 = HEAP8[$401>>0]|0;
      $403 = ($402<<24>>24)==(0);
      if ($403) {
       $404 = HEAP32[$400>>2]|0;
       $405 = (($404) + ($j45$0105<<1)|0);
       $406 = HEAP16[$405>>1]|0;
       $407 = $406&65535;
       $408 = Math_imul($407, $sumlo47$0107)|0;
       $409 = $408 >>> 8;
       $410 = Math_imul($407, $sumhi46$0106)|0;
       $411 = $410 >>> 8;
       $sumhi46$1 = $411;$sumlo47$1 = $409;
      } else {
       $sumhi46$1 = $sumhi46$0106;$sumlo47$1 = $sumlo47$0107;
      }
      $412 = (($j45$0105) + 1)|0;
      $exitcond307 = ($412|0)==($6|0);
      if ($exitcond307) {
       $sumhi46$0$lcssa = $sumhi46$1;$sumlo47$0$lcssa = $sumlo47$1;
       break;
      } else {
       $j45$0105 = $412;$sumhi46$0106 = $sumhi46$1;$sumlo47$0107 = $sumlo47$1;
      }
     }
    }
    $413 = ((($png_ptr)) + 636|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = ((($414)) + 6|0);
    $416 = HEAP16[$415>>1]|0;
    $417 = $416&65535;
    $418 = Math_imul($417, $sumhi46$0$lcssa)|0;
    $419 = ($418>>>0)>(33553927);
    if ($419) {
     $sum38$3 = 2147483647;
    } else {
     $420 = $418 >>> 3;
     $421 = Math_imul($417, $sumlo47$0$lcssa)|0;
     $422 = $421 >>> 3;
     $423 = $420 << 10;
     $424 = (($423) + ($422))|0;
     $sum38$3 = $424;
    }
   } else {
    $sum38$3 = $sum38$2;
   }
   $425 = ($sum38$3>>>0)<($mins$2>>>0);
   if ($425) {
    $426 = HEAP32[$352>>2]|0;
    $best_row$2 = $426;$mins$3 = $sum38$3;
   } else {
    $best_row$2 = $best_row$1;$mins$3 = $mins$2;
   }
  }
 }
 $427 = ($1<<24>>24)==(-128);
 if ($427) {
  $428 = ((($15)) + 1|0);
  $429 = ((($png_ptr)) + 400|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = ((($13)) + 1|0);
  $dp49$034 = ((($430)) + 1|0);
  $432 = ($11|0)==(0);
  if ($432) {
   $dp49$0$lcssa = $dp49$034;$i52$0$lcssa = 0;$pp50$0$lcssa = $431;$rp48$0$lcssa = $428;
  } else {
   $433 = (($11) + 1)|0;
   $scevgep293 = (($13) + ($433)|0);
   $dp49$038 = $dp49$034;$i52$037 = 0;$pp50$036 = $431;$rp48$035 = $428;
   while(1) {
    $435 = ((($rp48$035)) + 1|0);
    $436 = HEAP8[$rp48$035>>0]|0;
    $437 = $436&255;
    $438 = ((($pp50$036)) + 1|0);
    $439 = HEAP8[$pp50$036>>0]|0;
    $440 = $439&255;
    $441 = (($437) - ($440))|0;
    $442 = $441&255;
    HEAP8[$dp49$038>>0] = $442;
    $443 = (($i52$037) + 1)|0;
    $dp49$0 = ((($dp49$038)) + 1|0);
    $exitcond295 = ($443|0)==($11|0);
    if ($exitcond295) {
     break;
    } else {
     $dp49$038 = $dp49$0;$i52$037 = $443;$pp50$036 = $438;$rp48$035 = $435;
    }
   }
   $scevgep = (($430) + ($433)|0);
   $scevgep294 = (($15) + ($433)|0);
   $dp49$0$lcssa = $scevgep;$i52$0$lcssa = $11;$pp50$0$lcssa = $scevgep293;$rp48$0$lcssa = $scevgep294;
  }
  $434 = ($i52$0$lcssa>>>0)<($3>>>0);
  if ($434) {
   $cp$029 = $431;$dp49$127 = $dp49$0$lcssa;$i52$131 = $i52$0$lcssa;$lp51$030 = $428;$pp50$128 = $pp50$0$lcssa;$rp48$126 = $rp48$0$lcssa;
   while(1) {
    $444 = ((($pp50$128)) + 1|0);
    $445 = HEAP8[$pp50$128>>0]|0;
    $446 = $445&255;
    $447 = ((($cp$029)) + 1|0);
    $448 = HEAP8[$cp$029>>0]|0;
    $449 = $448&255;
    $450 = ((($lp51$030)) + 1|0);
    $451 = HEAP8[$lp51$030>>0]|0;
    $452 = $451&255;
    $453 = (($446) - ($449))|0;
    $454 = (($452) - ($449))|0;
    $455 = ($453|0)<(0);
    $456 = (0 - ($453))|0;
    $457 = $455 ? $456 : $453;
    $458 = ($454|0)<(0);
    $459 = (0 - ($454))|0;
    $460 = $458 ? $459 : $454;
    $461 = (($454) + ($453))|0;
    $462 = ($461|0)<(0);
    $463 = (0 - ($461))|0;
    $464 = $462 ? $463 : $461;
    $465 = ($457|0)>($460|0);
    $466 = ($457|0)>($464|0);
    $or$cond16 = $465 | $466;
    $467 = ($460|0)<=($464|0);
    $468 = $467 ? $446 : $449;
    $469 = $or$cond16 ? $468 : $452;
    $470 = ((($rp48$126)) + 1|0);
    $471 = HEAP8[$rp48$126>>0]|0;
    $472 = $471&255;
    $473 = (($472) - ($469))|0;
    $474 = $473&255;
    $475 = ((($dp49$127)) + 1|0);
    HEAP8[$dp49$127>>0] = $474;
    $476 = (($i52$131) + 1)|0;
    $exitcond = ($476|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $cp$029 = $447;$dp49$127 = $475;$i52$131 = $476;$lp51$030 = $450;$pp50$128 = $444;$rp48$126 = $470;
    }
   }
  }
  $477 = HEAP32[$429>>2]|0;
  $best_row$3 = $477;
 } else {
  $478 = $16 & 128;
  $479 = ($478|0)==(0);
  if ($479) {
   $best_row$3 = $best_row$2;
  } else {
   $480 = ((($png_ptr)) + 620|0);
   $481 = HEAP8[$480>>0]|0;
   $482 = ($481<<24>>24)==(2);
   if ($482) {
    $483 = $mins$3 & 65535;
    $484 = $mins$3 >>> 10;
    $485 = $484 & 4194240;
    $486 = ($5<<24>>24)==(0);
    if ($486) {
     $lmhi63$0$lcssa = $485;$lmlo64$0$lcssa = $483;
    } else {
     $487 = ((($png_ptr)) + 624|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = ((($png_ptr)) + 632|0);
     $j62$078 = 0;$lmhi63$079 = $485;$lmlo64$080 = $483;
     while(1) {
      $490 = (($488) + ($j62$078)|0);
      $491 = HEAP8[$490>>0]|0;
      $492 = ($491<<24>>24)==(4);
      if ($492) {
       $493 = HEAP32[$489>>2]|0;
       $494 = (($493) + ($j62$078<<1)|0);
       $495 = HEAP16[$494>>1]|0;
       $496 = $495&65535;
       $497 = Math_imul($496, $lmlo64$080)|0;
       $498 = $497 >>> 8;
       $499 = Math_imul($496, $lmhi63$079)|0;
       $500 = $499 >>> 8;
       $lmhi63$1 = $500;$lmlo64$1 = $498;
      } else {
       $lmhi63$1 = $lmhi63$079;$lmlo64$1 = $lmlo64$080;
      }
      $501 = (($j62$078) + 1)|0;
      $exitcond301 = ($501|0)==($6|0);
      if ($exitcond301) {
       $lmhi63$0$lcssa = $lmhi63$1;$lmlo64$0$lcssa = $lmlo64$1;
       break;
      } else {
       $j62$078 = $501;$lmhi63$079 = $lmhi63$1;$lmlo64$080 = $lmlo64$1;
      }
     }
    }
    $502 = ((($png_ptr)) + 640|0);
    $503 = HEAP32[$502>>2]|0;
    $504 = ((($503)) + 8|0);
    $505 = HEAP16[$504>>1]|0;
    $506 = $505&65535;
    $507 = Math_imul($506, $lmhi63$0$lcssa)|0;
    $508 = ($507>>>0)>(33553927);
    if ($508) {
     $lmins59$0 = 2147483647;
    } else {
     $509 = $507 >>> 3;
     $510 = Math_imul($506, $lmlo64$0$lcssa)|0;
     $511 = $510 >>> 3;
     $512 = $509 << 10;
     $513 = (($512) + ($511))|0;
     $lmins59$0 = $513;
    }
   } else {
    $lmins59$0 = $mins$3;
   }
   $514 = ((($15)) + 1|0);
   $515 = ((($png_ptr)) + 400|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = ((($13)) + 1|0);
   $dp54$065 = ((($516)) + 1|0);
   $518 = ($11|0)==(0);
   if ($518) {
    $dp54$0$lcssa = $dp54$065;$i60$0$lcssa = 0;$pp55$0$lcssa = $517;$rp53$0$lcssa = $514;$sum58$0$lcssa = 0;
   } else {
    $519 = (($11) + 1)|0;
    $scevgep298 = (($13) + ($519)|0);
    $dp54$070 = $dp54$065;$i60$069 = 0;$pp55$067 = $517;$rp53$066 = $514;$sum58$068 = 0;
    while(1) {
     $521 = ((($rp53$066)) + 1|0);
     $522 = HEAP8[$rp53$066>>0]|0;
     $523 = $522&255;
     $524 = ((($pp55$067)) + 1|0);
     $525 = HEAP8[$pp55$067>>0]|0;
     $526 = $525&255;
     $527 = (($523) - ($526))|0;
     $528 = $527&255;
     HEAP8[$dp54$070>>0] = $528;
     $529 = $527 & 255;
     $530 = ($529>>>0)<(128);
     $531 = (256 - ($529))|0;
     $532 = $530 ? $529 : $531;
     $533 = (($532) + ($sum58$068))|0;
     $534 = (($i60$069) + 1)|0;
     $dp54$0 = ((($dp54$070)) + 1|0);
     $exitcond300 = ($534|0)==($11|0);
     if ($exitcond300) {
      $$lcssa351 = $533;
      break;
     } else {
      $dp54$070 = $dp54$0;$i60$069 = $534;$pp55$067 = $524;$rp53$066 = $521;$sum58$068 = $533;
     }
    }
    $scevgep297 = (($516) + ($519)|0);
    $scevgep299 = (($15) + ($519)|0);
    $dp54$0$lcssa = $scevgep297;$i60$0$lcssa = $11;$pp55$0$lcssa = $scevgep298;$rp53$0$lcssa = $scevgep299;$sum58$0$lcssa = $$lcssa351;
   }
   $520 = ($i60$0$lcssa>>>0)<($3>>>0);
   L192: do {
    if ($520) {
     $cp56$056 = $517;$dp54$154 = $dp54$0$lcssa;$i60$159 = $i60$0$lcssa;$lp57$057 = $514;$pp55$155 = $pp55$0$lcssa;$rp53$153 = $rp53$0$lcssa;$sum58$158 = $sum58$0$lcssa;
     while(1) {
      $535 = HEAP8[$pp55$155>>0]|0;
      $536 = $535&255;
      $537 = HEAP8[$cp56$056>>0]|0;
      $538 = $537&255;
      $539 = HEAP8[$lp57$057>>0]|0;
      $540 = $539&255;
      $541 = (($536) - ($538))|0;
      $542 = (($540) - ($538))|0;
      $543 = ($541|0)<(0);
      $544 = (0 - ($541))|0;
      $545 = $543 ? $544 : $541;
      $546 = ($542|0)<(0);
      $547 = (0 - ($542))|0;
      $548 = $546 ? $547 : $542;
      $549 = (($542) + ($541))|0;
      $550 = ($549|0)<(0);
      $551 = (0 - ($549))|0;
      $552 = $550 ? $551 : $549;
      $553 = ($545|0)>($548|0);
      $554 = ($545|0)>($552|0);
      $or$cond17 = $553 | $554;
      $555 = ($548|0)<=($552|0);
      $556 = $555 ? $536 : $538;
      $557 = $or$cond17 ? $556 : $540;
      $558 = HEAP8[$rp53$153>>0]|0;
      $559 = $558&255;
      $560 = (($559) - ($557))|0;
      $561 = $560&255;
      HEAP8[$dp54$154>>0] = $561;
      $562 = $560 & 255;
      $563 = ($562>>>0)<(128);
      $564 = (256 - ($562))|0;
      $565 = $563 ? $562 : $564;
      $566 = (($565) + ($sum58$158))|0;
      $567 = ($566>>>0)>($lmins59$0>>>0);
      if ($567) {
       $sum58$2 = $566;
       break L192;
      }
      $568 = ((($lp57$057)) + 1|0);
      $569 = ((($cp56$056)) + 1|0);
      $570 = ((($pp55$155)) + 1|0);
      $571 = ((($dp54$154)) + 1|0);
      $572 = ((($rp53$153)) + 1|0);
      $573 = (($i60$159) + 1)|0;
      $574 = ($573>>>0)<($3>>>0);
      if ($574) {
       $cp56$056 = $569;$dp54$154 = $571;$i60$159 = $573;$lp57$057 = $568;$pp55$155 = $570;$rp53$153 = $572;$sum58$158 = $566;
      } else {
       $sum58$2 = $566;
       break;
      }
     }
    } else {
     $sum58$2 = $sum58$0$lcssa;
    }
   } while(0);
   $575 = HEAP8[$480>>0]|0;
   $576 = ($575<<24>>24)==(2);
   if ($576) {
    $577 = $sum58$2 & 65535;
    $578 = $sum58$2 >>> 10;
    $579 = $578 & 4194240;
    $580 = ($5<<24>>24)==(0);
    if ($580) {
     $sumhi73$0$lcssa = $579;$sumlo74$0$lcssa = $577;
    } else {
     $581 = ((($png_ptr)) + 624|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = ((($png_ptr)) + 628|0);
     $j72$045 = 0;$sumhi73$046 = $579;$sumlo74$047 = $577;
     while(1) {
      $584 = (($582) + ($j72$045)|0);
      $585 = HEAP8[$584>>0]|0;
      $586 = ($585<<24>>24)==(4);
      if ($586) {
       $587 = HEAP32[$583>>2]|0;
       $588 = (($587) + ($j72$045<<1)|0);
       $589 = HEAP16[$588>>1]|0;
       $590 = $589&65535;
       $591 = Math_imul($590, $sumlo74$047)|0;
       $592 = $591 >>> 8;
       $593 = Math_imul($590, $sumhi73$046)|0;
       $594 = $593 >>> 8;
       $sumhi73$1 = $594;$sumlo74$1 = $592;
      } else {
       $sumhi73$1 = $sumhi73$046;$sumlo74$1 = $sumlo74$047;
      }
      $595 = (($j72$045) + 1)|0;
      $exitcond296 = ($595|0)==($6|0);
      if ($exitcond296) {
       $sumhi73$0$lcssa = $sumhi73$1;$sumlo74$0$lcssa = $sumlo74$1;
       break;
      } else {
       $j72$045 = $595;$sumhi73$046 = $sumhi73$1;$sumlo74$047 = $sumlo74$1;
      }
     }
    }
    $596 = ((($png_ptr)) + 636|0);
    $597 = HEAP32[$596>>2]|0;
    $598 = ((($597)) + 8|0);
    $599 = HEAP16[$598>>1]|0;
    $600 = $599&65535;
    $601 = Math_imul($600, $sumhi73$0$lcssa)|0;
    $602 = ($601>>>0)>(33553927);
    if ($602) {
     $sum58$3 = 2147483647;
    } else {
     $603 = $601 >>> 3;
     $604 = Math_imul($600, $sumlo74$0$lcssa)|0;
     $605 = $604 >>> 3;
     $606 = $603 << 10;
     $607 = (($606) + ($605))|0;
     $sum58$3 = $607;
    }
   } else {
    $sum58$3 = $sum58$2;
   }
   $608 = ($sum58$3>>>0)<($mins$3>>>0);
   if ($608) {
    $609 = HEAP32[$515>>2]|0;
    $best_row$3 = $609;
   } else {
    $best_row$3 = $best_row$2;
   }
  }
 }
 $610 = HEAP32[$2>>2]|0;
 $611 = (($610) + 1)|0;
 _png_compress_IDAT($png_ptr,$best_row$3,$611,0);
 $612 = HEAP32[$12>>2]|0;
 $613 = ($612|0)==(0|0);
 if (!($613)) {
  $614 = HEAP32[$14>>2]|0;
  HEAP32[$12>>2] = $614;
  HEAP32[$14>>2] = $612;
 }
 _png_write_finish_row($png_ptr);
 $615 = ((($png_ptr)) + 480|0);
 $616 = HEAP32[$615>>2]|0;
 $617 = (($616) + 1)|0;
 HEAP32[$615>>2] = $617;
 $618 = ((($png_ptr)) + 476|0);
 $619 = HEAP32[$618>>2]|0;
 $620 = (($619) + -1)|0;
 $621 = ($620>>>0)<($617>>>0);
 if ($621) {
  _png_write_flush($png_ptr);
 }
 $622 = HEAP8[$4>>0]|0;
 $623 = ($622<<24>>24)==(0);
 if ($623) {
  return;
 }
 $624 = ($5&255)>(1);
 $625 = ((($png_ptr)) + 624|0);
 if ($624) {
  $626 = ($6>>>0)>(2);
  $j75$025 = 1;
  while(1) {
   $627 = (($j75$025) + -1)|0;
   $628 = HEAP32[$625>>2]|0;
   $629 = (($628) + ($627)|0);
   $630 = HEAP8[$629>>0]|0;
   $631 = (($628) + ($j75$025)|0);
   HEAP8[$631>>0] = $630;
   $632 = (($j75$025) + 1)|0;
   $633 = ($632|0)<($6|0);
   if ($633) {
    $j75$025 = $632;
   } else {
    break;
   }
  }
  $smax = $626 ? $6 : 2;
  $j75$0$lcssa = $smax;
 } else {
  $j75$0$lcssa = 1;
 }
 $634 = HEAP8[$best_row$3>>0]|0;
 $635 = HEAP32[$625>>2]|0;
 $636 = (($635) + ($j75$0$lcssa)|0);
 HEAP8[$636>>0] = $634;
 return;
}
function _png_format_buffer($png_ptr$0$44$val,$buffer,$error_message) {
 $png_ptr$0$44$val = $png_ptr$0$44$val|0;
 $buffer = $buffer|0;
 $error_message = $error_message|0;
 var $$off = 0, $$off$1 = 0, $$off$2 = 0, $$off$3 = 0, $$off2 = 0, $$off2$1 = 0, $$off2$2 = 0, $$off2$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $iin$02 = 0, $iout$0$be = 0, $iout$0$be$1 = 0, $iout$0$be$2 = 0, $iout$0$be$3 = 0, $iout$1$lcssa = 0, $iout$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $png_ptr$0$44$val >>> 24;
 $$off = (($0) + -65)|0;
 $1 = ($$off>>>0)>(57);
 $$off2 = (($0) + -91)|0;
 $2 = ($$off2>>>0)<(6);
 $3 = $1 | $2;
 if ($3) {
  HEAP8[$buffer>>0] = 91;
  $4 = $png_ptr$0$44$val >>> 28;
  $5 = (22700 + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($buffer)) + 1|0);
  HEAP8[$7>>0] = $6;
  $8 = $0 & 15;
  $9 = (22700 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($buffer)) + 2|0);
  HEAP8[$11>>0] = $10;
  $12 = ((($buffer)) + 3|0);
  HEAP8[$12>>0] = 93;
  $iout$0$be = 4;
 } else {
  $13 = $0&255;
  HEAP8[$buffer>>0] = $13;
  $iout$0$be = 1;
 }
 $14 = $png_ptr$0$44$val >>> 16;
 $15 = $14 & 255;
 $$off$1 = (($15) + -65)|0;
 $16 = ($$off$1>>>0)>(57);
 $$off2$1 = (($15) + -91)|0;
 $17 = ($$off2$1>>>0)<(6);
 $18 = $16 | $17;
 if ($18) {
  $35 = (($iout$0$be) + 1)|0;
  $36 = (($buffer) + ($iout$0$be)|0);
  HEAP8[$36>>0] = 91;
  $37 = $png_ptr$0$44$val >>> 20;
  $38 = $37 & 15;
  $39 = (22700 + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $iout$0$be | 2;
  $42 = (($buffer) + ($35)|0);
  HEAP8[$42>>0] = $40;
  $43 = $14 & 15;
  $44 = (22700 + ($43)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = (($iout$0$be) + 3)|0;
  $47 = (($buffer) + ($41)|0);
  HEAP8[$47>>0] = $45;
  $48 = (($iout$0$be) + 4)|0;
  $49 = (($buffer) + ($46)|0);
  HEAP8[$49>>0] = 93;
  $iout$0$be$1 = $48;
 } else {
  $32 = $14&255;
  $33 = (($iout$0$be) + 1)|0;
  $34 = (($buffer) + ($iout$0$be)|0);
  HEAP8[$34>>0] = $32;
  $iout$0$be$1 = $33;
 }
 $50 = $png_ptr$0$44$val >>> 8;
 $51 = $50 & 255;
 $$off$2 = (($51) + -65)|0;
 $52 = ($$off$2>>>0)>(57);
 $$off2$2 = (($51) + -91)|0;
 $53 = ($$off2$2>>>0)<(6);
 $54 = $52 | $53;
 if ($54) {
  $58 = (($iout$0$be$1) + 1)|0;
  $59 = (($buffer) + ($iout$0$be$1)|0);
  HEAP8[$59>>0] = 91;
  $60 = $png_ptr$0$44$val >>> 12;
  $61 = $60 & 15;
  $62 = (22700 + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = (($iout$0$be$1) + 2)|0;
  $65 = (($buffer) + ($58)|0);
  HEAP8[$65>>0] = $63;
  $66 = $50 & 15;
  $67 = (22700 + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = (($iout$0$be$1) + 3)|0;
  $70 = (($buffer) + ($64)|0);
  HEAP8[$70>>0] = $68;
  $71 = (($iout$0$be$1) + 4)|0;
  $72 = (($buffer) + ($69)|0);
  HEAP8[$72>>0] = 93;
  $iout$0$be$2 = $71;
 } else {
  $55 = $50&255;
  $56 = (($iout$0$be$1) + 1)|0;
  $57 = (($buffer) + ($iout$0$be$1)|0);
  HEAP8[$57>>0] = $55;
  $iout$0$be$2 = $56;
 }
 $73 = $png_ptr$0$44$val & 255;
 $$off$3 = (($73) + -65)|0;
 $74 = ($$off$3>>>0)>(57);
 $$off2$3 = (($73) + -91)|0;
 $75 = ($$off2$3>>>0)<(6);
 $76 = $74 | $75;
 if ($76) {
  $80 = (($iout$0$be$2) + 1)|0;
  $81 = (($buffer) + ($iout$0$be$2)|0);
  HEAP8[$81>>0] = 91;
  $82 = $png_ptr$0$44$val >>> 4;
  $83 = $82 & 15;
  $84 = (22700 + ($83)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = (($iout$0$be$2) + 2)|0;
  $87 = (($buffer) + ($80)|0);
  HEAP8[$87>>0] = $85;
  $88 = $png_ptr$0$44$val & 15;
  $89 = (22700 + ($88)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = (($iout$0$be$2) + 3)|0;
  $92 = (($buffer) + ($86)|0);
  HEAP8[$92>>0] = $90;
  $93 = (($iout$0$be$2) + 4)|0;
  $94 = (($buffer) + ($91)|0);
  HEAP8[$94>>0] = 93;
  $iout$0$be$3 = $93;
 } else {
  $77 = $png_ptr$0$44$val&255;
  $78 = (($iout$0$be$2) + 1)|0;
  $79 = (($buffer) + ($iout$0$be$2)|0);
  HEAP8[$79>>0] = $77;
  $iout$0$be$3 = $78;
 }
 $95 = ($error_message|0)==(0|0);
 if ($95) {
  $19 = (($buffer) + ($iout$0$be$3)|0);
  HEAP8[$19>>0] = 0;
  return;
 }
 $20 = (($iout$0$be$3) + 1)|0;
 $21 = (($buffer) + ($iout$0$be$3)|0);
 HEAP8[$21>>0] = 58;
 $22 = (($iout$0$be$3) + 2)|0;
 $23 = (($buffer) + ($20)|0);
 HEAP8[$23>>0] = 32;
 $iin$02 = 0;$iout$11 = $22;
 while(1) {
  $24 = (($error_message) + ($iin$02)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(0);
  if ($26) {
   $iout$1$lcssa = $iout$11;
   break;
  }
  $27 = (($iin$02) + 1)|0;
  $28 = (($iout$11) + 1)|0;
  $29 = (($buffer) + ($iout$11)|0);
  HEAP8[$29>>0] = $25;
  $30 = ($27|0)<(195);
  if ($30) {
   $iin$02 = $27;$iout$11 = $28;
  } else {
   $iout$1$lcssa = $28;
   break;
  }
 }
 $31 = (($buffer) + ($iout$1$lcssa)|0);
 HEAP8[$31>>0] = 0;
 return;
}
function _png_image_size($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa39 = 0, $$lcssa40 = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $cb_base$0$ph = 0, $cb_base$0$ph$us = 0, $pass$0 = 0, $pass$0$lcssa41 = 0, $pass$0$ph = 0;
 var $pass$0$ph$us = 0, $pass$0$us = 0, $pass$0$us$lcssa38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($png_ptr)) + 352|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($png_ptr)) + 364|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = ($4>>>0)<(32768);
 if (!($5)) {
  $$0 = -1;
  return ($$0|0);
 }
 $6 = ((($png_ptr)) + 432|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $86 = (($3) + 1)|0;
  $87 = Math_imul($86, $1)|0;
  $$0 = $87;
  return ($$0|0);
 }
 $9 = ((($png_ptr)) + 348|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($png_ptr)) + 438|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($10) + -1)|0;
 $15 = ($12&255)>(7);
 $16 = $13 >>> 3;
 $17 = (($1) + -1)|0;
 if ($15) {
  $cb_base$0$ph$us = 0;$pass$0$ph$us = 0;
  L9: while(1) {
   $pass$0$us = $pass$0$ph$us;
   while(1) {
    $50 = ($pass$0$us|0)<(7);
    if (!($50)) {
     $$0 = $cb_base$0$ph$us;
     break L9;
    }
    $18 = ($pass$0$us|0)>(1);
    $19 = (7 - ($pass$0$us))|0;
    $20 = $19 >> 1;
    $21 = $18 ? $20 : 3;
    $22 = 1 << $21;
    $23 = $pass$0$us & 1;
    $24 = (($pass$0$us) + 1)|0;
    $25 = $24 >> 1;
    $26 = (3 - ($25))|0;
    $27 = $23 << $26;
    $28 = $27 & 7;
    $29 = (($14) + ($22))|0;
    $30 = (($29) - ($28))|0;
    $31 = $30 >>> $21;
    $32 = ($31|0)==(0);
    if ($32) {
     $pass$0$us = $24;
    } else {
     $$lcssa = $23;$$lcssa39 = $24;$$lcssa40 = $31;$pass$0$us$lcssa38 = $pass$0$us;
     break;
    }
   }
   $33 = Math_imul($$lcssa40, $16)|0;
   $34 = (($33) + 1)|0;
   $35 = ($pass$0$us$lcssa38|0)>(2);
   $36 = (8 - ($pass$0$us$lcssa38))|0;
   $37 = $36 >> 1;
   $38 = $35 ? $37 : 3;
   $39 = 1 << $38;
   $40 = $$lcssa ^ 1;
   $41 = $pass$0$us$lcssa38 >> 1;
   $42 = (3 - ($41))|0;
   $43 = $40 << $42;
   $44 = $43 & 7;
   $45 = (($17) + ($39))|0;
   $46 = (($45) - ($44))|0;
   $47 = $46 >>> $38;
   $48 = Math_imul($34, $47)|0;
   $49 = (($48) + ($cb_base$0$ph$us))|0;
   $cb_base$0$ph$us = $49;$pass$0$ph$us = $$lcssa39;
  }
  return ($$0|0);
 } else {
  $cb_base$0$ph = 0;$pass$0$ph = 0;
  L16: while(1) {
   $pass$0 = $pass$0$ph;
   while(1) {
    $51 = ($pass$0|0)<(7);
    if (!($51)) {
     $$0 = $cb_base$0$ph;
     break L16;
    }
    $52 = ($pass$0|0)>(1);
    $53 = (7 - ($pass$0))|0;
    $54 = $53 >> 1;
    $55 = $52 ? $54 : 3;
    $56 = 1 << $55;
    $57 = $pass$0 & 1;
    $58 = (($pass$0) + 1)|0;
    $59 = $58 >> 1;
    $60 = (3 - ($59))|0;
    $61 = $57 << $60;
    $62 = $61 & 7;
    $63 = (($14) + ($56))|0;
    $64 = (($63) - ($62))|0;
    $65 = $64 >>> $55;
    $66 = ($65|0)==(0);
    if ($66) {
     $pass$0 = $58;
    } else {
     $$lcssa42 = $57;$$lcssa43 = $58;$$lcssa44 = $65;$pass$0$lcssa41 = $pass$0;
     break;
    }
   }
   $67 = Math_imul($$lcssa44, $13)|0;
   $68 = (($67) + 7)|0;
   $69 = $68 >>> 3;
   $70 = (($69) + 1)|0;
   $71 = ($pass$0$lcssa41|0)>(2);
   $72 = (8 - ($pass$0$lcssa41))|0;
   $73 = $72 >> 1;
   $74 = $71 ? $73 : 3;
   $75 = 1 << $74;
   $76 = $$lcssa42 ^ 1;
   $77 = $pass$0$lcssa41 >> 1;
   $78 = (3 - ($77))|0;
   $79 = $76 << $78;
   $80 = $79 & 7;
   $81 = (($17) + ($75))|0;
   $82 = (($81) - ($80))|0;
   $83 = $82 >>> $74;
   $84 = Math_imul($70, $83)|0;
   $85 = (($84) + ($cb_base$0$ph))|0;
   $cb_base$0$ph = $85;$pass$0$ph = $$lcssa43;
  }
  return ($$0|0);
 }
 return (0)|0;
}
function _png_deflate_claim($png_ptr,$owner,$data_size) {
 $png_ptr = $png_ptr|0;
 $owner = $owner|0;
 $data_size = $data_size|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $half_window_size$06 = 0, $level$0 = 0, $memLevel$0 = 0, $method$0 = 0, $msg = 0, $not$ = 0, $ret$04 = 0, $strategy$0 = 0, $windowBits$0 = 0, $windowBits$15 = 0, $windowBits$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp;
 $0 = ((($png_ptr)) + 220|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = $owner >>> 24;
   $4 = $3&255;
   HEAP8[$msg>>0] = $4;
   $5 = $owner >>> 16;
   $6 = $5&255;
   $7 = ((($msg)) + 1|0);
   HEAP8[$7>>0] = $6;
   $8 = $owner >>> 8;
   $9 = $8&255;
   $10 = ((($msg)) + 2|0);
   HEAP8[$10>>0] = $9;
   $11 = $owner&255;
   $12 = ((($msg)) + 3|0);
   HEAP8[$12>>0] = $11;
   $13 = ((($msg)) + 4|0);
   HEAP8[$13>>0] = 58;
   $14 = ((($msg)) + 5|0);
   HEAP8[$14>>0] = 32;
   $15 = $1 >>> 24;
   $16 = $15&255;
   $17 = ((($msg)) + 6|0);
   HEAP8[$17>>0] = $16;
   $18 = $1 >>> 16;
   $19 = $18&255;
   $20 = ((($msg)) + 7|0);
   HEAP8[$20>>0] = $19;
   $21 = $1 >>> 8;
   $22 = $21&255;
   $23 = ((($msg)) + 8|0);
   HEAP8[$23>>0] = $22;
   $24 = $1&255;
   $25 = ((($msg)) + 9|0);
   HEAP8[$25>>0] = $24;
   (_png_safecat($msg,64,10,17321)|0);
   _png_warning($png_ptr,$msg);
   $26 = HEAP32[$0>>2]|0;
   $27 = ($26|0)==(1229209940);
   if (!($27)) {
    HEAP32[$0>>2] = 0;
    break;
   }
   $28 = ((($png_ptr)) + 248|0);
   HEAP32[$28>>2] = 17336;
   $$1 = -2;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $29 = ((($png_ptr)) + 288|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($png_ptr)) + 292|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($png_ptr)) + 296|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($png_ptr)) + 300|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($owner|0)==(1229209940);
 do {
  if ($37) {
   $38 = ((($png_ptr)) + 212|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 & 1;
   $41 = ($40|0)==(0);
   if ($41) {
    $44 = ((($png_ptr)) + 434|0);
    $45 = HEAP8[$44>>0]|0;
    $not$ = ($45<<24>>24)!=(8);
    $$ = $not$&1;
    $level$0 = $30;$memLevel$0 = $36;$method$0 = $32;$strategy$0 = $$;$windowBits$0 = $34;
    break;
   } else {
    $42 = ((($png_ptr)) + 304|0);
    $43 = HEAP32[$42>>2]|0;
    $level$0 = $30;$memLevel$0 = $36;$method$0 = $32;$strategy$0 = $43;$windowBits$0 = $34;
    break;
   }
  } else {
   $46 = ((($png_ptr)) + 308|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($png_ptr)) + 312|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($png_ptr)) + 316|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($png_ptr)) + 320|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($png_ptr)) + 324|0);
   $55 = HEAP32[$54>>2]|0;
   $level$0 = $47;$memLevel$0 = $53;$method$0 = $49;$strategy$0 = $55;$windowBits$0 = $51;
  }
 } while(0);
 $56 = ($data_size>>>0)<(16385);
 if ($56) {
  $57 = (($windowBits$0) + -1)|0;
  $58 = 1 << $57;
  $59 = (($data_size) + 262)|0;
  $60 = ($59>>>0)>($58>>>0);
  if ($60) {
   $windowBits$2 = $windowBits$0;
  } else {
   $half_window_size$06 = $58;$windowBits$15 = $windowBits$0;
   while(1) {
    $61 = $half_window_size$06 >>> 1;
    $62 = (($windowBits$15) + -1)|0;
    $63 = ($59>>>0)>($61>>>0);
    if ($63) {
     $windowBits$2 = $62;
     break;
    } else {
     $half_window_size$06 = $61;$windowBits$15 = $62;
    }
   }
  }
 } else {
  $windowBits$2 = $windowBits$0;
 }
 $64 = ((($png_ptr)) + 212|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 & 2;
 $67 = ($66|0)==(0);
 do {
  if ($67) {
   $93 = $65;
  } else {
   $68 = ((($png_ptr)) + 328|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==($level$0|0);
   if ($70) {
    $71 = ((($png_ptr)) + 332|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==($method$0|0);
    if ($73) {
     $74 = ((($png_ptr)) + 336|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==($windowBits$2|0);
     if ($76) {
      $77 = ((($png_ptr)) + 340|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78|0)==($memLevel$0|0);
      if ($79) {
       $80 = ((($png_ptr)) + 344|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($strategy$0|0);
       if ($82) {
        $93 = $65;
        break;
       }
      }
     }
    }
   }
   $83 = ((($png_ptr)) + 224|0);
   $84 = (_deflateEnd($83)|0);
   $85 = ($84|0)==(0);
   if (!($85)) {
    _png_warning($png_ptr,17351);
   }
   $86 = HEAP32[$64>>2]|0;
   $87 = $86 & -3;
   HEAP32[$64>>2] = $87;
   $93 = $87;
  }
 } while(0);
 $88 = ((($png_ptr)) + 224|0);
 HEAP32[$88>>2] = 0;
 $89 = ((($png_ptr)) + 228|0);
 HEAP32[$89>>2] = 0;
 $90 = ((($png_ptr)) + 236|0);
 HEAP32[$90>>2] = 0;
 $91 = ((($png_ptr)) + 240|0);
 HEAP32[$91>>2] = 0;
 $92 = $93 & 2;
 $94 = ($92|0)==(0);
 if ($94) {
  $95 = (_deflateInit2_($88,$level$0,$method$0,$windowBits$2,$memLevel$0,$strategy$0,17379,56)|0);
  $96 = ($95|0)==(0);
  if ($96) {
   $97 = HEAP32[$64>>2]|0;
   $98 = $97 | 2;
   HEAP32[$64>>2] = $98;
   label = 26;
  } else {
   $ret$04 = $95;
   label = 27;
  }
 } else {
  $99 = (_deflateReset($88)|0);
  $100 = ($99|0)==(0);
  if ($100) {
   label = 26;
  } else {
   $ret$04 = $99;
   label = 27;
  }
 }
 if ((label|0) == 26) {
  HEAP32[$0>>2] = $owner;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 else if ((label|0) == 27) {
  _png_zstream_error($png_ptr,$ret$04);
  $$1 = $ret$04;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _png_check_keyword($png_ptr,$key,$new_key) {
 $png_ptr = $png_ptr|0;
 $key = $key|0;
 $new_key = $new_key|0;
 var $$0 = 0, $$02$lcssa = 0, $$02$ph40 = 0, $$0216$us29 = 0, $$03$ph$be = 0, $$03$ph$lcssa = 0, $$03$ph33 = 0, $$1 = 0, $$bad_character$0$us32 = 0, $$bad_character$06 = 0, $$lcssa = 0, $$lcssa11 = 0, $$off$us$us = 0, $$off$us30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bad_character$0$ = 0, $bad_character$0$lcssa = 0, $bad_character$0$lcssa9 = 0, $bad_character$0$ph$be = 0, $bad_character$0$ph48 = 0, $bad_character$017$us28 = 0, $bad_character$1 = 0, $key_len$0$ph$be = 0, $key_len$0$ph$lcssa = 0, $key_len$0$ph41 = 0, $key_len$1 = 0, $or$cond = 0, $or$cond5$us$us = 0, $or$cond5$us31 = 0;
 var $p = 0, $space$0$ph$be = 0, $space$0$ph$lcssa = 0, $space$0$ph49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $0 = ($key|0)==(0|0);
 if ($0) {
  HEAP8[$new_key>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$key>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  HEAP8[$new_key>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$02$ph40 = $key;$$03$ph33 = $new_key;$10 = $1;$bad_character$0$ph48 = 0;$key_len$0$ph41 = 0;$space$0$ph49 = 1;
 }
 L8: while(1) {
  $8 = ($space$0$ph49|0)==(0);
  L10: do {
   if ($8) {
    $9 = ((($$02$ph40)) + 1|0);
    $$off$us$us = (($10) + -33)<<24>>24;
    $11 = ($$off$us$us&255)<(94);
    $12 = ($10&255)>(160);
    $or$cond5$us$us = $12 | $11;
    if ($or$cond5$us$us) {
     $$lcssa = $9;$$lcssa11 = $10;$bad_character$0$lcssa9 = $bad_character$0$ph48;
     label = 5;
    } else {
     $21 = $10&255;
     HEAP8[$$03$ph33>>0] = 32;
     $22 = ($10<<24>>24)==(32);
     $bad_character$0$ = $22 ? $bad_character$0$ph48 : $21;
     $4 = $9;$bad_character$0$ph$be = $bad_character$0$;$space$0$ph$be = 1;
    }
   } else {
    $$0216$us29 = $$02$ph40;$14 = $10;$bad_character$017$us28 = $bad_character$0$ph48;
    while(1) {
     $13 = ((($$0216$us29)) + 1|0);
     $$off$us30 = (($14) + -33)<<24>>24;
     $15 = ($$off$us30&255)<(94);
     $16 = ($14&255)>(160);
     $or$cond5$us31 = $16 | $15;
     if ($or$cond5$us31) {
      $$lcssa = $13;$$lcssa11 = $14;$bad_character$0$lcssa9 = $bad_character$017$us28;
      label = 5;
      break L10;
     }
     $17 = $14&255;
     $18 = ($bad_character$017$us28|0)==(0);
     $$bad_character$0$us32 = $18 ? $17 : $bad_character$017$us28;
     $19 = HEAP8[$13>>0]|0;
     $20 = ($19<<24>>24)==(0);
     if ($20) {
      $$02$lcssa = $13;$$03$ph$lcssa = $$03$ph33;$bad_character$0$lcssa = $$bad_character$0$us32;$key_len$0$ph$lcssa = $key_len$0$ph41;$space$0$ph$lcssa = $space$0$ph49;
      break L8;
     } else {
      $$0216$us29 = $13;$14 = $19;$bad_character$017$us28 = $$bad_character$0$us32;
     }
    }
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   HEAP8[$$03$ph33>>0] = $$lcssa11;
   $4 = $$lcssa;$bad_character$0$ph$be = $bad_character$0$lcssa9;$space$0$ph$be = 0;
  }
  $key_len$0$ph$be = (($key_len$0$ph41) + 1)|0;
  $$03$ph$be = ((($$03$ph33)) + 1|0);
  $3 = HEAP8[$4>>0]|0;
  $5 = ($3<<24>>24)!=(0);
  $6 = ($key_len$0$ph$be>>>0)<(79);
  $7 = $6 & $5;
  if ($7) {
   $$02$ph40 = $4;$$03$ph33 = $$03$ph$be;$10 = $3;$bad_character$0$ph48 = $bad_character$0$ph$be;$key_len$0$ph41 = $key_len$0$ph$be;$space$0$ph49 = $space$0$ph$be;
  } else {
   $$02$lcssa = $4;$$03$ph$lcssa = $$03$ph$be;$bad_character$0$lcssa = $bad_character$0$ph$be;$key_len$0$ph$lcssa = $key_len$0$ph$be;$space$0$ph$lcssa = $space$0$ph$be;
   break;
  }
 }
 $23 = ($key_len$0$ph$lcssa|0)!=(0);
 $24 = ($space$0$ph$lcssa|0)!=(0);
 $or$cond = $23 & $24;
 if ($or$cond) {
  $25 = (($key_len$0$ph$lcssa) + -1)|0;
  $26 = ((($$03$ph$lcssa)) + -1|0);
  $27 = ($bad_character$0$lcssa|0)==(0);
  $$bad_character$06 = $27 ? 32 : $bad_character$0$lcssa;
  $$1 = $26;$bad_character$1 = $$bad_character$06;$key_len$1 = $25;
 } else {
  $$1 = $$03$ph$lcssa;$bad_character$1 = $bad_character$0$lcssa;$key_len$1 = $key_len$0$ph$lcssa;
 }
 HEAP8[$$1>>0] = 0;
 $28 = ($key_len$1|0)==(0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = HEAP8[$$02$lcssa>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  _png_warning($png_ptr,17268);
  $$0 = $key_len$1;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($bad_character$1|0)==(0);
 if ($31) {
  $$0 = $key_len$1;
  STACKTOP = sp;return ($$0|0);
 }
 _png_warning_parameter($p,1,$key);
 _png_warning_parameter_signed($p,2,4,$bad_character$1);
 _png_formatted_warning($png_ptr,$p,17286);
 $$0 = $key_len$1;
 STACKTOP = sp;return ($$0|0);
}
function _png_text_compress($png_ptr,$chunk_name,$comp,$prefix_len) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 $comp = $comp|0;
 $prefix_len = $prefix_len|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $end$0 = 0, $end$1 = 0, $half_z_window_size$0$i = 0, $input_len$0 = 0, $input_len$1 = 0, $next$0 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond2$i = 0;
 var $output_len$0 = 0, $output_len$1 = 0, $output_len$2 = 0, $ret$0 = 0, $z_cinfo$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($comp)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_png_deflate_claim($png_ptr,$chunk_name,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($png_ptr)) + 280|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$comp>>2]|0;
 $7 = ((($png_ptr)) + 224|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($png_ptr)) + 228|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($comp)) + 12|0);
 $10 = ((($png_ptr)) + 236|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($png_ptr)) + 240|0);
 HEAP32[$11>>2] = 1024;
 $12 = ((($png_ptr)) + 284|0);
 $13 = 1024;$end$0 = $4;$input_len$0 = $5;$output_len$0 = 1024;
 while(1) {
  HEAP32[$8>>2] = $input_len$0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (($output_len$0) + ($prefix_len))|0;
   $16 = ($15|0)<(0);
   if ($16) {
    $input_len$1 = 0;$output_len$2 = $output_len$0;$ret$0 = -4;
    break;
   }
   $17 = HEAP32[$end$0>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = HEAP32[$12>>2]|0;
    $20 = (($19) + 4)|0;
    $21 = (_png_malloc_base($png_ptr,$20)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $input_len$1 = 0;$output_len$2 = $output_len$0;$ret$0 = -4;
     break;
    }
    HEAP32[$21>>2] = 0;
    HEAP32[$end$0>>2] = $21;
    $next$0 = $21;
   } else {
    $next$0 = $17;
   }
   $23 = ((($next$0)) + 4|0);
   HEAP32[$10>>2] = $23;
   $24 = HEAP32[$12>>2]|0;
   HEAP32[$11>>2] = $24;
   $25 = (($24) + ($output_len$0))|0;
   $end$1 = $next$0;$output_len$1 = $25;
  } else {
   $end$1 = $end$0;$output_len$1 = $output_len$0;
  }
  $26 = (_deflate($7,4)|0);
  $27 = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $28 = ($26|0)==(0);
  if (!($28)) {
   $input_len$1 = $27;$output_len$2 = $output_len$1;$ret$0 = $26;
   break;
  }
  $$pre = HEAP32[$11>>2]|0;
  $13 = $$pre;$end$0 = $end$1;$input_len$0 = $27;$output_len$0 = $output_len$1;
 }
 $29 = HEAP32[$11>>2]|0;
 $30 = (($output_len$2) - ($29))|0;
 HEAP32[$11>>2] = 0;
 $31 = ((($comp)) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = (($30) + ($prefix_len))|0;
 $33 = ($32>>>0)>(2147483646);
 if ($33) {
  $34 = ((($png_ptr)) + 248|0);
  HEAP32[$34>>2] = 17243;
  $35 = ((($png_ptr)) + 220|0);
  HEAP32[$35>>2] = 0;
  $$0 = -4;
  return ($$0|0);
 }
 _png_zstream_error($png_ptr,$ret$0);
 $36 = ((($png_ptr)) + 220|0);
 HEAP32[$36>>2] = 0;
 $37 = ($ret$0|0)==(1);
 $38 = ($input_len$1|0)==(0);
 $or$cond = $37 & $38;
 if (!($or$cond)) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 $39 = HEAP32[$0>>2]|0;
 $40 = ($39>>>0)<(16385);
 if (!($40)) {
  $$0 = 0;
  return ($$0|0);
 }
 $41 = HEAP8[$9>>0]|0;
 $42 = $41&255;
 $43 = $42 & 15;
 $44 = ($43|0)==(8);
 $45 = $42 & 240;
 $46 = ($45>>>0)<(113);
 $or$cond$i = $44 & $46;
 if (!($or$cond$i)) {
  $$0 = 0;
  return ($$0|0);
 }
 $47 = $42 >>> 4;
 $48 = (($47) + 7)|0;
 $49 = 1 << $48;
 $50 = ($49>>>0)<($39>>>0);
 if ($50) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $half_z_window_size$0$i = $49;$z_cinfo$0$i = $47;
 }
 while(1) {
  $51 = $half_z_window_size$0$i >>> 1;
  $52 = (($z_cinfo$0$i) + -1)|0;
  $53 = ($52|0)==(0);
  $54 = ($51>>>0)<($39>>>0);
  $or$cond2$i = $53 | $54;
  if ($or$cond2$i) {
   $$lcssa = $52;
   break;
  } else {
   $half_z_window_size$0$i = $51;$z_cinfo$0$i = $52;
  }
 }
 $55 = $$lcssa << 4;
 $56 = $55 | 8;
 $57 = $56&255;
 HEAP8[$9>>0] = $57;
 $58 = ((($comp)) + 13|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 & 224;
 $62 = $56 << 8;
 $63 = $61 | $62;
 $64 = (($63>>>0) % 31)&-1;
 $65 = $61 | $64;
 $66 = $65 ^ 31;
 $67 = $66&255;
 HEAP8[$58>>0] = $67;
 $$0 = 0;
 return ($$0|0);
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$$16 = 0, $$010 = 0, $$0117 = 0, $$018 = 0, $$1$lcssa6469 = 0, $$12$lcssa6568 = 0, $$1239 = 0, $$140 = 0, $$16$lcssa = 0, $$1616 = 0, $$23 = 0, $$231 = 0, $$323 = 0, $$3430 = 0, $$38$lcssa6667 = 0, $$3838 = 0, $$422 = 0, $$49 = 0, $$529 = 0;
 var $$6$lcssa = 0, $$621 = 0, $$7 = 0, $$lcssa105 = 0, $$lcssa106 = 0, $$lcssa107 = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0 = 0, $scevgep = 0, $scevgep61 = 0, $scevgep62 = 0, $sum2$0 = 0, $sum2$1$lcssa = 0, $sum2$119 = 0, $sum2$2$lcssa6370 = 0, $sum2$241 = 0, $sum2$3 = 0, $sum2$432 = 0, $sum2$5$lcssa = 0;
 var $sum2$524 = 0, $sum2$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $adler >>> 16;
 $1 = $adler & 65535;
 $2 = ($len|0)==(1);
 if ($2) {
  $3 = HEAP8[$buf>>0]|0;
  $4 = $3&255;
  $5 = (($4) + ($1))|0;
  $6 = ($5>>>0)>(65520);
  $7 = (($5) + -65521)|0;
  $$ = $6 ? $7 : $5;
  $8 = (($$) + ($0))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + 15)|0;
  $sum2$0 = $9 ? $10 : $8;
  $11 = $sum2$0 << 16;
  $12 = $11 | $$;
  $$010 = $12;
  return ($$010|0);
 }
 $13 = ($buf|0)==(0|0);
 if ($13) {
  $$010 = 1;
  return ($$010|0);
 }
 $14 = ($len>>>0)<(16);
 if ($14) {
  $20 = ($len|0)==(0);
  if ($20) {
   $$16$lcssa = $1;$sum2$1$lcssa = $0;
  } else {
   $$0117 = $buf;$$018 = $len;$$1616 = $1;$sum2$119 = $0;
   while(1) {
    $21 = (($$018) + -1)|0;
    $22 = ((($$0117)) + 1|0);
    $23 = HEAP8[$$0117>>0]|0;
    $24 = $23&255;
    $25 = (($24) + ($$1616))|0;
    $26 = (($25) + ($sum2$119))|0;
    $27 = ($21|0)==(0);
    if ($27) {
     $$16$lcssa = $25;$sum2$1$lcssa = $26;
     break;
    } else {
     $$0117 = $22;$$018 = $21;$$1616 = $25;$sum2$119 = $26;
    }
   }
  }
  $28 = ($$16$lcssa>>>0)>(65520);
  $29 = (($$16$lcssa) + -65521)|0;
  $$$16 = $28 ? $29 : $$16$lcssa;
  $30 = (($sum2$1$lcssa>>>0) % 65521)&-1;
  $31 = $30 << 16;
  $32 = $31 | $$$16;
  $$010 = $32;
  return ($$010|0);
 }
 $15 = ($len>>>0)>(5551);
 if ($15) {
  $16 = (($len) + -5552)|0;
  $17 = (($16>>>0) % 5552)&-1;
  $18 = (($16) - ($17))|0;
  $19 = (($18) + 5552)|0;
  $$1239 = $buf;$$140 = $len;$$3838 = $1;$sum2$241 = $0;
  while(1) {
   $33 = (($$140) + -5552)|0;
   $$23 = $$1239;$$49 = $$3838;$n$0 = 347;$sum2$3 = $sum2$241;
   while(1) {
    $34 = HEAP8[$$23>>0]|0;
    $35 = $34&255;
    $36 = (($35) + ($$49))|0;
    $37 = (($36) + ($sum2$3))|0;
    $38 = ((($$23)) + 1|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = (($36) + ($40))|0;
    $42 = (($37) + ($41))|0;
    $43 = ((($$23)) + 2|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = (($41) + ($45))|0;
    $47 = (($42) + ($46))|0;
    $48 = ((($$23)) + 3|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($46) + ($50))|0;
    $52 = (($47) + ($51))|0;
    $53 = ((($$23)) + 4|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = (($51) + ($55))|0;
    $57 = (($52) + ($56))|0;
    $58 = ((($$23)) + 5|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = (($56) + ($60))|0;
    $62 = (($57) + ($61))|0;
    $63 = ((($$23)) + 6|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = (($61) + ($65))|0;
    $67 = (($62) + ($66))|0;
    $68 = ((($$23)) + 7|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (($66) + ($70))|0;
    $72 = (($67) + ($71))|0;
    $73 = ((($$23)) + 8|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = (($71) + ($75))|0;
    $77 = (($72) + ($76))|0;
    $78 = ((($$23)) + 9|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($76) + ($80))|0;
    $82 = (($77) + ($81))|0;
    $83 = ((($$23)) + 10|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = (($81) + ($85))|0;
    $87 = (($82) + ($86))|0;
    $88 = ((($$23)) + 11|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = (($86) + ($90))|0;
    $92 = (($87) + ($91))|0;
    $93 = ((($$23)) + 12|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = (($91) + ($95))|0;
    $97 = (($92) + ($96))|0;
    $98 = ((($$23)) + 13|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = (($96) + ($100))|0;
    $102 = (($97) + ($101))|0;
    $103 = ((($$23)) + 14|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($101) + ($105))|0;
    $107 = (($102) + ($106))|0;
    $108 = ((($$23)) + 15|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = (($106) + ($110))|0;
    $112 = (($107) + ($111))|0;
    $113 = ((($$23)) + 16|0);
    $114 = (($n$0) + -1)|0;
    $115 = ($114|0)==(0);
    if ($115) {
     $$lcssa107 = $111;$$lcssa108 = $112;
     break;
    } else {
     $$23 = $113;$$49 = $111;$n$0 = $114;$sum2$3 = $112;
    }
   }
   $scevgep61 = ((($$1239)) + 5552|0);
   $116 = (($$lcssa107>>>0) % 65521)&-1;
   $117 = (($$lcssa108>>>0) % 65521)&-1;
   $118 = ($33>>>0)>(5551);
   if ($118) {
    $$1239 = $scevgep61;$$140 = $33;$$3838 = $116;$sum2$241 = $117;
   } else {
    $$lcssa109 = $116;$$lcssa110 = $117;
    break;
   }
  }
  $scevgep62 = (($buf) + ($19)|0);
  $119 = ($17|0)==(0);
  if ($119) {
   $$7 = $$lcssa109;$sum2$6 = $$lcssa110;
  } else {
   $120 = ($17>>>0)>(15);
   if ($120) {
    $$1$lcssa6469 = $17;$$12$lcssa6568 = $scevgep62;$$38$lcssa6667 = $$lcssa109;$sum2$2$lcssa6370 = $$lcssa110;
    label = 15;
   } else {
    $$323 = $17;$$422 = $scevgep62;$$621 = $$lcssa109;$sum2$524 = $$lcssa110;
    label = 18;
   }
  }
 } else {
  $$1$lcssa6469 = $len;$$12$lcssa6568 = $buf;$$38$lcssa6667 = $1;$sum2$2$lcssa6370 = $0;
  label = 15;
 }
 if ((label|0) == 15) {
  $121 = (($$1$lcssa6469) + -16)|0;
  $122 = $121 & -16;
  $123 = (($122) + 16)|0;
  $scevgep = (($$12$lcssa6568) + ($123)|0);
  $$231 = $$1$lcssa6469;$$3430 = $$12$lcssa6568;$$529 = $$38$lcssa6667;$sum2$432 = $sum2$2$lcssa6370;
  while(1) {
   $126 = (($$231) + -16)|0;
   $127 = HEAP8[$$3430>>0]|0;
   $128 = $127&255;
   $129 = (($128) + ($$529))|0;
   $130 = (($129) + ($sum2$432))|0;
   $131 = ((($$3430)) + 1|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = (($129) + ($133))|0;
   $135 = (($130) + ($134))|0;
   $136 = ((($$3430)) + 2|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($134) + ($138))|0;
   $140 = (($135) + ($139))|0;
   $141 = ((($$3430)) + 3|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142&255;
   $144 = (($139) + ($143))|0;
   $145 = (($140) + ($144))|0;
   $146 = ((($$3430)) + 4|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = (($144) + ($148))|0;
   $150 = (($145) + ($149))|0;
   $151 = ((($$3430)) + 5|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = (($149) + ($153))|0;
   $155 = (($150) + ($154))|0;
   $156 = ((($$3430)) + 6|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157&255;
   $159 = (($154) + ($158))|0;
   $160 = (($155) + ($159))|0;
   $161 = ((($$3430)) + 7|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = (($159) + ($163))|0;
   $165 = (($160) + ($164))|0;
   $166 = ((($$3430)) + 8|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($164) + ($168))|0;
   $170 = (($165) + ($169))|0;
   $171 = ((($$3430)) + 9|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = (($169) + ($173))|0;
   $175 = (($170) + ($174))|0;
   $176 = ((($$3430)) + 10|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = (($174) + ($178))|0;
   $180 = (($175) + ($179))|0;
   $181 = ((($$3430)) + 11|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = (($179) + ($183))|0;
   $185 = (($180) + ($184))|0;
   $186 = ((($$3430)) + 12|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = (($184) + ($188))|0;
   $190 = (($185) + ($189))|0;
   $191 = ((($$3430)) + 13|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = (($189) + ($193))|0;
   $195 = (($190) + ($194))|0;
   $196 = ((($$3430)) + 14|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = (($194) + ($198))|0;
   $200 = (($195) + ($199))|0;
   $201 = ((($$3430)) + 15|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = (($199) + ($203))|0;
   $205 = (($200) + ($204))|0;
   $206 = ((($$3430)) + 16|0);
   $207 = ($126>>>0)>(15);
   if ($207) {
    $$231 = $126;$$3430 = $206;$$529 = $204;$sum2$432 = $205;
   } else {
    $$lcssa105 = $204;$$lcssa106 = $205;
    break;
   }
  }
  $124 = (($121) - ($122))|0;
  $125 = ($121|0)==($122|0);
  if ($125) {
   $$6$lcssa = $$lcssa105;$sum2$5$lcssa = $$lcssa106;
   label = 19;
  } else {
   $$323 = $124;$$422 = $scevgep;$$621 = $$lcssa105;$sum2$524 = $$lcssa106;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  while(1) {
   label = 0;
   $208 = (($$323) + -1)|0;
   $209 = ((($$422)) + 1|0);
   $210 = HEAP8[$$422>>0]|0;
   $211 = $210&255;
   $212 = (($211) + ($$621))|0;
   $213 = (($212) + ($sum2$524))|0;
   $214 = ($208|0)==(0);
   if ($214) {
    $$6$lcssa = $212;$sum2$5$lcssa = $213;
    label = 19;
    break;
   } else {
    $$323 = $208;$$422 = $209;$$621 = $212;$sum2$524 = $213;
    label = 18;
   }
  }
 }
 if ((label|0) == 19) {
  $215 = (($$6$lcssa>>>0) % 65521)&-1;
  $216 = (($sum2$5$lcssa>>>0) % 65521)&-1;
  $$7 = $215;$sum2$6 = $216;
 }
 $217 = $sum2$6 << 16;
 $218 = $217 | $$7;
 $$010 = $218;
 return ($$010|0);
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$0116$i = 0, $$0116$i$lcssa = 0, $$017$i = 0, $$017$i$lcssa = 0, $$1$lcssa$i = 0, $$12$i = 0, $$19$i = 0, $$2$lcssa$i = 0, $$24$i = 0, $$3$i = 0, $$lcssa35 = 0, $$lcssa36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4$0$lcssa$i = 0, $buf4$011$i = 0, $buf4$1$lcssa$i = 0, $buf4$16$i = 0;
 var $c$0$masked$i = 0, $c$018$i = 0, $c$018$i$lcssa = 0, $c$1$lcssa$i = 0, $c$110$i = 0, $c$2$lcssa$i = 0, $c$25$i = 0, $c$3$i = 0, $c$3$masked$i = 0, $c$4$i = 0, $scevgep$i = 0, $scevgep40$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = $crc ^ -1;
 $2 = ($len|0)==(0);
 L4: do {
  if ($2) {
   $c$4$i = $1;
  } else {
   $$0116$i = $buf;$$017$i = $len;$c$018$i = $1;
   while(1) {
    $3 = $$0116$i;
    $4 = $3 & 3;
    $5 = ($4|0)==(0);
    if ($5) {
     $$0116$i$lcssa = $$0116$i;$$017$i$lcssa = $$017$i;$c$018$i$lcssa = $c$018$i;
     break;
    }
    $6 = ((($$0116$i)) + 1|0);
    $7 = HEAP8[$$0116$i>>0]|0;
    $8 = $7&255;
    $c$0$masked$i = $c$018$i & 255;
    $9 = $8 ^ $c$0$masked$i;
    $10 = (488 + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $c$018$i >>> 8;
    $13 = $11 ^ $12;
    $14 = (($$017$i) + -1)|0;
    $15 = ($14|0)==(0);
    if ($15) {
     $c$4$i = $13;
     break L4;
    } else {
     $$0116$i = $6;$$017$i = $14;$c$018$i = $13;
    }
   }
   $16 = ($$017$i$lcssa>>>0)>(31);
   if ($16) {
    $17 = (($$017$i$lcssa) + -32)|0;
    $18 = $17 & -32;
    $19 = (($18) + 32)|0;
    $$19$i = $$017$i$lcssa;$buf4$011$i = $$0116$i$lcssa;$c$110$i = $c$018$i$lcssa;
    while(1) {
     $25 = ((($buf4$011$i)) + 4|0);
     $26 = HEAP32[$buf4$011$i>>2]|0;
     $27 = $26 ^ $c$110$i;
     $28 = $27 & 255;
     $29 = (3560 + ($28<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $27 >>> 8;
     $32 = $31 & 255;
     $33 = (2536 + ($32<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $34 ^ $30;
     $36 = $27 >>> 16;
     $37 = $36 & 255;
     $38 = (1512 + ($37<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $35 ^ $39;
     $41 = $27 >>> 24;
     $42 = (488 + ($41<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $40 ^ $43;
     $45 = ((($buf4$011$i)) + 8|0);
     $46 = HEAP32[$25>>2]|0;
     $47 = $44 ^ $46;
     $48 = $47 & 255;
     $49 = (3560 + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $47 >>> 8;
     $52 = $51 & 255;
     $53 = (2536 + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $54 ^ $50;
     $56 = $47 >>> 16;
     $57 = $56 & 255;
     $58 = (1512 + ($57<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $55 ^ $59;
     $61 = $47 >>> 24;
     $62 = (488 + ($61<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $60 ^ $63;
     $65 = ((($buf4$011$i)) + 12|0);
     $66 = HEAP32[$45>>2]|0;
     $67 = $64 ^ $66;
     $68 = $67 & 255;
     $69 = (3560 + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $67 >>> 8;
     $72 = $71 & 255;
     $73 = (2536 + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 ^ $70;
     $76 = $67 >>> 16;
     $77 = $76 & 255;
     $78 = (1512 + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $75 ^ $79;
     $81 = $67 >>> 24;
     $82 = (488 + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $80 ^ $83;
     $85 = ((($buf4$011$i)) + 16|0);
     $86 = HEAP32[$65>>2]|0;
     $87 = $84 ^ $86;
     $88 = $87 & 255;
     $89 = (3560 + ($88<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $87 >>> 8;
     $92 = $91 & 255;
     $93 = (2536 + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $94 ^ $90;
     $96 = $87 >>> 16;
     $97 = $96 & 255;
     $98 = (1512 + ($97<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $95 ^ $99;
     $101 = $87 >>> 24;
     $102 = (488 + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $100 ^ $103;
     $105 = ((($buf4$011$i)) + 20|0);
     $106 = HEAP32[$85>>2]|0;
     $107 = $104 ^ $106;
     $108 = $107 & 255;
     $109 = (3560 + ($108<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $107 >>> 8;
     $112 = $111 & 255;
     $113 = (2536 + ($112<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114 ^ $110;
     $116 = $107 >>> 16;
     $117 = $116 & 255;
     $118 = (1512 + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $115 ^ $119;
     $121 = $107 >>> 24;
     $122 = (488 + ($121<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $120 ^ $123;
     $125 = ((($buf4$011$i)) + 24|0);
     $126 = HEAP32[$105>>2]|0;
     $127 = $124 ^ $126;
     $128 = $127 & 255;
     $129 = (3560 + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $127 >>> 8;
     $132 = $131 & 255;
     $133 = (2536 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 ^ $130;
     $136 = $127 >>> 16;
     $137 = $136 & 255;
     $138 = (1512 + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $135 ^ $139;
     $141 = $127 >>> 24;
     $142 = (488 + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $140 ^ $143;
     $145 = ((($buf4$011$i)) + 28|0);
     $146 = HEAP32[$125>>2]|0;
     $147 = $144 ^ $146;
     $148 = $147 & 255;
     $149 = (3560 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $147 >>> 8;
     $152 = $151 & 255;
     $153 = (2536 + ($152<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 ^ $150;
     $156 = $147 >>> 16;
     $157 = $156 & 255;
     $158 = (1512 + ($157<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $155 ^ $159;
     $161 = $147 >>> 24;
     $162 = (488 + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $160 ^ $163;
     $165 = ((($buf4$011$i)) + 32|0);
     $166 = HEAP32[$145>>2]|0;
     $167 = $164 ^ $166;
     $168 = $167 & 255;
     $169 = (3560 + ($168<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $167 >>> 8;
     $172 = $171 & 255;
     $173 = (2536 + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $174 ^ $170;
     $176 = $167 >>> 16;
     $177 = $176 & 255;
     $178 = (1512 + ($177<<2)|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $175 ^ $179;
     $181 = $167 >>> 24;
     $182 = (488 + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $180 ^ $183;
     $185 = (($$19$i) + -32)|0;
     $186 = ($185>>>0)>(31);
     if ($186) {
      $$19$i = $185;$buf4$011$i = $165;$c$110$i = $184;
     } else {
      $$lcssa36 = $184;
      break;
     }
    }
    $scevgep40$i = (($$0116$i$lcssa) + ($19)|0);
    $20 = (($17) - ($18))|0;
    $$1$lcssa$i = $20;$buf4$0$lcssa$i = $scevgep40$i;$c$1$lcssa$i = $$lcssa36;
   } else {
    $$1$lcssa$i = $$017$i$lcssa;$buf4$0$lcssa$i = $$0116$i$lcssa;$c$1$lcssa$i = $c$018$i$lcssa;
   }
   $21 = ($$1$lcssa$i>>>0)>(3);
   if ($21) {
    $22 = (($$1$lcssa$i) + -4)|0;
    $23 = $22 >>> 2;
    $24 = $23 << 2;
    $$24$i = $$1$lcssa$i;$buf4$16$i = $buf4$0$lcssa$i;$c$25$i = $c$1$lcssa$i;
    while(1) {
     $187 = ((($buf4$16$i)) + 4|0);
     $188 = HEAP32[$buf4$16$i>>2]|0;
     $189 = $188 ^ $c$25$i;
     $190 = $189 & 255;
     $191 = (3560 + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $189 >>> 8;
     $194 = $193 & 255;
     $195 = (2536 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = $196 ^ $192;
     $198 = $189 >>> 16;
     $199 = $198 & 255;
     $200 = (1512 + ($199<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $197 ^ $201;
     $203 = $189 >>> 24;
     $204 = (488 + ($203<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $202 ^ $205;
     $207 = (($$24$i) + -4)|0;
     $208 = ($207>>>0)>(3);
     if ($208) {
      $$24$i = $207;$buf4$16$i = $187;$c$25$i = $206;
     } else {
      $$lcssa35 = $206;
      break;
     }
    }
    $209 = (($23) + 1)|0;
    $210 = (($22) - ($24))|0;
    $scevgep$i = (($buf4$0$lcssa$i) + ($209<<2)|0);
    $$2$lcssa$i = $210;$buf4$1$lcssa$i = $scevgep$i;$c$2$lcssa$i = $$lcssa35;
   } else {
    $$2$lcssa$i = $$1$lcssa$i;$buf4$1$lcssa$i = $buf4$0$lcssa$i;$c$2$lcssa$i = $c$1$lcssa$i;
   }
   $211 = ($$2$lcssa$i|0)==(0);
   if ($211) {
    $c$4$i = $c$2$lcssa$i;
   } else {
    $$12$i = $buf4$1$lcssa$i;$$3$i = $$2$lcssa$i;$c$3$i = $c$2$lcssa$i;
    while(1) {
     $212 = ((($$12$i)) + 1|0);
     $213 = HEAP8[$$12$i>>0]|0;
     $214 = $213&255;
     $c$3$masked$i = $c$3$i & 255;
     $215 = $214 ^ $c$3$masked$i;
     $216 = (488 + ($215<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $c$3$i >>> 8;
     $219 = $217 ^ $218;
     $220 = (($$3$i) + -1)|0;
     $221 = ($220|0)==(0);
     if ($221) {
      $c$4$i = $219;
      break;
     } else {
      $$12$i = $212;$$3$i = $220;$c$3$i = $219;
     }
    }
   }
  }
 } while(0);
 $222 = $c$4$i ^ -1;
 $$0 = $222;
 return ($$0|0);
}
function _deflateInit2_($strm,$level,$method,$windowBits,$memLevel,$strategy,$version,$stream_size) {
 $strm = $strm|0;
 $level = $level|0;
 $method = $method|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $$ = 0, $$$019 = 0, $$0 = 0, $$019 = 0, $$in$i = 0, $$in20$i = 0, $$in21$i = 0, $$level = 0, $$pre$i = 0, $$pre12$i = 0, $$pre13$i = 0, $$pre14$i = 0, $$windowBits = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $memLevel$off = 0, $or$cond = 0, $or$cond20 = 0, $or$cond5 = 0, $wrap$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)==(0|0);
 if ($0) {
  $$0 = -6;
  return ($$0|0);
 }
 $1 = HEAP8[$version>>0]|0;
 $2 = ($1<<24>>24)!=(49);
 $3 = ($stream_size|0)!=(56);
 $or$cond = $3 | $2;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $4 = ($strm|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($strm)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($strm)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = 67;
  $9 = ((($strm)) + 40|0);
  HEAP32[$9>>2] = 0;
  $30 = 67;
 } else {
  $30 = $7;
 }
 $10 = ((($strm)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = 68;
 }
 $13 = ($level|0)==(-1);
 $$level = $13 ? 6 : $level;
 $14 = ($windowBits|0)<(0);
 if ($14) {
  $15 = (0 - ($windowBits))|0;
  $$019 = $15;$wrap$0 = 0;
 } else {
  $16 = ($windowBits|0)>(15);
  $17 = (($windowBits) + -16)|0;
  $$windowBits = $16 ? $17 : $windowBits;
  $$ = $16 ? 2 : 1;
  $$019 = $$windowBits;$wrap$0 = $$;
 }
 $memLevel$off = (($memLevel) + -1)|0;
 $18 = ($memLevel$off>>>0)>(8);
 $19 = ($method|0)!=(8);
 $or$cond5 = $19 | $18;
 $20 = $$019 & -8;
 $21 = ($20|0)!=(8);
 $22 = $or$cond5 | $21;
 $23 = ($$level>>>0)>(9);
 $24 = $23 | $22;
 $25 = ($strategy>>>0)>(4);
 $26 = $25 | $24;
 if ($26) {
  $$0 = -2;
  return ($$0|0);
 }
 $27 = ($$019|0)==(8);
 $$$019 = $27 ? 9 : $$019;
 $28 = ((($strm)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $31 = (FUNCTION_TABLE_iiii[$30 & 127]($29,1,5828)|0);
 $32 = ($31|0)==(0|0);
 if ($32) {
  $$0 = -4;
  return ($$0|0);
 }
 $33 = ((($strm)) + 28|0);
 HEAP32[$33>>2] = $31;
 HEAP32[$31>>2] = $strm;
 $34 = ((($31)) + 24|0);
 HEAP32[$34>>2] = $wrap$0;
 $35 = ((($31)) + 28|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($31)) + 48|0);
 HEAP32[$36>>2] = $$$019;
 $37 = 1 << $$$019;
 $38 = ((($31)) + 44|0);
 HEAP32[$38>>2] = $37;
 $39 = (($37) + -1)|0;
 $40 = ((($31)) + 52|0);
 HEAP32[$40>>2] = $39;
 $41 = (($memLevel) + 7)|0;
 $42 = ((($31)) + 80|0);
 HEAP32[$42>>2] = $41;
 $43 = 1 << $41;
 $44 = ((($31)) + 76|0);
 HEAP32[$44>>2] = $43;
 $45 = (($43) + -1)|0;
 $46 = ((($31)) + 84|0);
 HEAP32[$46>>2] = $45;
 $47 = (($memLevel) + 9)|0;
 $48 = (($47>>>0) / 3)&-1;
 $49 = ((($31)) + 88|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$6>>2]|0;
 $51 = HEAP32[$28>>2]|0;
 $52 = (FUNCTION_TABLE_iiii[$50 & 127]($51,$37,2)|0);
 $53 = ((($31)) + 56|0);
 HEAP32[$53>>2] = $52;
 $54 = HEAP32[$6>>2]|0;
 $55 = HEAP32[$28>>2]|0;
 $56 = HEAP32[$38>>2]|0;
 $57 = (FUNCTION_TABLE_iiii[$54 & 127]($55,$56,2)|0);
 $58 = ((($31)) + 64|0);
 HEAP32[$58>>2] = $57;
 $59 = HEAP32[$6>>2]|0;
 $60 = HEAP32[$28>>2]|0;
 $61 = HEAP32[$44>>2]|0;
 $62 = (FUNCTION_TABLE_iiii[$59 & 127]($60,$61,2)|0);
 $63 = ((($31)) + 68|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($31)) + 5824|0);
 HEAP32[$64>>2] = 0;
 $65 = (($memLevel) + 6)|0;
 $66 = 1 << $65;
 $67 = ((($31)) + 5788|0);
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$6>>2]|0;
 $69 = HEAP32[$28>>2]|0;
 $70 = (FUNCTION_TABLE_iiii[$68 & 127]($69,$66,4)|0);
 $71 = ((($31)) + 8|0);
 HEAP32[$71>>2] = $70;
 $72 = HEAP32[$67>>2]|0;
 $73 = $72 << 2;
 $74 = ((($31)) + 12|0);
 HEAP32[$74>>2] = $73;
 $75 = HEAP32[$53>>2]|0;
 $76 = ($75|0)==(0|0);
 if (!($76)) {
  $77 = HEAP32[$58>>2]|0;
  $78 = ($77|0)==(0|0);
  if (!($78)) {
   $79 = HEAP32[$63>>2]|0;
   $80 = ($79|0)==(0|0);
   $81 = ($70|0)==(0|0);
   $or$cond20 = $80 | $81;
   if (!($or$cond20)) {
    $111 = $72 >>> 1;
    $112 = (($70) + ($111<<1)|0);
    $113 = ((($31)) + 5796|0);
    HEAP32[$113>>2] = $112;
    $114 = ($72*3)|0;
    $115 = (($70) + ($114)|0);
    $116 = ((($31)) + 5784|0);
    HEAP32[$116>>2] = $115;
    $117 = ((($31)) + 132|0);
    HEAP32[$117>>2] = $$level;
    $118 = ((($31)) + 136|0);
    HEAP32[$118>>2] = $strategy;
    $119 = ((($31)) + 36|0);
    HEAP8[$119>>0] = 8;
    $120 = (_deflateReset($strm)|0);
    $$0 = $120;
    return ($$0|0);
   }
  }
 }
 $82 = ((($31)) + 4|0);
 HEAP32[$82>>2] = 666;
 $83 = HEAP32[(9432)>>2]|0;
 HEAP32[$5>>2] = $83;
 $84 = HEAP32[$33>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $$0 = -4;
  return ($$0|0);
 }
 $86 = ((($84)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 switch ($87|0) {
 case 42: case 69: case 73: case 91: case 103: case 113: case 666:  {
  break;
 }
 default: {
  $$0 = -4;
  return ($$0|0);
 }
 }
 $88 = ((($84)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  $$in$i = $84;
 } else {
  $91 = HEAP32[$10>>2]|0;
  $92 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_vii[$91 & 127]($92,$89);
  $$pre$i = HEAP32[$33>>2]|0;
  $$in$i = $$pre$i;
 }
 $93 = ((($$in$i)) + 68|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if ($95) {
  $$in20$i = $$in$i;
 } else {
  $96 = HEAP32[$10>>2]|0;
  $97 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_vii[$96 & 127]($97,$94);
  $$pre12$i = HEAP32[$33>>2]|0;
  $$in20$i = $$pre12$i;
 }
 $98 = ((($$in20$i)) + 64|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0|0);
 if ($100) {
  $$in21$i = $$in20$i;
 } else {
  $101 = HEAP32[$10>>2]|0;
  $102 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_vii[$101 & 127]($102,$99);
  $$pre13$i = HEAP32[$33>>2]|0;
  $$in21$i = $$pre13$i;
 }
 $103 = ((($$in21$i)) + 56|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0|0);
 if ($105) {
  $110 = $$in21$i;
 } else {
  $106 = HEAP32[$10>>2]|0;
  $107 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_vii[$106 & 127]($107,$104);
  $$pre14$i = HEAP32[$33>>2]|0;
  $110 = $$pre14$i;
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_vii[$108 & 127]($109,$110);
 HEAP32[$33>>2] = 0;
 $$0 = -4;
 return ($$0|0);
}
function _deflateEnd($strm) {
 $strm = $strm|0;
 var $$0 = 0, $$in = 0, $$in20 = 0, $$in21 = 0, $$pre = 0, $$pre$phi17Z2D = 0, $$pre$phiZ2D = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 42: case 69: case 73: case 91: case 103: case 113: case 666:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$in = $2;
 } else {
  $9 = ((($strm)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($strm)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vii[$10 & 127]($12,$7);
  $$pre = HEAP32[$1>>2]|0;
  $$in = $$pre;
 }
 $13 = ((($$in)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$in20 = $$in;
 } else {
  $16 = ((($strm)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($strm)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$17 & 127]($19,$14);
  $$pre12 = HEAP32[$1>>2]|0;
  $$in20 = $$pre12;
 }
 $20 = ((($$in20)) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$in21 = $$in20;
 } else {
  $23 = ((($strm)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($strm)) + 40|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vii[$24 & 127]($26,$21);
  $$pre13 = HEAP32[$1>>2]|0;
  $$in21 = $$pre13;
 }
 $27 = ((($$in21)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$pre15 = ((($strm)) + 36|0);
  $$pre16 = ((($strm)) + 40|0);
  $$pre$phi17Z2D = $$pre16;$$pre$phiZ2D = $$pre15;$36 = $$in21;
 } else {
  $30 = ((($strm)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($strm)) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vii[$31 & 127]($33,$28);
  $$pre14 = HEAP32[$1>>2]|0;
  $$pre$phi17Z2D = $32;$$pre$phiZ2D = $30;$36 = $$pre14;
 }
 $34 = HEAP32[$$pre$phiZ2D>>2]|0;
 $35 = HEAP32[$$pre$phi17Z2D>>2]|0;
 FUNCTION_TABLE_vii[$34 & 127]($35,$36);
 HEAP32[$1>>2] = 0;
 $37 = ($5|0)==(113);
 $38 = $37 ? -3 : 0;
 $$0 = $38;
 return ($$0|0);
}
function _deflateReset($strm) {
 $strm = $strm|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0$i1 = -2;
  return ($$0$i1|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0$i1 = -2;
  return ($$0$i1|0);
 }
 $4 = ((($strm)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0$i1 = -2;
  return ($$0$i1|0);
 }
 $7 = ((($strm)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0$i1 = -2;
  return ($$0$i1|0);
 }
 $10 = ((($strm)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($strm)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($strm)) + 24|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($strm)) + 44|0);
 HEAP32[$13>>2] = 2;
 $14 = ((($2)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($2)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($2)) + 16|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($2)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(0);
 if ($20) {
  $21 = (0 - ($19))|0;
  HEAP32[$18>>2] = $21;
  $22 = $21;
 } else {
  $22 = $19;
 }
 $23 = ($22|0)!=(0);
 $24 = $23 ? 42 : 113;
 $25 = ((($2)) + 4|0);
 HEAP32[$25>>2] = $24;
 $26 = ($22|0)==(2);
 if ($26) {
  $27 = (_crc32(0,0,0)|0);
  $30 = $27;
 } else {
  $28 = (_adler32(0,0,0)|0);
  $30 = $28;
 }
 $29 = ((($strm)) + 48|0);
 HEAP32[$29>>2] = $30;
 $31 = ((($2)) + 40|0);
 HEAP32[$31>>2] = 0;
 __tr_init($2);
 $32 = HEAP32[$1>>2]|0;
 $33 = ((($32)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 << 1;
 $36 = ((($32)) + 60|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($32)) + 76|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + -1)|0;
 $40 = ((($32)) + 68|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($39<<1)|0);
 HEAP16[$42>>1] = 0;
 $43 = $38 << 1;
 $44 = (($43) + -2)|0;
 _memset(($41|0),0,($44|0))|0;
 $45 = ((($32)) + 132|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (((8680 + (($46*12)|0)|0)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $50 = ((($32)) + 128|0);
 HEAP32[$50>>2] = $49;
 $51 = (8680 + (($46*12)|0)|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 $54 = ((($32)) + 140|0);
 HEAP32[$54>>2] = $53;
 $55 = (((8680 + (($46*12)|0)|0)) + 4|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = ((($32)) + 144|0);
 HEAP32[$58>>2] = $57;
 $59 = (((8680 + (($46*12)|0)|0)) + 6|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = ((($32)) + 124|0);
 HEAP32[$62>>2] = $61;
 $63 = ((($32)) + 108|0);
 HEAP32[$63>>2] = 0;
 $64 = ((($32)) + 92|0);
 HEAP32[$64>>2] = 0;
 $65 = ((($32)) + 116|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($32)) + 5812|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($32)) + 120|0);
 HEAP32[$67>>2] = 2;
 $68 = ((($32)) + 96|0);
 HEAP32[$68>>2] = 2;
 $69 = ((($32)) + 104|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($32)) + 72|0);
 HEAP32[$70>>2] = 0;
 $$0$i1 = 0;
 return ($$0$i1|0);
}
function _deflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $$ = 0, $$$i = 0, $$$i$i = 0, $$$i$i32 = 0, $$$i1$i = 0, $$$i15$i = 0, $$$i17 = 0, $$$i17$i = 0, $$$i19 = 0, $$$i21 = 0, $$$i23 = 0, $$$i25 = 0, $$$i27 = 0, $$$i29 = 0, $$$i3$i = 0, $$$i31 = 0, $$0 = 0, $$12 = 0, $$13 = 0, $$14 = 0;
 var $$14$i = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr36$pr = 0, $$pr36$pr$pre = 0, $$pr38 = 0, $$pr42$pr = 0, $$pr42$pr$pre = 0, $$pre = 0, $$pre$i = 0, $$pre$phi79Z2D = 0, $$pre$phi83Z2D = 0, $$pre$phi85Z2D = 0, $$pre$phi87Z2D = 0, $$pre61 = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre66 = 0;
 var $$pre69 = 0, $$pre71 = 0, $$pre73 = 0, $$pre82 = 0, $$pre84 = 0, $$pre86 = 0, $$pre88 = 0, $$sum$i = 0, $$sum10$i = 0, $$sum11$i = 0, $$sum12$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $beg$056 = 0, $beg$1 = 0, $beg$2 = 0, $beg1$0 = 0, $beg1$1 = 0, $beg1$2 = 0, $beg2$0 = 0, $beg2$1 = 0, $beg2$2 = 0, $bflush$0$i = 0, $brmerge = 0, $level_flags$0 = 0;
 var $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond13$i = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond93 = 0, $scan$0$i = 0, $scan$1$i = 0, $val$0 = 0, $val3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($flush>>>0)>(5);
 $5 = $4 | $3;
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ((($strm)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = HEAP32[$strm>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ((($strm)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if (!($13)) {
     break;
    }
   }
   $14 = ((($2)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(666);
   $17 = ($flush|0)!=(4);
   $or$cond5 = $17 & $16;
   if (!($or$cond5)) {
    $20 = ((($strm)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = HEAP32[(9436)>>2]|0;
     $24 = ((($strm)) + 24|0);
     HEAP32[$24>>2] = $23;
     $$0 = -5;
     return ($$0|0);
    }
    HEAP32[$2>>2] = $strm;
    $25 = ((($2)) + 40|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$25>>2] = $flush;
    $27 = ($15|0)==(42);
    do {
     if ($27) {
      $28 = ((($2)) + 24|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(2);
      if (!($30)) {
       $202 = ((($2)) + 48|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $203 << 12;
       $205 = (($204) + -30720)|0;
       $206 = ((($2)) + 136|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)>(1);
       if ($208) {
        $level_flags$0 = 0;
       } else {
        $209 = ((($2)) + 132|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = ($210|0)<(2);
        if ($211) {
         $level_flags$0 = 0;
        } else {
         $212 = ($210|0)<(6);
         if ($212) {
          $level_flags$0 = 64;
         } else {
          $213 = ($210|0)==(6);
          $$13 = $213 ? 128 : 192;
          $level_flags$0 = $$13;
         }
        }
       }
       $214 = $level_flags$0 | $205;
       $215 = ((($2)) + 108|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = ($216|0)==(0);
       $218 = $214 | 32;
       $219 = $217 ? $214 : $218;
       $220 = (($219>>>0) % 31)&-1;
       $$14 = $219 | $220;
       $221 = $$14 ^ 31;
       HEAP32[$14>>2] = 113;
       $222 = $219 >>> 8;
       $223 = $222&255;
       $224 = ((($2)) + 20|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = (($225) + 1)|0;
       HEAP32[$224>>2] = $226;
       $227 = ((($2)) + 8|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($228) + ($225)|0);
       HEAP8[$229>>0] = $223;
       $230 = $221&255;
       $231 = HEAP32[$224>>2]|0;
       $232 = (($231) + 1)|0;
       HEAP32[$224>>2] = $232;
       $233 = HEAP32[$227>>2]|0;
       $234 = (($233) + ($231)|0);
       HEAP8[$234>>0] = $230;
       $235 = HEAP32[$215>>2]|0;
       $236 = ($235|0)==(0);
       $$pre88 = ((($strm)) + 48|0);
       if (!($236)) {
        $237 = HEAP32[$$pre88>>2]|0;
        $238 = $237 >>> 16;
        $239 = $237 >>> 24;
        $240 = $239&255;
        $241 = HEAP32[$224>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$224>>2] = $242;
        $243 = HEAP32[$227>>2]|0;
        $244 = (($243) + ($241)|0);
        HEAP8[$244>>0] = $240;
        $245 = $238&255;
        $246 = HEAP32[$224>>2]|0;
        $247 = (($246) + 1)|0;
        HEAP32[$224>>2] = $247;
        $248 = HEAP32[$227>>2]|0;
        $249 = (($248) + ($246)|0);
        HEAP8[$249>>0] = $245;
        $250 = HEAP32[$$pre88>>2]|0;
        $251 = $250 >>> 8;
        $252 = $251&255;
        $253 = HEAP32[$224>>2]|0;
        $254 = (($253) + 1)|0;
        HEAP32[$224>>2] = $254;
        $255 = HEAP32[$227>>2]|0;
        $256 = (($255) + ($253)|0);
        HEAP8[$256>>0] = $252;
        $257 = $250&255;
        $258 = HEAP32[$224>>2]|0;
        $259 = (($258) + 1)|0;
        HEAP32[$224>>2] = $259;
        $260 = HEAP32[$227>>2]|0;
        $261 = (($260) + ($258)|0);
        HEAP8[$261>>0] = $257;
       }
       $262 = (_adler32(0,0,0)|0);
       HEAP32[$$pre88>>2] = $262;
       $$pr = HEAP32[$14>>2]|0;
       $263 = $$pr;
       label = 30;
       break;
      }
      $31 = (_crc32(0,0,0)|0);
      $32 = ((($strm)) + 48|0);
      HEAP32[$32>>2] = $31;
      $33 = ((($2)) + 20|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($2)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + ($34)|0);
      HEAP8[$38>>0] = 31;
      $39 = HEAP32[$33>>2]|0;
      $40 = (($39) + 1)|0;
      HEAP32[$33>>2] = $40;
      $41 = HEAP32[$36>>2]|0;
      $42 = (($41) + ($39)|0);
      HEAP8[$42>>0] = -117;
      $43 = HEAP32[$33>>2]|0;
      $44 = (($43) + 1)|0;
      HEAP32[$33>>2] = $44;
      $45 = HEAP32[$36>>2]|0;
      $46 = (($45) + ($43)|0);
      HEAP8[$46>>0] = 8;
      $47 = ((($2)) + 28|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = HEAP32[$33>>2]|0;
       $51 = (($50) + 1)|0;
       HEAP32[$33>>2] = $51;
       $52 = HEAP32[$36>>2]|0;
       $53 = (($52) + ($50)|0);
       HEAP8[$53>>0] = 0;
       $54 = HEAP32[$33>>2]|0;
       $55 = (($54) + 1)|0;
       HEAP32[$33>>2] = $55;
       $56 = HEAP32[$36>>2]|0;
       $57 = (($56) + ($54)|0);
       HEAP8[$57>>0] = 0;
       $58 = HEAP32[$33>>2]|0;
       $59 = (($58) + 1)|0;
       HEAP32[$33>>2] = $59;
       $60 = HEAP32[$36>>2]|0;
       $61 = (($60) + ($58)|0);
       HEAP8[$61>>0] = 0;
       $62 = HEAP32[$33>>2]|0;
       $63 = (($62) + 1)|0;
       HEAP32[$33>>2] = $63;
       $64 = HEAP32[$36>>2]|0;
       $65 = (($64) + ($62)|0);
       HEAP8[$65>>0] = 0;
       $66 = HEAP32[$33>>2]|0;
       $67 = (($66) + 1)|0;
       HEAP32[$33>>2] = $67;
       $68 = HEAP32[$36>>2]|0;
       $69 = (($68) + ($66)|0);
       HEAP8[$69>>0] = 0;
       $70 = ((($2)) + 132|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)==(9);
       if ($72) {
        $79 = 2;
       } else {
        $73 = ((($2)) + 136|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = ($74|0)>(1);
        $76 = ($71|0)<(2);
        $$ = $76 | $75;
        $77 = $$ ? 4 : 0;
        $79 = $77;
       }
       $78 = $79&255;
       $80 = HEAP32[$33>>2]|0;
       $81 = (($80) + 1)|0;
       HEAP32[$33>>2] = $81;
       $82 = HEAP32[$36>>2]|0;
       $83 = (($82) + ($80)|0);
       HEAP8[$83>>0] = $78;
       $84 = HEAP32[$33>>2]|0;
       $85 = (($84) + 1)|0;
       HEAP32[$33>>2] = $85;
       $86 = HEAP32[$36>>2]|0;
       $87 = (($86) + ($84)|0);
       HEAP8[$87>>0] = 3;
       HEAP32[$14>>2] = 113;
       break;
      }
      $88 = HEAP32[$48>>2]|0;
      $89 = ($88|0)!=(0);
      $90 = $89&1;
      $91 = ((($48)) + 44|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)!=(0);
      $94 = $93 ? 2 : 0;
      $95 = $94 | $90;
      $96 = ((($48)) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($97|0)==(0|0);
      $99 = $98 ? 0 : 4;
      $100 = $95 | $99;
      $101 = ((($48)) + 28|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)==(0|0);
      $104 = $103 ? 0 : 8;
      $105 = $100 | $104;
      $106 = ((($48)) + 36|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)==(0|0);
      $109 = $108 ? 0 : 16;
      $110 = $105 | $109;
      $111 = $110&255;
      $112 = HEAP32[$33>>2]|0;
      $113 = (($112) + 1)|0;
      HEAP32[$33>>2] = $113;
      $114 = HEAP32[$36>>2]|0;
      $115 = (($114) + ($112)|0);
      HEAP8[$115>>0] = $111;
      $116 = HEAP32[$47>>2]|0;
      $117 = ((($116)) + 4|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $118&255;
      $120 = HEAP32[$33>>2]|0;
      $121 = (($120) + 1)|0;
      HEAP32[$33>>2] = $121;
      $122 = HEAP32[$36>>2]|0;
      $123 = (($122) + ($120)|0);
      HEAP8[$123>>0] = $119;
      $124 = HEAP32[$47>>2]|0;
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $126 >>> 8;
      $128 = $127&255;
      $129 = HEAP32[$33>>2]|0;
      $130 = (($129) + 1)|0;
      HEAP32[$33>>2] = $130;
      $131 = HEAP32[$36>>2]|0;
      $132 = (($131) + ($129)|0);
      HEAP8[$132>>0] = $128;
      $133 = HEAP32[$47>>2]|0;
      $134 = ((($133)) + 4|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = $135 >>> 16;
      $137 = $136&255;
      $138 = HEAP32[$33>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$33>>2] = $139;
      $140 = HEAP32[$36>>2]|0;
      $141 = (($140) + ($138)|0);
      HEAP8[$141>>0] = $137;
      $142 = HEAP32[$47>>2]|0;
      $143 = ((($142)) + 4|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = $144 >>> 24;
      $146 = $145&255;
      $147 = HEAP32[$33>>2]|0;
      $148 = (($147) + 1)|0;
      HEAP32[$33>>2] = $148;
      $149 = HEAP32[$36>>2]|0;
      $150 = (($149) + ($147)|0);
      HEAP8[$150>>0] = $146;
      $151 = ((($2)) + 132|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==(9);
      if ($153) {
       $160 = 2;
      } else {
       $154 = ((($2)) + 136|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)>(1);
       $157 = ($152|0)<(2);
       $$12 = $157 | $156;
       $158 = $$12 ? 4 : 0;
       $160 = $158;
      }
      $159 = $160&255;
      $161 = HEAP32[$33>>2]|0;
      $162 = (($161) + 1)|0;
      HEAP32[$33>>2] = $162;
      $163 = HEAP32[$36>>2]|0;
      $164 = (($163) + ($161)|0);
      HEAP8[$164>>0] = $159;
      $165 = HEAP32[$47>>2]|0;
      $166 = ((($165)) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $167&255;
      $169 = HEAP32[$33>>2]|0;
      $170 = (($169) + 1)|0;
      HEAP32[$33>>2] = $170;
      $171 = HEAP32[$36>>2]|0;
      $172 = (($171) + ($169)|0);
      HEAP8[$172>>0] = $168;
      $173 = HEAP32[$47>>2]|0;
      $174 = ((($173)) + 16|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==(0|0);
      if ($176) {
       $194 = $173;
      } else {
       $177 = ((($173)) + 20|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $178&255;
       $180 = HEAP32[$33>>2]|0;
       $181 = (($180) + 1)|0;
       HEAP32[$33>>2] = $181;
       $182 = HEAP32[$36>>2]|0;
       $183 = (($182) + ($180)|0);
       HEAP8[$183>>0] = $179;
       $184 = HEAP32[$47>>2]|0;
       $185 = ((($184)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = $186 >>> 8;
       $188 = $187&255;
       $189 = HEAP32[$33>>2]|0;
       $190 = (($189) + 1)|0;
       HEAP32[$33>>2] = $190;
       $191 = HEAP32[$36>>2]|0;
       $192 = (($191) + ($189)|0);
       HEAP8[$192>>0] = $188;
       $$pre = HEAP32[$47>>2]|0;
       $194 = $$pre;
      }
      $193 = ((($194)) + 44|0);
      $195 = HEAP32[$193>>2]|0;
      $196 = ($195|0)==(0);
      if (!($196)) {
       $197 = HEAP32[$32>>2]|0;
       $198 = HEAP32[$36>>2]|0;
       $199 = HEAP32[$33>>2]|0;
       $200 = (_crc32($197,$198,$199)|0);
       HEAP32[$32>>2] = $200;
      }
      $201 = ((($2)) + 32|0);
      HEAP32[$201>>2] = 0;
      HEAP32[$14>>2] = 69;
      $$pre$phi83Z2D = $47;
      label = 32;
     } else {
      $263 = $15;
      label = 30;
     }
    } while(0);
    if ((label|0) == 30) {
     $264 = ($263|0)==(69);
     if ($264) {
      $$pre82 = ((($2)) + 28|0);
      $$pre$phi83Z2D = $$pre82;
      label = 32;
     } else {
      $$pr36$pr = $263;
      label = 53;
     }
    }
    do {
     if ((label|0) == 32) {
      $265 = HEAP32[$$pre$phi83Z2D>>2]|0;
      $266 = ((($265)) + 16|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ($267|0)==(0|0);
      if ($268) {
       HEAP32[$14>>2] = 73;
       $$pre$phi79Z2D = $$pre$phi83Z2D;$356 = $265;
       label = 55;
       break;
      }
      $269 = ((($2)) + 20|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ((($2)) + 32|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = ((($265)) + 20|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 & 65535;
      $276 = ($272>>>0)<($275>>>0);
      L53: do {
       if ($276) {
        $277 = ((($2)) + 12|0);
        $278 = ((($strm)) + 48|0);
        $279 = ((($2)) + 8|0);
        $280 = ((($strm)) + 20|0);
        $1176 = $272;$282 = $270;$285 = $265;$beg$056 = $270;
        while(1) {
         $281 = HEAP32[$277>>2]|0;
         $283 = ($282|0)==($281|0);
         if ($283) {
          $284 = ((($285)) + 44|0);
          $286 = HEAP32[$284>>2]|0;
          $287 = ($286|0)!=(0);
          $288 = ($282>>>0)>($beg$056>>>0);
          $or$cond = $288 & $287;
          if ($or$cond) {
           $289 = HEAP32[$278>>2]|0;
           $290 = HEAP32[$279>>2]|0;
           $291 = (($290) + ($beg$056)|0);
           $292 = (($282) - ($beg$056))|0;
           $293 = (_crc32($289,$291,$292)|0);
           HEAP32[$278>>2] = $293;
          }
          $294 = HEAP32[$1>>2]|0;
          __tr_flush_bits($294);
          $295 = ((($294)) + 20|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = HEAP32[$20>>2]|0;
          $298 = ($296>>>0)>($297>>>0);
          $$$i19 = $298 ? $297 : $296;
          $299 = ($$$i19|0)==(0);
          if (!($299)) {
           $300 = HEAP32[$6>>2]|0;
           $301 = ((($294)) + 16|0);
           $302 = HEAP32[$301>>2]|0;
           _memcpy(($300|0),($302|0),($$$i19|0))|0;
           $303 = HEAP32[$6>>2]|0;
           $304 = (($303) + ($$$i19)|0);
           HEAP32[$6>>2] = $304;
           $305 = HEAP32[$301>>2]|0;
           $306 = (($305) + ($$$i19)|0);
           HEAP32[$301>>2] = $306;
           $307 = HEAP32[$280>>2]|0;
           $308 = (($307) + ($$$i19))|0;
           HEAP32[$280>>2] = $308;
           $309 = HEAP32[$20>>2]|0;
           $310 = (($309) - ($$$i19))|0;
           HEAP32[$20>>2] = $310;
           $311 = HEAP32[$295>>2]|0;
           $312 = (($311) - ($$$i19))|0;
           HEAP32[$295>>2] = $312;
           $313 = ($311|0)==($$$i19|0);
           if ($313) {
            $314 = ((($294)) + 8|0);
            $315 = HEAP32[$314>>2]|0;
            HEAP32[$301>>2] = $315;
           }
          }
          $316 = HEAP32[$269>>2]|0;
          $317 = HEAP32[$277>>2]|0;
          $318 = ($316|0)==($317|0);
          if ($318) {
           $$lcssa = $316;
           break;
          }
          $$pre63 = HEAP32[$271>>2]|0;
          $$pre64 = HEAP32[$$pre$phi83Z2D>>2]|0;
          $320 = $$pre64;$323 = $$pre63;$326 = $316;$beg$1 = $316;
         } else {
          $320 = $285;$323 = $1176;$326 = $282;$beg$1 = $beg$056;
         }
         $319 = ((($320)) + 16|0);
         $321 = HEAP32[$319>>2]|0;
         $322 = (($321) + ($323)|0);
         $324 = HEAP8[$322>>0]|0;
         $325 = (($326) + 1)|0;
         HEAP32[$269>>2] = $325;
         $327 = HEAP32[$279>>2]|0;
         $328 = (($327) + ($326)|0);
         HEAP8[$328>>0] = $324;
         $329 = HEAP32[$271>>2]|0;
         $330 = (($329) + 1)|0;
         HEAP32[$271>>2] = $330;
         $331 = HEAP32[$$pre$phi83Z2D>>2]|0;
         $332 = ((($331)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = $333 & 65535;
         $335 = ($330>>>0)<($334>>>0);
         if (!($335)) {
          $337 = $331;$beg$2 = $beg$1;
          break L53;
         }
         $$pre61 = HEAP32[$269>>2]|0;
         $1176 = $330;$282 = $$pre61;$285 = $331;$beg$056 = $beg$1;
        }
        $$pre65 = HEAP32[$$pre$phi83Z2D>>2]|0;
        $337 = $$pre65;$beg$2 = $$lcssa;
       } else {
        $337 = $265;$beg$2 = $270;
       }
      } while(0);
      $336 = ((($337)) + 44|0);
      $338 = HEAP32[$336>>2]|0;
      $339 = ($338|0)==(0);
      if ($339) {
       $351 = $337;
      } else {
       $340 = HEAP32[$269>>2]|0;
       $341 = ($340>>>0)>($beg$2>>>0);
       if ($341) {
        $342 = ((($strm)) + 48|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = ((($2)) + 8|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = (($345) + ($beg$2)|0);
        $347 = (($340) - ($beg$2))|0;
        $348 = (_crc32($343,$346,$347)|0);
        HEAP32[$342>>2] = $348;
        $$pre66 = HEAP32[$$pre$phi83Z2D>>2]|0;
        $351 = $$pre66;
       } else {
        $351 = $337;
       }
      }
      $349 = HEAP32[$271>>2]|0;
      $350 = ((($351)) + 20|0);
      $352 = HEAP32[$350>>2]|0;
      $353 = ($349|0)==($352|0);
      if ($353) {
       HEAP32[$271>>2] = 0;
       HEAP32[$14>>2] = 73;
       $$pre$phi79Z2D = $$pre$phi83Z2D;$356 = $351;
       label = 55;
       break;
      } else {
       $$pr36$pr$pre = HEAP32[$14>>2]|0;
       $$pr36$pr = $$pr36$pr$pre;
       label = 53;
       break;
      }
     }
    } while(0);
    if ((label|0) == 53) {
     $354 = ($$pr36$pr|0)==(73);
     if ($354) {
      $$phi$trans$insert = ((($2)) + 28|0);
      $$pre69 = HEAP32[$$phi$trans$insert>>2]|0;
      $$pre$phi79Z2D = $$phi$trans$insert;$356 = $$pre69;
      label = 55;
     } else {
      $429 = $$pr36$pr;
      label = 73;
     }
    }
    do {
     if ((label|0) == 55) {
      $355 = ((($356)) + 28|0);
      $357 = HEAP32[$355>>2]|0;
      $358 = ($357|0)==(0|0);
      if ($358) {
       HEAP32[$14>>2] = 91;
       $$pre$phi85Z2D = $$pre$phi79Z2D;
       label = 75;
       break;
      }
      $359 = ((($2)) + 20|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ((($2)) + 12|0);
      $362 = ((($strm)) + 48|0);
      $363 = ((($2)) + 8|0);
      $364 = ((($strm)) + 20|0);
      $365 = ((($2)) + 32|0);
      $367 = $360;$beg1$0 = $360;
      while(1) {
       $366 = HEAP32[$361>>2]|0;
       $368 = ($367|0)==($366|0);
       if ($368) {
        $369 = HEAP32[$$pre$phi79Z2D>>2]|0;
        $370 = ((($369)) + 44|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = ($371|0)!=(0);
        $373 = ($367>>>0)>($beg1$0>>>0);
        $or$cond15 = $373 & $372;
        if ($or$cond15) {
         $374 = HEAP32[$362>>2]|0;
         $375 = HEAP32[$363>>2]|0;
         $376 = (($375) + ($beg1$0)|0);
         $377 = (($367) - ($beg1$0))|0;
         $378 = (_crc32($374,$376,$377)|0);
         HEAP32[$362>>2] = $378;
        }
        $379 = HEAP32[$1>>2]|0;
        __tr_flush_bits($379);
        $380 = ((($379)) + 20|0);
        $381 = HEAP32[$380>>2]|0;
        $382 = HEAP32[$20>>2]|0;
        $383 = ($381>>>0)>($382>>>0);
        $$$i21 = $383 ? $382 : $381;
        $384 = ($$$i21|0)==(0);
        if (!($384)) {
         $385 = HEAP32[$6>>2]|0;
         $386 = ((($379)) + 16|0);
         $387 = HEAP32[$386>>2]|0;
         _memcpy(($385|0),($387|0),($$$i21|0))|0;
         $388 = HEAP32[$6>>2]|0;
         $389 = (($388) + ($$$i21)|0);
         HEAP32[$6>>2] = $389;
         $390 = HEAP32[$386>>2]|0;
         $391 = (($390) + ($$$i21)|0);
         HEAP32[$386>>2] = $391;
         $392 = HEAP32[$364>>2]|0;
         $393 = (($392) + ($$$i21))|0;
         HEAP32[$364>>2] = $393;
         $394 = HEAP32[$20>>2]|0;
         $395 = (($394) - ($$$i21))|0;
         HEAP32[$20>>2] = $395;
         $396 = HEAP32[$380>>2]|0;
         $397 = (($396) - ($$$i21))|0;
         HEAP32[$380>>2] = $397;
         $398 = ($396|0)==($$$i21|0);
         if ($398) {
          $399 = ((($379)) + 8|0);
          $400 = HEAP32[$399>>2]|0;
          HEAP32[$386>>2] = $400;
         }
        }
        $401 = HEAP32[$359>>2]|0;
        $402 = HEAP32[$361>>2]|0;
        $403 = ($401|0)==($402|0);
        if ($403) {
         $beg1$2 = $401;$val$0 = 1;
         break;
        } else {
         $413 = $401;$beg1$1 = $401;
        }
       } else {
        $413 = $367;$beg1$1 = $beg1$0;
       }
       $404 = HEAP32[$365>>2]|0;
       $405 = (($404) + 1)|0;
       HEAP32[$365>>2] = $405;
       $406 = HEAP32[$$pre$phi79Z2D>>2]|0;
       $407 = ((($406)) + 28|0);
       $408 = HEAP32[$407>>2]|0;
       $409 = (($408) + ($404)|0);
       $410 = HEAP8[$409>>0]|0;
       $411 = $410&255;
       $412 = (($413) + 1)|0;
       HEAP32[$359>>2] = $412;
       $414 = HEAP32[$363>>2]|0;
       $415 = (($414) + ($413)|0);
       HEAP8[$415>>0] = $410;
       $416 = ($410<<24>>24)==(0);
       if ($416) {
        $beg1$2 = $beg1$1;$val$0 = $411;
        break;
       }
       $$pre71 = HEAP32[$359>>2]|0;
       $367 = $$pre71;$beg1$0 = $beg1$1;
      }
      $417 = HEAP32[$$pre$phi79Z2D>>2]|0;
      $418 = ((($417)) + 44|0);
      $419 = HEAP32[$418>>2]|0;
      $420 = ($419|0)==(0);
      if (!($420)) {
       $421 = HEAP32[$359>>2]|0;
       $422 = ($421>>>0)>($beg1$2>>>0);
       if ($422) {
        $423 = HEAP32[$362>>2]|0;
        $424 = HEAP32[$363>>2]|0;
        $425 = (($424) + ($beg1$2)|0);
        $426 = (($421) - ($beg1$2))|0;
        $427 = (_crc32($423,$425,$426)|0);
        HEAP32[$362>>2] = $427;
       }
      }
      $428 = ($val$0|0)==(0);
      if ($428) {
       HEAP32[$365>>2] = 0;
       HEAP32[$14>>2] = 91;
       $$pre$phi85Z2D = $$pre$phi79Z2D;
       label = 75;
       break;
      } else {
       $$pr38 = HEAP32[$14>>2]|0;
       $429 = $$pr38;
       label = 73;
       break;
      }
     }
    } while(0);
    if ((label|0) == 73) {
     $430 = ($429|0)==(91);
     if ($430) {
      $$pre84 = ((($2)) + 28|0);
      $$pre$phi85Z2D = $$pre84;
      label = 75;
     } else {
      $$pr42$pr = $429;
      label = 93;
     }
    }
    do {
     if ((label|0) == 75) {
      $431 = HEAP32[$$pre$phi85Z2D>>2]|0;
      $432 = ((($431)) + 36|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = ($433|0)==(0|0);
      if ($434) {
       HEAP32[$14>>2] = 103;
       $$pre$phi87Z2D = $$pre$phi85Z2D;
       label = 95;
       break;
      }
      $435 = ((($2)) + 20|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ((($2)) + 12|0);
      $438 = ((($strm)) + 48|0);
      $439 = ((($2)) + 8|0);
      $440 = ((($strm)) + 20|0);
      $441 = ((($2)) + 32|0);
      $443 = $436;$beg2$0 = $436;
      while(1) {
       $442 = HEAP32[$437>>2]|0;
       $444 = ($443|0)==($442|0);
       if ($444) {
        $445 = HEAP32[$$pre$phi85Z2D>>2]|0;
        $446 = ((($445)) + 44|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = ($447|0)!=(0);
        $449 = ($443>>>0)>($beg2$0>>>0);
        $or$cond16 = $449 & $448;
        if ($or$cond16) {
         $450 = HEAP32[$438>>2]|0;
         $451 = HEAP32[$439>>2]|0;
         $452 = (($451) + ($beg2$0)|0);
         $453 = (($443) - ($beg2$0))|0;
         $454 = (_crc32($450,$452,$453)|0);
         HEAP32[$438>>2] = $454;
        }
        $455 = HEAP32[$1>>2]|0;
        __tr_flush_bits($455);
        $456 = ((($455)) + 20|0);
        $457 = HEAP32[$456>>2]|0;
        $458 = HEAP32[$20>>2]|0;
        $459 = ($457>>>0)>($458>>>0);
        $$$i23 = $459 ? $458 : $457;
        $460 = ($$$i23|0)==(0);
        if (!($460)) {
         $461 = HEAP32[$6>>2]|0;
         $462 = ((($455)) + 16|0);
         $463 = HEAP32[$462>>2]|0;
         _memcpy(($461|0),($463|0),($$$i23|0))|0;
         $464 = HEAP32[$6>>2]|0;
         $465 = (($464) + ($$$i23)|0);
         HEAP32[$6>>2] = $465;
         $466 = HEAP32[$462>>2]|0;
         $467 = (($466) + ($$$i23)|0);
         HEAP32[$462>>2] = $467;
         $468 = HEAP32[$440>>2]|0;
         $469 = (($468) + ($$$i23))|0;
         HEAP32[$440>>2] = $469;
         $470 = HEAP32[$20>>2]|0;
         $471 = (($470) - ($$$i23))|0;
         HEAP32[$20>>2] = $471;
         $472 = HEAP32[$456>>2]|0;
         $473 = (($472) - ($$$i23))|0;
         HEAP32[$456>>2] = $473;
         $474 = ($472|0)==($$$i23|0);
         if ($474) {
          $475 = ((($455)) + 8|0);
          $476 = HEAP32[$475>>2]|0;
          HEAP32[$462>>2] = $476;
         }
        }
        $477 = HEAP32[$435>>2]|0;
        $478 = HEAP32[$437>>2]|0;
        $479 = ($477|0)==($478|0);
        if ($479) {
         $beg2$2 = $477;$val3$0 = 1;
         break;
        } else {
         $489 = $477;$beg2$1 = $477;
        }
       } else {
        $489 = $443;$beg2$1 = $beg2$0;
       }
       $480 = HEAP32[$441>>2]|0;
       $481 = (($480) + 1)|0;
       HEAP32[$441>>2] = $481;
       $482 = HEAP32[$$pre$phi85Z2D>>2]|0;
       $483 = ((($482)) + 36|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (($484) + ($480)|0);
       $486 = HEAP8[$485>>0]|0;
       $487 = $486&255;
       $488 = (($489) + 1)|0;
       HEAP32[$435>>2] = $488;
       $490 = HEAP32[$439>>2]|0;
       $491 = (($490) + ($489)|0);
       HEAP8[$491>>0] = $486;
       $492 = ($486<<24>>24)==(0);
       if ($492) {
        $beg2$2 = $beg2$1;$val3$0 = $487;
        break;
       }
       $$pre73 = HEAP32[$435>>2]|0;
       $443 = $$pre73;$beg2$0 = $beg2$1;
      }
      $493 = HEAP32[$$pre$phi85Z2D>>2]|0;
      $494 = ((($493)) + 44|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = ($495|0)==(0);
      if (!($496)) {
       $497 = HEAP32[$435>>2]|0;
       $498 = ($497>>>0)>($beg2$2>>>0);
       if ($498) {
        $499 = HEAP32[$438>>2]|0;
        $500 = HEAP32[$439>>2]|0;
        $501 = (($500) + ($beg2$2)|0);
        $502 = (($497) - ($beg2$2))|0;
        $503 = (_crc32($499,$501,$502)|0);
        HEAP32[$438>>2] = $503;
       }
      }
      $504 = ($val3$0|0)==(0);
      if ($504) {
       HEAP32[$14>>2] = 103;
       $$pre$phi87Z2D = $$pre$phi85Z2D;
       label = 95;
       break;
      } else {
       $$pr42$pr$pre = HEAP32[$14>>2]|0;
       $$pr42$pr = $$pr42$pr$pre;
       label = 93;
       break;
      }
     }
    } while(0);
    if ((label|0) == 93) {
     $505 = ($$pr42$pr|0)==(103);
     if ($505) {
      $$pre86 = ((($2)) + 28|0);
      $$pre$phi87Z2D = $$pre86;
      label = 95;
     }
    }
    do {
     if ((label|0) == 95) {
      $506 = HEAP32[$$pre$phi87Z2D>>2]|0;
      $507 = ((($506)) + 44|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ($508|0)==(0);
      if ($509) {
       HEAP32[$14>>2] = 113;
       break;
      }
      $510 = ((($2)) + 20|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = (($511) + 2)|0;
      $513 = ((($2)) + 12|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = ($512>>>0)>($514>>>0);
      if ($515) {
       $516 = HEAP32[$1>>2]|0;
       __tr_flush_bits($516);
       $517 = ((($516)) + 20|0);
       $518 = HEAP32[$517>>2]|0;
       $519 = HEAP32[$20>>2]|0;
       $520 = ($518>>>0)>($519>>>0);
       $$$i25 = $520 ? $519 : $518;
       $521 = ($$$i25|0)==(0);
       if (!($521)) {
        $522 = HEAP32[$6>>2]|0;
        $523 = ((($516)) + 16|0);
        $524 = HEAP32[$523>>2]|0;
        _memcpy(($522|0),($524|0),($$$i25|0))|0;
        $525 = HEAP32[$6>>2]|0;
        $526 = (($525) + ($$$i25)|0);
        HEAP32[$6>>2] = $526;
        $527 = HEAP32[$523>>2]|0;
        $528 = (($527) + ($$$i25)|0);
        HEAP32[$523>>2] = $528;
        $529 = ((($strm)) + 20|0);
        $530 = HEAP32[$529>>2]|0;
        $531 = (($530) + ($$$i25))|0;
        HEAP32[$529>>2] = $531;
        $532 = HEAP32[$20>>2]|0;
        $533 = (($532) - ($$$i25))|0;
        HEAP32[$20>>2] = $533;
        $534 = HEAP32[$517>>2]|0;
        $535 = (($534) - ($$$i25))|0;
        HEAP32[$517>>2] = $535;
        $536 = ($534|0)==($$$i25|0);
        if ($536) {
         $537 = ((($516)) + 8|0);
         $538 = HEAP32[$537>>2]|0;
         HEAP32[$523>>2] = $538;
        }
       }
      }
      $539 = HEAP32[$510>>2]|0;
      $540 = (($539) + 2)|0;
      $541 = HEAP32[$513>>2]|0;
      $542 = ($540>>>0)>($541>>>0);
      if (!($542)) {
       $543 = ((($strm)) + 48|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = $544&255;
       $546 = (($539) + 1)|0;
       HEAP32[$510>>2] = $546;
       $547 = ((($2)) + 8|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = (($548) + ($539)|0);
       HEAP8[$549>>0] = $545;
       $550 = HEAP32[$543>>2]|0;
       $551 = $550 >>> 8;
       $552 = $551&255;
       $553 = HEAP32[$510>>2]|0;
       $554 = (($553) + 1)|0;
       HEAP32[$510>>2] = $554;
       $555 = HEAP32[$547>>2]|0;
       $556 = (($555) + ($553)|0);
       HEAP8[$556>>0] = $552;
       $557 = (_crc32(0,0,0)|0);
       HEAP32[$543>>2] = $557;
       HEAP32[$14>>2] = 113;
      }
     }
    } while(0);
    $558 = ((($2)) + 20|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = ($559|0)==(0);
    if ($560) {
     $586 = ((($strm)) + 4|0);
     $587 = HEAP32[$586>>2]|0;
     $588 = ($587|0)==(0);
     if ($588) {
      $589 = $flush << 1;
      $590 = ($flush|0)>(4);
      $591 = $590 ? 9 : 0;
      $592 = (($589) - ($591))|0;
      $593 = $26 << 1;
      $594 = ($26|0)>(4);
      $595 = $594 ? 9 : 0;
      $596 = (($593) - ($595))|0;
      $597 = ($592|0)<=($596|0);
      $or$cond7 = $17 & $597;
      if ($or$cond7) {
       $598 = HEAP32[(9436)>>2]|0;
       $599 = ((($strm)) + 24|0);
       HEAP32[$599>>2] = $598;
       $$0 = -5;
       return ($$0|0);
      }
     }
    } else {
     $561 = HEAP32[$1>>2]|0;
     __tr_flush_bits($561);
     $562 = ((($561)) + 20|0);
     $563 = HEAP32[$562>>2]|0;
     $564 = HEAP32[$20>>2]|0;
     $565 = ($563>>>0)>($564>>>0);
     $$$i27 = $565 ? $564 : $563;
     $566 = ($$$i27|0)==(0);
     if ($566) {
      $584 = $564;
     } else {
      $567 = HEAP32[$6>>2]|0;
      $568 = ((($561)) + 16|0);
      $569 = HEAP32[$568>>2]|0;
      _memcpy(($567|0),($569|0),($$$i27|0))|0;
      $570 = HEAP32[$6>>2]|0;
      $571 = (($570) + ($$$i27)|0);
      HEAP32[$6>>2] = $571;
      $572 = HEAP32[$568>>2]|0;
      $573 = (($572) + ($$$i27)|0);
      HEAP32[$568>>2] = $573;
      $574 = ((($strm)) + 20|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = (($575) + ($$$i27))|0;
      HEAP32[$574>>2] = $576;
      $577 = HEAP32[$20>>2]|0;
      $578 = (($577) - ($$$i27))|0;
      HEAP32[$20>>2] = $578;
      $579 = HEAP32[$562>>2]|0;
      $580 = (($579) - ($$$i27))|0;
      HEAP32[$562>>2] = $580;
      $581 = ($579|0)==($$$i27|0);
      if ($581) {
       $582 = ((($561)) + 8|0);
       $583 = HEAP32[$582>>2]|0;
       HEAP32[$568>>2] = $583;
       $584 = $578;
      } else {
       $584 = $578;
      }
     }
     $585 = ($584|0)==(0);
     if ($585) {
      HEAP32[$25>>2] = -1;
      $$0 = 0;
      return ($$0|0);
     }
    }
    $600 = HEAP32[$14>>2]|0;
    $601 = ($600|0)==(666);
    $602 = ((($strm)) + 4|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = ($603|0)==(0);
    if ($601) {
     if ($604) {
      label = 116;
     } else {
      $605 = HEAP32[(9436)>>2]|0;
      $606 = ((($strm)) + 24|0);
      HEAP32[$606>>2] = $605;
      $$0 = -5;
      return ($$0|0);
     }
    } else {
     if ($604) {
      label = 116;
     } else {
      label = 117;
     }
    }
    if ((label|0) == 116) {
     $607 = ((($2)) + 116|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = ($608|0)==(0);
     $610 = ($flush|0)==(0);
     $brmerge = $610 | $601;
     $or$cond93 = $609 & $brmerge;
     if (!($or$cond93)) {
      label = 117;
     }
    }
    do {
     if ((label|0) == 117) {
      $611 = ((($2)) + 136|0);
      $612 = HEAP32[$611>>2]|0;
      L173: do {
       switch ($612|0) {
       case 2:  {
        $613 = ((($2)) + 116|0);
        $614 = ((($2)) + 96|0);
        $615 = ((($2)) + 108|0);
        $616 = ((($2)) + 56|0);
        $617 = ((($2)) + 5792|0);
        $618 = ((($2)) + 5796|0);
        $619 = ((($2)) + 5784|0);
        $620 = ((($2)) + 5788|0);
        $621 = ((($2)) + 92|0);
        while(1) {
         $622 = HEAP32[$613>>2]|0;
         $623 = ($622|0)==(0);
         if ($623) {
          _fill_window($2);
          $624 = HEAP32[$613>>2]|0;
          $625 = ($624|0)==(0);
          if ($625) {
           break;
          }
         }
         HEAP32[$614>>2] = 0;
         $627 = HEAP32[$615>>2]|0;
         $628 = HEAP32[$616>>2]|0;
         $629 = (($628) + ($627)|0);
         $630 = HEAP8[$629>>0]|0;
         $631 = HEAP32[$617>>2]|0;
         $632 = HEAP32[$618>>2]|0;
         $633 = (($632) + ($631<<1)|0);
         HEAP16[$633>>1] = 0;
         $634 = (($631) + 1)|0;
         HEAP32[$617>>2] = $634;
         $635 = HEAP32[$619>>2]|0;
         $636 = (($635) + ($631)|0);
         HEAP8[$636>>0] = $630;
         $637 = $630&255;
         $638 = (((($2)) + 148|0) + ($637<<2)|0);
         $639 = HEAP16[$638>>1]|0;
         $640 = (($639) + 1)<<16>>16;
         HEAP16[$638>>1] = $640;
         $641 = HEAP32[$617>>2]|0;
         $642 = HEAP32[$620>>2]|0;
         $643 = (($642) + -1)|0;
         $644 = ($641|0)==($643|0);
         $645 = HEAP32[$613>>2]|0;
         $646 = (($645) + -1)|0;
         HEAP32[$613>>2] = $646;
         $647 = HEAP32[$615>>2]|0;
         $648 = (($647) + 1)|0;
         HEAP32[$615>>2] = $648;
         if (!($644)) {
          continue;
         }
         $649 = HEAP32[$621>>2]|0;
         $650 = ($649|0)>(-1);
         if ($650) {
          $651 = HEAP32[$616>>2]|0;
          $652 = (($651) + ($649)|0);
          $654 = $652;
         } else {
          $654 = 0;
         }
         $653 = (($648) - ($649))|0;
         __tr_flush_block($2,$654,$653,0);
         $655 = HEAP32[$615>>2]|0;
         HEAP32[$621>>2] = $655;
         $656 = HEAP32[$2>>2]|0;
         $657 = ((($656)) + 28|0);
         $658 = HEAP32[$657>>2]|0;
         __tr_flush_bits($658);
         $659 = ((($658)) + 20|0);
         $660 = HEAP32[$659>>2]|0;
         $661 = ((($656)) + 16|0);
         $662 = HEAP32[$661>>2]|0;
         $663 = ($660>>>0)>($662>>>0);
         $$$i$i = $663 ? $662 : $660;
         $664 = ($$$i$i|0)==(0);
         if (!($664)) {
          $665 = ((($656)) + 12|0);
          $666 = HEAP32[$665>>2]|0;
          $667 = ((($658)) + 16|0);
          $668 = HEAP32[$667>>2]|0;
          _memcpy(($666|0),($668|0),($$$i$i|0))|0;
          $669 = HEAP32[$665>>2]|0;
          $670 = (($669) + ($$$i$i)|0);
          HEAP32[$665>>2] = $670;
          $671 = HEAP32[$667>>2]|0;
          $672 = (($671) + ($$$i$i)|0);
          HEAP32[$667>>2] = $672;
          $673 = ((($656)) + 20|0);
          $674 = HEAP32[$673>>2]|0;
          $675 = (($674) + ($$$i$i))|0;
          HEAP32[$673>>2] = $675;
          $676 = HEAP32[$661>>2]|0;
          $677 = (($676) - ($$$i$i))|0;
          HEAP32[$661>>2] = $677;
          $678 = HEAP32[$659>>2]|0;
          $679 = (($678) - ($$$i$i))|0;
          HEAP32[$659>>2] = $679;
          $680 = ($678|0)==($$$i$i|0);
          if ($680) {
           $681 = ((($658)) + 8|0);
           $682 = HEAP32[$681>>2]|0;
           HEAP32[$667>>2] = $682;
          }
         }
         $683 = HEAP32[$2>>2]|0;
         $684 = ((($683)) + 16|0);
         $685 = HEAP32[$684>>2]|0;
         $686 = ($685|0)==(0);
         if ($686) {
          label = 191;
          break L173;
         }
        }
        $626 = ($flush|0)==(0);
        if ($626) {
         label = 191;
        } else {
         $687 = ((($2)) + 5812|0);
         HEAP32[$687>>2] = 0;
         $688 = ($flush|0)==(4);
         if ($688) {
          $689 = HEAP32[$621>>2]|0;
          $690 = ($689|0)>(-1);
          if ($690) {
           $691 = HEAP32[$616>>2]|0;
           $692 = (($691) + ($689)|0);
           $695 = $692;
          } else {
           $695 = 0;
          }
          $693 = HEAP32[$615>>2]|0;
          $694 = (($693) - ($689))|0;
          __tr_flush_block($2,$695,$694,1);
          $696 = HEAP32[$615>>2]|0;
          HEAP32[$621>>2] = $696;
          $697 = HEAP32[$2>>2]|0;
          $698 = ((($697)) + 28|0);
          $699 = HEAP32[$698>>2]|0;
          __tr_flush_bits($699);
          $700 = ((($699)) + 20|0);
          $701 = HEAP32[$700>>2]|0;
          $702 = ((($697)) + 16|0);
          $703 = HEAP32[$702>>2]|0;
          $704 = ($701>>>0)>($703>>>0);
          $$$i1$i = $704 ? $703 : $701;
          $705 = ($$$i1$i|0)==(0);
          if (!($705)) {
           $706 = ((($697)) + 12|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($699)) + 16|0);
           $709 = HEAP32[$708>>2]|0;
           _memcpy(($707|0),($709|0),($$$i1$i|0))|0;
           $710 = HEAP32[$706>>2]|0;
           $711 = (($710) + ($$$i1$i)|0);
           HEAP32[$706>>2] = $711;
           $712 = HEAP32[$708>>2]|0;
           $713 = (($712) + ($$$i1$i)|0);
           HEAP32[$708>>2] = $713;
           $714 = ((($697)) + 20|0);
           $715 = HEAP32[$714>>2]|0;
           $716 = (($715) + ($$$i1$i))|0;
           HEAP32[$714>>2] = $716;
           $717 = HEAP32[$702>>2]|0;
           $718 = (($717) - ($$$i1$i))|0;
           HEAP32[$702>>2] = $718;
           $719 = HEAP32[$700>>2]|0;
           $720 = (($719) - ($$$i1$i))|0;
           HEAP32[$700>>2] = $720;
           $721 = ($719|0)==($$$i1$i|0);
           if ($721) {
            $722 = ((($699)) + 8|0);
            $723 = HEAP32[$722>>2]|0;
            HEAP32[$708>>2] = $723;
           }
          }
          $724 = HEAP32[$2>>2]|0;
          $725 = ((($724)) + 16|0);
          $726 = HEAP32[$725>>2]|0;
          $727 = ($726|0)==(0);
          $$$i29 = $727 ? 2 : 3;
          $1015 = $$$i29;
          label = 188;
          break L173;
         }
         $728 = HEAP32[$617>>2]|0;
         $729 = ($728|0)==(0);
         if (!($729)) {
          $730 = HEAP32[$621>>2]|0;
          $731 = ($730|0)>(-1);
          if ($731) {
           $732 = HEAP32[$616>>2]|0;
           $733 = (($732) + ($730)|0);
           $736 = $733;
          } else {
           $736 = 0;
          }
          $734 = HEAP32[$615>>2]|0;
          $735 = (($734) - ($730))|0;
          __tr_flush_block($2,$736,$735,0);
          $737 = HEAP32[$615>>2]|0;
          HEAP32[$621>>2] = $737;
          $738 = HEAP32[$2>>2]|0;
          $739 = ((($738)) + 28|0);
          $740 = HEAP32[$739>>2]|0;
          __tr_flush_bits($740);
          $741 = ((($740)) + 20|0);
          $742 = HEAP32[$741>>2]|0;
          $743 = ((($738)) + 16|0);
          $744 = HEAP32[$743>>2]|0;
          $745 = ($742>>>0)>($744>>>0);
          $$$i3$i = $745 ? $744 : $742;
          $746 = ($$$i3$i|0)==(0);
          if (!($746)) {
           $747 = ((($738)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ((($740)) + 16|0);
           $750 = HEAP32[$749>>2]|0;
           _memcpy(($748|0),($750|0),($$$i3$i|0))|0;
           $751 = HEAP32[$747>>2]|0;
           $752 = (($751) + ($$$i3$i)|0);
           HEAP32[$747>>2] = $752;
           $753 = HEAP32[$749>>2]|0;
           $754 = (($753) + ($$$i3$i)|0);
           HEAP32[$749>>2] = $754;
           $755 = ((($738)) + 20|0);
           $756 = HEAP32[$755>>2]|0;
           $757 = (($756) + ($$$i3$i))|0;
           HEAP32[$755>>2] = $757;
           $758 = HEAP32[$743>>2]|0;
           $759 = (($758) - ($$$i3$i))|0;
           HEAP32[$743>>2] = $759;
           $760 = HEAP32[$741>>2]|0;
           $761 = (($760) - ($$$i3$i))|0;
           HEAP32[$741>>2] = $761;
           $762 = ($760|0)==($$$i3$i|0);
           if ($762) {
            $763 = ((($740)) + 8|0);
            $764 = HEAP32[$763>>2]|0;
            HEAP32[$749>>2] = $764;
           }
          }
          $765 = HEAP32[$2>>2]|0;
          $766 = ((($765)) + 16|0);
          $767 = HEAP32[$766>>2]|0;
          $768 = ($767|0)==(0);
          if ($768) {
           label = 191;
          }
         }
        }
        break;
       }
       case 3:  {
        $769 = ((($2)) + 116|0);
        $770 = ($flush|0)==(0);
        $771 = ((($2)) + 96|0);
        $772 = ((($2)) + 108|0);
        $773 = ((($2)) + 5792|0);
        $774 = ((($2)) + 5796|0);
        $775 = ((($2)) + 5784|0);
        $776 = HEAP8[17385>>0]|0;
        $777 = $776&255;
        $778 = (((($2)) + 2440|0) + ($777<<2)|0);
        $779 = ((($2)) + 5788|0);
        $780 = ((($2)) + 56|0);
        $781 = ((($2)) + 92|0);
        while(1) {
         $782 = HEAP32[$769>>2]|0;
         $783 = ($782>>>0)<(259);
         if ($783) {
          _fill_window($2);
          $784 = HEAP32[$769>>2]|0;
          $785 = ($784>>>0)<(259);
          $or$cond$i = $770 & $785;
          if ($or$cond$i) {
           label = 191;
           break L173;
          }
          $786 = ($784|0)==(0);
          if ($786) {
           break;
          }
          HEAP32[$771>>2] = 0;
          $787 = ($784>>>0)>(2);
          if ($787) {
           $833 = $784;
           label = 150;
          } else {
           $$pre$i = HEAP32[$772>>2]|0;
           $866 = $$pre$i;
           label = 165;
          }
         } else {
          HEAP32[$771>>2] = 0;
          $833 = $782;
          label = 150;
         }
         if ((label|0) == 150) {
          label = 0;
          $788 = HEAP32[$772>>2]|0;
          $789 = ($788|0)==(0);
          if ($789) {
           $866 = 0;
           label = 165;
          } else {
           $790 = HEAP32[$780>>2]|0;
           $$sum$i = (($788) + -1)|0;
           $791 = (($790) + ($$sum$i)|0);
           $792 = HEAP8[$791>>0]|0;
           $793 = (($790) + ($788)|0);
           $794 = HEAP8[$793>>0]|0;
           $795 = ($792<<24>>24)==($794<<24>>24);
           if ($795) {
            $$sum10$i = (($788) + 1)|0;
            $796 = (($790) + ($$sum10$i)|0);
            $797 = HEAP8[$796>>0]|0;
            $798 = ($792<<24>>24)==($797<<24>>24);
            if ($798) {
             $$sum11$i = (($788) + 2)|0;
             $799 = (($790) + ($$sum11$i)|0);
             $800 = HEAP8[$799>>0]|0;
             $801 = ($792<<24>>24)==($800<<24>>24);
             if ($801) {
              $$sum12$i = (($788) + 258)|0;
              $802 = (($790) + ($$sum12$i)|0);
              $scan$0$i = $799;
              while(1) {
               $803 = ((($scan$0$i)) + 1|0);
               $804 = HEAP8[$803>>0]|0;
               $805 = ($792<<24>>24)==($804<<24>>24);
               if (!($805)) {
                $scan$1$i = $803;
                break;
               }
               $806 = ((($scan$0$i)) + 2|0);
               $807 = HEAP8[$806>>0]|0;
               $808 = ($792<<24>>24)==($807<<24>>24);
               if (!($808)) {
                $scan$1$i = $806;
                break;
               }
               $809 = ((($scan$0$i)) + 3|0);
               $810 = HEAP8[$809>>0]|0;
               $811 = ($792<<24>>24)==($810<<24>>24);
               if (!($811)) {
                $scan$1$i = $809;
                break;
               }
               $812 = ((($scan$0$i)) + 4|0);
               $813 = HEAP8[$812>>0]|0;
               $814 = ($792<<24>>24)==($813<<24>>24);
               if (!($814)) {
                $scan$1$i = $812;
                break;
               }
               $815 = ((($scan$0$i)) + 5|0);
               $816 = HEAP8[$815>>0]|0;
               $817 = ($792<<24>>24)==($816<<24>>24);
               if (!($817)) {
                $scan$1$i = $815;
                break;
               }
               $818 = ((($scan$0$i)) + 6|0);
               $819 = HEAP8[$818>>0]|0;
               $820 = ($792<<24>>24)==($819<<24>>24);
               if (!($820)) {
                $scan$1$i = $818;
                break;
               }
               $821 = ((($scan$0$i)) + 7|0);
               $822 = HEAP8[$821>>0]|0;
               $823 = ($792<<24>>24)==($822<<24>>24);
               if (!($823)) {
                $scan$1$i = $821;
                break;
               }
               $824 = ((($scan$0$i)) + 8|0);
               $825 = HEAP8[$824>>0]|0;
               $826 = ($792<<24>>24)==($825<<24>>24);
               $827 = ($824>>>0)<($802>>>0);
               $or$cond13$i = $827 & $826;
               if ($or$cond13$i) {
                $scan$0$i = $824;
               } else {
                $scan$1$i = $824;
                break;
               }
              }
              $828 = $802;
              $829 = $scan$1$i;
              $830 = (($829) - ($828))|0;
              $831 = (($830) + 258)|0;
              $832 = ($831>>>0)>($833>>>0);
              $$$i31 = $832 ? $833 : $831;
              HEAP32[$771>>2] = $$$i31;
              $834 = ($$$i31>>>0)>(2);
              if ($834) {
               $835 = (($$$i31) + 253)|0;
               $836 = $835&255;
               $837 = HEAP32[$773>>2]|0;
               $838 = HEAP32[$774>>2]|0;
               $839 = (($838) + ($837<<1)|0);
               HEAP16[$839>>1] = 1;
               $840 = (($837) + 1)|0;
               HEAP32[$773>>2] = $840;
               $841 = HEAP32[$775>>2]|0;
               $842 = (($841) + ($837)|0);
               HEAP8[$842>>0] = $836;
               $843 = $835 & 255;
               $844 = (17897 + ($843)|0);
               $845 = HEAP8[$844>>0]|0;
               $846 = $845&255;
               $847 = $846 | 256;
               $848 = (($847) + 1)|0;
               $849 = (((($2)) + 148|0) + ($848<<2)|0);
               $850 = HEAP16[$849>>1]|0;
               $851 = (($850) + 1)<<16>>16;
               HEAP16[$849>>1] = $851;
               $852 = HEAP16[$778>>1]|0;
               $853 = (($852) + 1)<<16>>16;
               HEAP16[$778>>1] = $853;
               $854 = HEAP32[$773>>2]|0;
               $855 = HEAP32[$779>>2]|0;
               $856 = (($855) + -1)|0;
               $857 = ($854|0)==($856|0);
               $858 = $857&1;
               $859 = HEAP32[$771>>2]|0;
               $860 = HEAP32[$769>>2]|0;
               $861 = (($860) - ($859))|0;
               HEAP32[$769>>2] = $861;
               $862 = HEAP32[$772>>2]|0;
               $863 = (($862) + ($859))|0;
               HEAP32[$772>>2] = $863;
               HEAP32[$771>>2] = 0;
               $893 = $863;$bflush$0$i = $858;
              } else {
               $866 = $788;
               label = 165;
              }
             } else {
              $866 = $788;
              label = 165;
             }
            } else {
             $866 = $788;
             label = 165;
            }
           } else {
            $866 = $788;
            label = 165;
           }
          }
         }
         if ((label|0) == 165) {
          label = 0;
          $864 = HEAP32[$780>>2]|0;
          $865 = (($864) + ($866)|0);
          $867 = HEAP8[$865>>0]|0;
          $868 = HEAP32[$773>>2]|0;
          $869 = HEAP32[$774>>2]|0;
          $870 = (($869) + ($868<<1)|0);
          HEAP16[$870>>1] = 0;
          $871 = (($868) + 1)|0;
          HEAP32[$773>>2] = $871;
          $872 = HEAP32[$775>>2]|0;
          $873 = (($872) + ($868)|0);
          HEAP8[$873>>0] = $867;
          $874 = $867&255;
          $875 = (((($2)) + 148|0) + ($874<<2)|0);
          $876 = HEAP16[$875>>1]|0;
          $877 = (($876) + 1)<<16>>16;
          HEAP16[$875>>1] = $877;
          $878 = HEAP32[$773>>2]|0;
          $879 = HEAP32[$779>>2]|0;
          $880 = (($879) + -1)|0;
          $881 = ($878|0)==($880|0);
          $882 = $881&1;
          $883 = HEAP32[$769>>2]|0;
          $884 = (($883) + -1)|0;
          HEAP32[$769>>2] = $884;
          $885 = HEAP32[$772>>2]|0;
          $886 = (($885) + 1)|0;
          HEAP32[$772>>2] = $886;
          $893 = $886;$bflush$0$i = $882;
         }
         $887 = ($bflush$0$i|0)==(0);
         if ($887) {
          continue;
         }
         $888 = HEAP32[$781>>2]|0;
         $889 = ($888|0)>(-1);
         if ($889) {
          $890 = HEAP32[$780>>2]|0;
          $891 = (($890) + ($888)|0);
          $894 = $891;
         } else {
          $894 = 0;
         }
         $892 = (($893) - ($888))|0;
         __tr_flush_block($2,$894,$892,0);
         $895 = HEAP32[$772>>2]|0;
         HEAP32[$781>>2] = $895;
         $896 = HEAP32[$2>>2]|0;
         $897 = ((($896)) + 28|0);
         $898 = HEAP32[$897>>2]|0;
         __tr_flush_bits($898);
         $899 = ((($898)) + 20|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = ((($896)) + 16|0);
         $902 = HEAP32[$901>>2]|0;
         $903 = ($900>>>0)>($902>>>0);
         $$$i$i32 = $903 ? $902 : $900;
         $904 = ($$$i$i32|0)==(0);
         if (!($904)) {
          $905 = ((($896)) + 12|0);
          $906 = HEAP32[$905>>2]|0;
          $907 = ((($898)) + 16|0);
          $908 = HEAP32[$907>>2]|0;
          _memcpy(($906|0),($908|0),($$$i$i32|0))|0;
          $909 = HEAP32[$905>>2]|0;
          $910 = (($909) + ($$$i$i32)|0);
          HEAP32[$905>>2] = $910;
          $911 = HEAP32[$907>>2]|0;
          $912 = (($911) + ($$$i$i32)|0);
          HEAP32[$907>>2] = $912;
          $913 = ((($896)) + 20|0);
          $914 = HEAP32[$913>>2]|0;
          $915 = (($914) + ($$$i$i32))|0;
          HEAP32[$913>>2] = $915;
          $916 = HEAP32[$901>>2]|0;
          $917 = (($916) - ($$$i$i32))|0;
          HEAP32[$901>>2] = $917;
          $918 = HEAP32[$899>>2]|0;
          $919 = (($918) - ($$$i$i32))|0;
          HEAP32[$899>>2] = $919;
          $920 = ($918|0)==($$$i$i32|0);
          if ($920) {
           $921 = ((($898)) + 8|0);
           $922 = HEAP32[$921>>2]|0;
           HEAP32[$907>>2] = $922;
          }
         }
         $923 = HEAP32[$2>>2]|0;
         $924 = ((($923)) + 16|0);
         $925 = HEAP32[$924>>2]|0;
         $926 = ($925|0)==(0);
         if ($926) {
          label = 191;
          break L173;
         }
        }
        $927 = ((($2)) + 5812|0);
        HEAP32[$927>>2] = 0;
        $928 = ($flush|0)==(4);
        if ($928) {
         $929 = HEAP32[$781>>2]|0;
         $930 = ($929|0)>(-1);
         if ($930) {
          $931 = HEAP32[$780>>2]|0;
          $932 = (($931) + ($929)|0);
          $935 = $932;
         } else {
          $935 = 0;
         }
         $933 = HEAP32[$772>>2]|0;
         $934 = (($933) - ($929))|0;
         __tr_flush_block($2,$935,$934,1);
         $936 = HEAP32[$772>>2]|0;
         HEAP32[$781>>2] = $936;
         $937 = HEAP32[$2>>2]|0;
         $938 = ((($937)) + 28|0);
         $939 = HEAP32[$938>>2]|0;
         __tr_flush_bits($939);
         $940 = ((($939)) + 20|0);
         $941 = HEAP32[$940>>2]|0;
         $942 = ((($937)) + 16|0);
         $943 = HEAP32[$942>>2]|0;
         $944 = ($941>>>0)>($943>>>0);
         $$$i15$i = $944 ? $943 : $941;
         $945 = ($$$i15$i|0)==(0);
         if (!($945)) {
          $946 = ((($937)) + 12|0);
          $947 = HEAP32[$946>>2]|0;
          $948 = ((($939)) + 16|0);
          $949 = HEAP32[$948>>2]|0;
          _memcpy(($947|0),($949|0),($$$i15$i|0))|0;
          $950 = HEAP32[$946>>2]|0;
          $951 = (($950) + ($$$i15$i)|0);
          HEAP32[$946>>2] = $951;
          $952 = HEAP32[$948>>2]|0;
          $953 = (($952) + ($$$i15$i)|0);
          HEAP32[$948>>2] = $953;
          $954 = ((($937)) + 20|0);
          $955 = HEAP32[$954>>2]|0;
          $956 = (($955) + ($$$i15$i))|0;
          HEAP32[$954>>2] = $956;
          $957 = HEAP32[$942>>2]|0;
          $958 = (($957) - ($$$i15$i))|0;
          HEAP32[$942>>2] = $958;
          $959 = HEAP32[$940>>2]|0;
          $960 = (($959) - ($$$i15$i))|0;
          HEAP32[$940>>2] = $960;
          $961 = ($959|0)==($$$i15$i|0);
          if ($961) {
           $962 = ((($939)) + 8|0);
           $963 = HEAP32[$962>>2]|0;
           HEAP32[$948>>2] = $963;
          }
         }
         $964 = HEAP32[$2>>2]|0;
         $965 = ((($964)) + 16|0);
         $966 = HEAP32[$965>>2]|0;
         $967 = ($966|0)==(0);
         $$14$i = $967 ? 2 : 3;
         $1015 = $$14$i;
         label = 188;
         break L173;
        }
        $968 = HEAP32[$773>>2]|0;
        $969 = ($968|0)==(0);
        if (!($969)) {
         $970 = HEAP32[$781>>2]|0;
         $971 = ($970|0)>(-1);
         if ($971) {
          $972 = HEAP32[$780>>2]|0;
          $973 = (($972) + ($970)|0);
          $976 = $973;
         } else {
          $976 = 0;
         }
         $974 = HEAP32[$772>>2]|0;
         $975 = (($974) - ($970))|0;
         __tr_flush_block($2,$976,$975,0);
         $977 = HEAP32[$772>>2]|0;
         HEAP32[$781>>2] = $977;
         $978 = HEAP32[$2>>2]|0;
         $979 = ((($978)) + 28|0);
         $980 = HEAP32[$979>>2]|0;
         __tr_flush_bits($980);
         $981 = ((($980)) + 20|0);
         $982 = HEAP32[$981>>2]|0;
         $983 = ((($978)) + 16|0);
         $984 = HEAP32[$983>>2]|0;
         $985 = ($982>>>0)>($984>>>0);
         $$$i17$i = $985 ? $984 : $982;
         $986 = ($$$i17$i|0)==(0);
         if (!($986)) {
          $987 = ((($978)) + 12|0);
          $988 = HEAP32[$987>>2]|0;
          $989 = ((($980)) + 16|0);
          $990 = HEAP32[$989>>2]|0;
          _memcpy(($988|0),($990|0),($$$i17$i|0))|0;
          $991 = HEAP32[$987>>2]|0;
          $992 = (($991) + ($$$i17$i)|0);
          HEAP32[$987>>2] = $992;
          $993 = HEAP32[$989>>2]|0;
          $994 = (($993) + ($$$i17$i)|0);
          HEAP32[$989>>2] = $994;
          $995 = ((($978)) + 20|0);
          $996 = HEAP32[$995>>2]|0;
          $997 = (($996) + ($$$i17$i))|0;
          HEAP32[$995>>2] = $997;
          $998 = HEAP32[$983>>2]|0;
          $999 = (($998) - ($$$i17$i))|0;
          HEAP32[$983>>2] = $999;
          $1000 = HEAP32[$981>>2]|0;
          $1001 = (($1000) - ($$$i17$i))|0;
          HEAP32[$981>>2] = $1001;
          $1002 = ($1000|0)==($$$i17$i|0);
          if ($1002) {
           $1003 = ((($980)) + 8|0);
           $1004 = HEAP32[$1003>>2]|0;
           HEAP32[$989>>2] = $1004;
          }
         }
         $1005 = HEAP32[$2>>2]|0;
         $1006 = ((($1005)) + 16|0);
         $1007 = HEAP32[$1006>>2]|0;
         $1008 = ($1007|0)==(0);
         if ($1008) {
          label = 191;
         }
        }
        break;
       }
       default: {
        $1009 = ((($2)) + 132|0);
        $1010 = HEAP32[$1009>>2]|0;
        $1011 = (((8680 + (($1010*12)|0)|0)) + 8|0);
        $1012 = HEAP32[$1011>>2]|0;
        $1013 = (FUNCTION_TABLE_iii[$1012 & 63]($2,$flush)|0);
        $1015 = $1013;
        label = 188;
       }
       }
      } while(0);
      if ((label|0) == 188) {
       $1014 = $1015 & -2;
       $1016 = ($1014|0)==(2);
       if ($1016) {
        HEAP32[$14>>2] = 666;
       }
       $1017 = $1015 & -3;
       $1018 = ($1017|0)==(0);
       if ($1018) {
        label = 191;
       } else {
        $1021 = ($1015|0)==(1);
        if (!($1021)) {
         break;
        }
       }
      }
      if ((label|0) == 191) {
       $1019 = HEAP32[$20>>2]|0;
       $1020 = ($1019|0)==(0);
       if (!($1020)) {
        $$0 = 0;
        return ($$0|0);
       }
       HEAP32[$25>>2] = -1;
       $$0 = 0;
       return ($$0|0);
      }
      switch ($flush|0) {
      case 1:  {
       __tr_align($2);
       break;
      }
      case 5:  {
       break;
      }
      default: {
       __tr_stored_block($2,0,0,0);
       $1022 = ($flush|0)==(3);
       if ($1022) {
        $1023 = ((($2)) + 76|0);
        $1024 = HEAP32[$1023>>2]|0;
        $1025 = (($1024) + -1)|0;
        $1026 = ((($2)) + 68|0);
        $1027 = HEAP32[$1026>>2]|0;
        $1028 = (($1027) + ($1025<<1)|0);
        HEAP16[$1028>>1] = 0;
        $1029 = $1024 << 1;
        $1030 = (($1029) + -2)|0;
        _memset(($1027|0),0,($1030|0))|0;
        $1031 = ((($2)) + 116|0);
        $1032 = HEAP32[$1031>>2]|0;
        $1033 = ($1032|0)==(0);
        if ($1033) {
         $1034 = ((($2)) + 108|0);
         HEAP32[$1034>>2] = 0;
         $1035 = ((($2)) + 92|0);
         HEAP32[$1035>>2] = 0;
         $1036 = ((($2)) + 5812|0);
         HEAP32[$1036>>2] = 0;
        }
       }
      }
      }
      $1037 = HEAP32[$1>>2]|0;
      __tr_flush_bits($1037);
      $1038 = ((($1037)) + 20|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[$20>>2]|0;
      $1041 = ($1039>>>0)>($1040>>>0);
      $$$i17 = $1041 ? $1040 : $1039;
      $1042 = ($$$i17|0)==(0);
      if ($1042) {
       $1060 = $1040;
      } else {
       $1043 = HEAP32[$6>>2]|0;
       $1044 = ((($1037)) + 16|0);
       $1045 = HEAP32[$1044>>2]|0;
       _memcpy(($1043|0),($1045|0),($$$i17|0))|0;
       $1046 = HEAP32[$6>>2]|0;
       $1047 = (($1046) + ($$$i17)|0);
       HEAP32[$6>>2] = $1047;
       $1048 = HEAP32[$1044>>2]|0;
       $1049 = (($1048) + ($$$i17)|0);
       HEAP32[$1044>>2] = $1049;
       $1050 = ((($strm)) + 20|0);
       $1051 = HEAP32[$1050>>2]|0;
       $1052 = (($1051) + ($$$i17))|0;
       HEAP32[$1050>>2] = $1052;
       $1053 = HEAP32[$20>>2]|0;
       $1054 = (($1053) - ($$$i17))|0;
       HEAP32[$20>>2] = $1054;
       $1055 = HEAP32[$1038>>2]|0;
       $1056 = (($1055) - ($$$i17))|0;
       HEAP32[$1038>>2] = $1056;
       $1057 = ($1055|0)==($$$i17|0);
       if ($1057) {
        $1058 = ((($1037)) + 8|0);
        $1059 = HEAP32[$1058>>2]|0;
        HEAP32[$1044>>2] = $1059;
        $1060 = $1054;
       } else {
        $1060 = $1054;
       }
      }
      $1061 = ($1060|0)==(0);
      if ($1061) {
       HEAP32[$25>>2] = -1;
       $$0 = 0;
       return ($$0|0);
      }
     }
    } while(0);
    if ($17) {
     $$0 = 0;
     return ($$0|0);
    }
    $1062 = ((($2)) + 24|0);
    $1063 = HEAP32[$1062>>2]|0;
    $1064 = ($1063|0)<(1);
    if ($1064) {
     $$0 = 1;
     return ($$0|0);
    }
    $1065 = ($1063|0)==(2);
    $1066 = ((($strm)) + 48|0);
    $1067 = HEAP32[$1066>>2]|0;
    if ($1065) {
     $1068 = $1067&255;
     $1069 = HEAP32[$558>>2]|0;
     $1070 = (($1069) + 1)|0;
     HEAP32[$558>>2] = $1070;
     $1071 = ((($2)) + 8|0);
     $1072 = HEAP32[$1071>>2]|0;
     $1073 = (($1072) + ($1069)|0);
     HEAP8[$1073>>0] = $1068;
     $1074 = HEAP32[$1066>>2]|0;
     $1075 = $1074 >>> 8;
     $1076 = $1075&255;
     $1077 = HEAP32[$558>>2]|0;
     $1078 = (($1077) + 1)|0;
     HEAP32[$558>>2] = $1078;
     $1079 = HEAP32[$1071>>2]|0;
     $1080 = (($1079) + ($1077)|0);
     HEAP8[$1080>>0] = $1076;
     $1081 = HEAP32[$1066>>2]|0;
     $1082 = $1081 >>> 16;
     $1083 = $1082&255;
     $1084 = HEAP32[$558>>2]|0;
     $1085 = (($1084) + 1)|0;
     HEAP32[$558>>2] = $1085;
     $1086 = HEAP32[$1071>>2]|0;
     $1087 = (($1086) + ($1084)|0);
     HEAP8[$1087>>0] = $1083;
     $1088 = HEAP32[$1066>>2]|0;
     $1089 = $1088 >>> 24;
     $1090 = $1089&255;
     $1091 = HEAP32[$558>>2]|0;
     $1092 = (($1091) + 1)|0;
     HEAP32[$558>>2] = $1092;
     $1093 = HEAP32[$1071>>2]|0;
     $1094 = (($1093) + ($1091)|0);
     HEAP8[$1094>>0] = $1090;
     $1095 = ((($strm)) + 8|0);
     $1096 = HEAP32[$1095>>2]|0;
     $1097 = $1096&255;
     $1098 = HEAP32[$558>>2]|0;
     $1099 = (($1098) + 1)|0;
     HEAP32[$558>>2] = $1099;
     $1100 = HEAP32[$1071>>2]|0;
     $1101 = (($1100) + ($1098)|0);
     HEAP8[$1101>>0] = $1097;
     $1102 = HEAP32[$1095>>2]|0;
     $1103 = $1102 >>> 8;
     $1104 = $1103&255;
     $1105 = HEAP32[$558>>2]|0;
     $1106 = (($1105) + 1)|0;
     HEAP32[$558>>2] = $1106;
     $1107 = HEAP32[$1071>>2]|0;
     $1108 = (($1107) + ($1105)|0);
     HEAP8[$1108>>0] = $1104;
     $1109 = HEAP32[$1095>>2]|0;
     $1110 = $1109 >>> 16;
     $1111 = $1110&255;
     $1112 = HEAP32[$558>>2]|0;
     $1113 = (($1112) + 1)|0;
     HEAP32[$558>>2] = $1113;
     $1114 = HEAP32[$1071>>2]|0;
     $1115 = (($1114) + ($1112)|0);
     HEAP8[$1115>>0] = $1111;
     $1116 = HEAP32[$1095>>2]|0;
     $1117 = $1116 >>> 24;
     $1118 = $1117&255;
     $1119 = HEAP32[$558>>2]|0;
     $1120 = (($1119) + 1)|0;
     HEAP32[$558>>2] = $1120;
     $1121 = HEAP32[$1071>>2]|0;
     $1122 = (($1121) + ($1119)|0);
     HEAP8[$1122>>0] = $1118;
    } else {
     $1123 = $1067 >>> 16;
     $1124 = $1067 >>> 24;
     $1125 = $1124&255;
     $1126 = HEAP32[$558>>2]|0;
     $1127 = (($1126) + 1)|0;
     HEAP32[$558>>2] = $1127;
     $1128 = ((($2)) + 8|0);
     $1129 = HEAP32[$1128>>2]|0;
     $1130 = (($1129) + ($1126)|0);
     HEAP8[$1130>>0] = $1125;
     $1131 = $1123&255;
     $1132 = HEAP32[$558>>2]|0;
     $1133 = (($1132) + 1)|0;
     HEAP32[$558>>2] = $1133;
     $1134 = HEAP32[$1128>>2]|0;
     $1135 = (($1134) + ($1132)|0);
     HEAP8[$1135>>0] = $1131;
     $1136 = HEAP32[$1066>>2]|0;
     $1137 = $1136 >>> 8;
     $1138 = $1137&255;
     $1139 = HEAP32[$558>>2]|0;
     $1140 = (($1139) + 1)|0;
     HEAP32[$558>>2] = $1140;
     $1141 = HEAP32[$1128>>2]|0;
     $1142 = (($1141) + ($1139)|0);
     HEAP8[$1142>>0] = $1138;
     $1143 = $1136&255;
     $1144 = HEAP32[$558>>2]|0;
     $1145 = (($1144) + 1)|0;
     HEAP32[$558>>2] = $1145;
     $1146 = HEAP32[$1128>>2]|0;
     $1147 = (($1146) + ($1144)|0);
     HEAP8[$1147>>0] = $1143;
    }
    $1148 = HEAP32[$1>>2]|0;
    __tr_flush_bits($1148);
    $1149 = ((($1148)) + 20|0);
    $1150 = HEAP32[$1149>>2]|0;
    $1151 = HEAP32[$20>>2]|0;
    $1152 = ($1150>>>0)>($1151>>>0);
    $$$i = $1152 ? $1151 : $1150;
    $1153 = ($$$i|0)==(0);
    if (!($1153)) {
     $1154 = HEAP32[$6>>2]|0;
     $1155 = ((($1148)) + 16|0);
     $1156 = HEAP32[$1155>>2]|0;
     _memcpy(($1154|0),($1156|0),($$$i|0))|0;
     $1157 = HEAP32[$6>>2]|0;
     $1158 = (($1157) + ($$$i)|0);
     HEAP32[$6>>2] = $1158;
     $1159 = HEAP32[$1155>>2]|0;
     $1160 = (($1159) + ($$$i)|0);
     HEAP32[$1155>>2] = $1160;
     $1161 = ((($strm)) + 20|0);
     $1162 = HEAP32[$1161>>2]|0;
     $1163 = (($1162) + ($$$i))|0;
     HEAP32[$1161>>2] = $1163;
     $1164 = HEAP32[$20>>2]|0;
     $1165 = (($1164) - ($$$i))|0;
     HEAP32[$20>>2] = $1165;
     $1166 = HEAP32[$1149>>2]|0;
     $1167 = (($1166) - ($$$i))|0;
     HEAP32[$1149>>2] = $1167;
     $1168 = ($1166|0)==($$$i|0);
     if ($1168) {
      $1169 = ((($1148)) + 8|0);
      $1170 = HEAP32[$1169>>2]|0;
      HEAP32[$1155>>2] = $1170;
     }
    }
    $1171 = HEAP32[$1062>>2]|0;
    $1172 = ($1171|0)>(0);
    if ($1172) {
     $1173 = (0 - ($1171))|0;
     HEAP32[$1062>>2] = $1173;
    }
    $1174 = HEAP32[$558>>2]|0;
    $not$ = ($1174|0)==(0);
    $1175 = $not$&1;
    $$0 = $1175;
    return ($$0|0);
   }
  }
 } while(0);
 $18 = HEAP32[(9424)>>2]|0;
 $19 = ((($strm)) + 24|0);
 HEAP32[$19>>2] = $18;
 $$0 = -2;
 return ($$0|0);
}
function _fill_window($s) {
 $s = $s|0;
 var $$ = 0, $$0$i = 0, $$3 = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $more$0 = 0, $n$0 = 0, $n$1 = 0, $p$0 = 0, $p$1 = 0, $size$$i = 0, $str$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 60|0);
 $3 = ((($s)) + 116|0);
 $4 = ((($s)) + 108|0);
 $5 = (($1) + -262)|0;
 $6 = ((($s)) + 56|0);
 $7 = ((($s)) + 5812|0);
 $8 = ((($s)) + 72|0);
 $9 = ((($s)) + 88|0);
 $10 = ((($s)) + 84|0);
 $11 = ((($s)) + 68|0);
 $12 = ((($s)) + 52|0);
 $13 = ((($s)) + 64|0);
 $14 = ((($s)) + 112|0);
 $15 = ((($s)) + 92|0);
 $16 = ((($s)) + 76|0);
 $$pre = HEAP32[$3>>2]|0;
 $19 = $$pre;$23 = $1;
 while(1) {
  $17 = HEAP32[$2>>2]|0;
  $18 = (($17) - ($19))|0;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($18) - ($20))|0;
  $22 = (($5) + ($23))|0;
  $24 = ($20>>>0)<($22>>>0);
  if ($24) {
   $63 = $20;$more$0 = $21;
  } else {
   $25 = HEAP32[$6>>2]|0;
   $26 = (($25) + ($1)|0);
   _memcpy(($25|0),($26|0),($1|0))|0;
   $27 = HEAP32[$14>>2]|0;
   $28 = (($27) - ($1))|0;
   HEAP32[$14>>2] = $28;
   $29 = HEAP32[$4>>2]|0;
   $30 = (($29) - ($1))|0;
   HEAP32[$4>>2] = $30;
   $31 = HEAP32[$15>>2]|0;
   $32 = (($31) - ($1))|0;
   HEAP32[$15>>2] = $32;
   $33 = HEAP32[$16>>2]|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = (($34) + ($33<<1)|0);
   $n$0 = $33;$p$0 = $35;
   while(1) {
    $36 = ((($p$0)) + -2|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = ($38>>>0)<($1>>>0);
    $40 = (($38) - ($1))|0;
    $41 = $40&65535;
    $42 = $39 ? 0 : $41;
    HEAP16[$36>>1] = $42;
    $43 = (($n$0) + -1)|0;
    $44 = ($43|0)==(0);
    if ($44) {
     break;
    } else {
     $n$0 = $43;$p$0 = $36;
    }
   }
   $45 = HEAP32[$13>>2]|0;
   $46 = (($45) + ($1<<1)|0);
   $n$1 = $1;$p$1 = $46;
   while(1) {
    $47 = ((($p$1)) + -2|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48&65535;
    $50 = ($49>>>0)<($1>>>0);
    $51 = (($49) - ($1))|0;
    $52 = $51&65535;
    $53 = $50 ? 0 : $52;
    HEAP16[$47>>1] = $53;
    $54 = (($n$1) + -1)|0;
    $55 = ($54|0)==(0);
    if ($55) {
     break;
    } else {
     $n$1 = $54;$p$1 = $47;
    }
   }
   $56 = (($21) + ($1))|0;
   $63 = $30;$more$0 = $56;
  }
  $57 = HEAP32[$s>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0);
  if ($60) {
   break;
  }
  $61 = HEAP32[$6>>2]|0;
  $62 = HEAP32[$3>>2]|0;
  $$sum = (($62) + ($63))|0;
  $64 = (($61) + ($$sum)|0);
  $65 = ($59>>>0)>($more$0>>>0);
  $size$$i = $65 ? $more$0 : $59;
  $66 = ($size$$i|0)==(0);
  if ($66) {
   $$0$i = 0;$85 = $62;
  } else {
   $67 = (($59) - ($size$$i))|0;
   HEAP32[$58>>2] = $67;
   $68 = HEAP32[$57>>2]|0;
   _memcpy(($64|0),($68|0),($size$$i|0))|0;
   $69 = ((($57)) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   switch ($72|0) {
   case 1:  {
    $73 = ((($57)) + 48|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (_adler32($74,$64,$size$$i)|0);
    HEAP32[$73>>2] = $75;
    break;
   }
   case 2:  {
    $76 = ((($57)) + 48|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_crc32($77,$64,$size$$i)|0);
    HEAP32[$76>>2] = $78;
    break;
   }
   default: {
   }
   }
   $79 = HEAP32[$57>>2]|0;
   $80 = (($79) + ($size$$i)|0);
   HEAP32[$57>>2] = $80;
   $81 = ((($57)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + ($size$$i))|0;
   HEAP32[$81>>2] = $83;
   $$pre9 = HEAP32[$3>>2]|0;
   $$0$i = $size$$i;$85 = $$pre9;
  }
  $84 = (($85) + ($$0$i))|0;
  HEAP32[$3>>2] = $84;
  $86 = HEAP32[$7>>2]|0;
  $87 = (($84) + ($86))|0;
  $88 = ($87>>>0)>(2);
  L20: do {
   if ($88) {
    $89 = HEAP32[$4>>2]|0;
    $90 = (($89) - ($86))|0;
    $91 = HEAP32[$6>>2]|0;
    $92 = (($91) + ($90)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    HEAP32[$8>>2] = $94;
    $95 = HEAP32[$9>>2]|0;
    $96 = $94 << $95;
    $97 = (($90) + 1)|0;
    $98 = (($91) + ($97)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $100 ^ $96;
    $102 = HEAP32[$10>>2]|0;
    $103 = $101 & $102;
    HEAP32[$8>>2] = $103;
    $104 = $86;$107 = $103;$str$0 = $90;
    while(1) {
     $105 = ($104|0)==(0);
     if ($105) {
      break L20;
     }
     $106 = $107 << $95;
     $108 = (($str$0) + 2)|0;
     $109 = (($91) + ($108)|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = $111 ^ $106;
     $113 = $112 & $102;
     HEAP32[$8>>2] = $113;
     $114 = HEAP32[$11>>2]|0;
     $115 = (($114) + ($113<<1)|0);
     $116 = HEAP16[$115>>1]|0;
     $117 = HEAP32[$12>>2]|0;
     $118 = $117 & $str$0;
     $119 = HEAP32[$13>>2]|0;
     $120 = (($119) + ($118<<1)|0);
     HEAP16[$120>>1] = $116;
     $121 = $str$0&65535;
     HEAP16[$115>>1] = $121;
     $122 = (($str$0) + 1)|0;
     $123 = (($104) + -1)|0;
     HEAP32[$7>>2] = $123;
     $124 = (($84) + ($123))|0;
     $125 = ($124>>>0)<(3);
     if ($125) {
      break;
     } else {
      $104 = $123;$107 = $113;$str$0 = $122;
     }
    }
   }
  } while(0);
  $126 = ($84>>>0)<(262);
  if (!($126)) {
   break;
  }
  $127 = HEAP32[$s>>2]|0;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)==(0);
  if ($130) {
   break;
  }
  $$pre8 = HEAP32[$0>>2]|0;
  $19 = $84;$23 = $$pre8;
 }
 $131 = ((($s)) + 5824|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = HEAP32[$2>>2]|0;
 $134 = ($133>>>0)>($132>>>0);
 if (!($134)) {
  return;
 }
 $135 = HEAP32[$4>>2]|0;
 $136 = HEAP32[$3>>2]|0;
 $137 = (($136) + ($135))|0;
 $138 = ($132>>>0)<($137>>>0);
 if ($138) {
  $139 = (($133) - ($137))|0;
  $140 = ($139>>>0)>(258);
  $$ = $140 ? 258 : $139;
  $141 = HEAP32[$6>>2]|0;
  $142 = (($141) + ($137)|0);
  _memset(($142|0),0,($$|0))|0;
  $143 = (($$) + ($137))|0;
  HEAP32[$131>>2] = $143;
  return;
 }
 $144 = (($137) + 258)|0;
 $145 = ($144>>>0)>($132>>>0);
 if (!($145)) {
  return;
 }
 $146 = (($144) - ($132))|0;
 $147 = (($133) - ($132))|0;
 $148 = ($146>>>0)>($147>>>0);
 $$3 = $148 ? $147 : $146;
 $149 = HEAP32[$6>>2]|0;
 $150 = (($149) + ($132)|0);
 _memset(($150|0),0,($$3|0))|0;
 $151 = HEAP32[$131>>2]|0;
 $152 = (($151) + ($$3))|0;
 HEAP32[$131>>2] = $152;
 return;
}
function _deflate_stored($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $$ = 0, $$$i = 0, $$$i3 = 0, $$$i5 = 0, $$$i7 = 0, $$0 = 0, $$2 = 0, $$pre = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -5)|0;
 $3 = ($2>>>0)<(65535);
 $$ = $3 ? $2 : 65535;
 $4 = ((($s)) + 116|0);
 $5 = ((($s)) + 108|0);
 $6 = ((($s)) + 92|0);
 $7 = ((($s)) + 44|0);
 $8 = ((($s)) + 56|0);
 while(1) {
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9>>>0)<(2);
  if ($10) {
   _fill_window($s);
   $11 = HEAP32[$4>>2]|0;
   $12 = $11 | $flush;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = 0;
    label = 35;
    break;
   }
   $14 = ($11|0)==(0);
   if ($14) {
    label = 20;
    break;
   } else {
    $17 = $11;
   }
  } else {
   $17 = $9;
  }
  $15 = HEAP32[$5>>2]|0;
  $16 = (($15) + ($17))|0;
  HEAP32[$5>>2] = $16;
  HEAP32[$4>>2] = 0;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + ($$))|0;
  $20 = ($16|0)!=(0);
  $21 = ($16>>>0)<($19>>>0);
  $or$cond = $20 & $21;
  if ($or$cond) {
   $60 = $16;$61 = $18;
  } else {
   $22 = (($16) - ($19))|0;
   HEAP32[$4>>2] = $22;
   HEAP32[$5>>2] = $19;
   $23 = ($18|0)>(-1);
   if ($23) {
    $24 = HEAP32[$8>>2]|0;
    $25 = (($24) + ($18)|0);
    $26 = $25;
   } else {
    $26 = 0;
   }
   __tr_flush_block($s,$26,$$,0);
   $27 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $27;
   $28 = HEAP32[$s>>2]|0;
   $29 = ((($28)) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   __tr_flush_bits($30);
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($28)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($32>>>0)>($34>>>0);
   $$$i = $35 ? $34 : $32;
   $36 = ($$$i|0)==(0);
   if (!($36)) {
    $37 = ((($28)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($30)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    _memcpy(($38|0),($40|0),($$$i|0))|0;
    $41 = HEAP32[$37>>2]|0;
    $42 = (($41) + ($$$i)|0);
    HEAP32[$37>>2] = $42;
    $43 = HEAP32[$39>>2]|0;
    $44 = (($43) + ($$$i)|0);
    HEAP32[$39>>2] = $44;
    $45 = ((($28)) + 20|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($$$i))|0;
    HEAP32[$45>>2] = $47;
    $48 = HEAP32[$33>>2]|0;
    $49 = (($48) - ($$$i))|0;
    HEAP32[$33>>2] = $49;
    $50 = HEAP32[$31>>2]|0;
    $51 = (($50) - ($$$i))|0;
    HEAP32[$31>>2] = $51;
    $52 = ($50|0)==($$$i|0);
    if ($52) {
     $53 = ((($30)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     HEAP32[$39>>2] = $54;
    }
   }
   $55 = HEAP32[$s>>2]|0;
   $56 = ((($55)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0);
   if ($58) {
    $$0 = 0;
    label = 35;
    break;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre9 = HEAP32[$6>>2]|0;
   $60 = $$pre;$61 = $$pre9;
  }
  $59 = (($60) - ($61))|0;
  $62 = HEAP32[$7>>2]|0;
  $63 = (($62) + -262)|0;
  $64 = ($59>>>0)<($63>>>0);
  if ($64) {
   continue;
  }
  $65 = ($61|0)>(-1);
  if ($65) {
   $66 = HEAP32[$8>>2]|0;
   $67 = (($66) + ($61)|0);
   $68 = $67;
  } else {
   $68 = 0;
  }
  __tr_flush_block($s,$68,$59,0);
  $69 = HEAP32[$5>>2]|0;
  HEAP32[$6>>2] = $69;
  $70 = HEAP32[$s>>2]|0;
  $71 = ((($70)) + 28|0);
  $72 = HEAP32[$71>>2]|0;
  __tr_flush_bits($72);
  $73 = ((($72)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($70)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74>>>0)>($76>>>0);
  $$$i3 = $77 ? $76 : $74;
  $78 = ($$$i3|0)==(0);
  if (!($78)) {
   $79 = ((($70)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($72)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   _memcpy(($80|0),($82|0),($$$i3|0))|0;
   $83 = HEAP32[$79>>2]|0;
   $84 = (($83) + ($$$i3)|0);
   HEAP32[$79>>2] = $84;
   $85 = HEAP32[$81>>2]|0;
   $86 = (($85) + ($$$i3)|0);
   HEAP32[$81>>2] = $86;
   $87 = ((($70)) + 20|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + ($$$i3))|0;
   HEAP32[$87>>2] = $89;
   $90 = HEAP32[$75>>2]|0;
   $91 = (($90) - ($$$i3))|0;
   HEAP32[$75>>2] = $91;
   $92 = HEAP32[$73>>2]|0;
   $93 = (($92) - ($$$i3))|0;
   HEAP32[$73>>2] = $93;
   $94 = ($92|0)==($$$i3|0);
   if ($94) {
    $95 = ((($72)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    HEAP32[$81>>2] = $96;
   }
  }
  $97 = HEAP32[$s>>2]|0;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)==(0);
  if ($100) {
   $$0 = 0;
   label = 35;
   break;
  }
 }
 if ((label|0) == 20) {
  $101 = ((($s)) + 5812|0);
  HEAP32[$101>>2] = 0;
  $102 = ($flush|0)==(4);
  if ($102) {
   $103 = HEAP32[$6>>2]|0;
   $104 = ($103|0)>(-1);
   if ($104) {
    $105 = HEAP32[$8>>2]|0;
    $106 = (($105) + ($103)|0);
    $109 = $106;
   } else {
    $109 = 0;
   }
   $107 = HEAP32[$5>>2]|0;
   $108 = (($107) - ($103))|0;
   __tr_flush_block($s,$109,$108,1);
   $110 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $110;
   $111 = HEAP32[$s>>2]|0;
   $112 = ((($111)) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   __tr_flush_bits($113);
   $114 = ((($113)) + 20|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($111)) + 16|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($115>>>0)>($117>>>0);
   $$$i5 = $118 ? $117 : $115;
   $119 = ($$$i5|0)==(0);
   if (!($119)) {
    $120 = ((($111)) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ((($113)) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    _memcpy(($121|0),($123|0),($$$i5|0))|0;
    $124 = HEAP32[$120>>2]|0;
    $125 = (($124) + ($$$i5)|0);
    HEAP32[$120>>2] = $125;
    $126 = HEAP32[$122>>2]|0;
    $127 = (($126) + ($$$i5)|0);
    HEAP32[$122>>2] = $127;
    $128 = ((($111)) + 20|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + ($$$i5))|0;
    HEAP32[$128>>2] = $130;
    $131 = HEAP32[$116>>2]|0;
    $132 = (($131) - ($$$i5))|0;
    HEAP32[$116>>2] = $132;
    $133 = HEAP32[$114>>2]|0;
    $134 = (($133) - ($$$i5))|0;
    HEAP32[$114>>2] = $134;
    $135 = ($133|0)==($$$i5|0);
    if ($135) {
     $136 = ((($113)) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP32[$122>>2] = $137;
    }
   }
   $138 = HEAP32[$s>>2]|0;
   $139 = ((($138)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)==(0);
   $$2 = $141 ? 2 : 3;
   $$0 = $$2;
   return ($$0|0);
  }
  $142 = HEAP32[$5>>2]|0;
  $143 = HEAP32[$6>>2]|0;
  $144 = ($142|0)>($143|0);
  if ($144) {
   $145 = ($143|0)>(-1);
   if ($145) {
    $146 = HEAP32[$8>>2]|0;
    $147 = (($146) + ($143)|0);
    $149 = $147;
   } else {
    $149 = 0;
   }
   $148 = (($142) - ($143))|0;
   __tr_flush_block($s,$149,$148,0);
   $150 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $150;
   $151 = HEAP32[$s>>2]|0;
   $152 = ((($151)) + 28|0);
   $153 = HEAP32[$152>>2]|0;
   __tr_flush_bits($153);
   $154 = ((($153)) + 20|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ((($151)) + 16|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($155>>>0)>($157>>>0);
   $$$i7 = $158 ? $157 : $155;
   $159 = ($$$i7|0)==(0);
   if (!($159)) {
    $160 = ((($151)) + 12|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($153)) + 16|0);
    $163 = HEAP32[$162>>2]|0;
    _memcpy(($161|0),($163|0),($$$i7|0))|0;
    $164 = HEAP32[$160>>2]|0;
    $165 = (($164) + ($$$i7)|0);
    HEAP32[$160>>2] = $165;
    $166 = HEAP32[$162>>2]|0;
    $167 = (($166) + ($$$i7)|0);
    HEAP32[$162>>2] = $167;
    $168 = ((($151)) + 20|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = (($169) + ($$$i7))|0;
    HEAP32[$168>>2] = $170;
    $171 = HEAP32[$156>>2]|0;
    $172 = (($171) - ($$$i7))|0;
    HEAP32[$156>>2] = $172;
    $173 = HEAP32[$154>>2]|0;
    $174 = (($173) - ($$$i7))|0;
    HEAP32[$154>>2] = $174;
    $175 = ($173|0)==($$$i7|0);
    if ($175) {
     $176 = ((($153)) + 8|0);
     $177 = HEAP32[$176>>2]|0;
     HEAP32[$162>>2] = $177;
    }
   }
   $178 = HEAP32[$s>>2]|0;
   $179 = ((($178)) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(0);
   if ($181) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 35) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_fast($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $$ = 0, $$$i = 0, $$$i4 = 0, $$$i6 = 0, $$0 = 0, $$3 = 0, $$lcssa = 0, $$pn = 0, $$pr = 0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre9 = 0, $$sink = 0, $$sink$in = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush$0 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 116|0);
 $1 = ($flush|0)==(0);
 $2 = ((($s)) + 72|0);
 $3 = ((($s)) + 88|0);
 $4 = ((($s)) + 108|0);
 $5 = ((($s)) + 56|0);
 $6 = ((($s)) + 84|0);
 $7 = ((($s)) + 68|0);
 $8 = ((($s)) + 52|0);
 $9 = ((($s)) + 64|0);
 $10 = ((($s)) + 44|0);
 $11 = ((($s)) + 96|0);
 $12 = ((($s)) + 112|0);
 $13 = ((($s)) + 5792|0);
 $14 = ((($s)) + 5796|0);
 $15 = ((($s)) + 5784|0);
 $16 = ((($s)) + 5788|0);
 $17 = ((($s)) + 128|0);
 $18 = ((($s)) + 92|0);
 while(1) {
  $19 = HEAP32[$0>>2]|0;
  $20 = ($19>>>0)<(262);
  if ($20) {
   _fill_window($s);
   $21 = HEAP32[$0>>2]|0;
   $22 = ($21>>>0)<(262);
   $or$cond = $1 & $22;
   if ($or$cond) {
    $$0 = 0;
    label = 39;
    break;
   }
   $23 = ($21|0)==(0);
   if ($23) {
    label = 24;
    break;
   }
   $24 = ($21>>>0)>(2);
   if ($24) {
    label = 6;
   } else {
    label = 9;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $25 = HEAP32[$2>>2]|0;
   $26 = HEAP32[$3>>2]|0;
   $27 = $25 << $26;
   $28 = HEAP32[$4>>2]|0;
   $29 = (($28) + 2)|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($29)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 ^ $27;
   $35 = HEAP32[$6>>2]|0;
   $36 = $34 & $35;
   HEAP32[$2>>2] = $36;
   $37 = HEAP32[$7>>2]|0;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = HEAP32[$8>>2]|0;
   $41 = $40 & $28;
   $42 = HEAP32[$9>>2]|0;
   $43 = (($42) + ($41<<1)|0);
   HEAP16[$43>>1] = $39;
   $44 = $39&65535;
   $45 = $28&65535;
   HEAP16[$38>>1] = $45;
   $46 = ($39<<16>>16)==(0);
   if ($46) {
    label = 9;
   } else {
    $47 = (($28) - ($44))|0;
    $48 = HEAP32[$10>>2]|0;
    $49 = (($48) + -262)|0;
    $50 = ($47>>>0)>($49>>>0);
    if ($50) {
     label = 9;
    } else {
     $51 = (_longest_match($s,$44)|0);
     HEAP32[$11>>2] = $51;
     $52 = $51;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $$pr = HEAP32[$11>>2]|0;
   $52 = $$pr;
  }
  $53 = ($52>>>0)>(2);
  do {
   if ($53) {
    $54 = (($52) + 253)|0;
    $55 = $54&255;
    $56 = HEAP32[$4>>2]|0;
    $57 = HEAP32[$12>>2]|0;
    $58 = (($56) - ($57))|0;
    $59 = $58&65535;
    $60 = HEAP32[$13>>2]|0;
    $61 = HEAP32[$14>>2]|0;
    $62 = (($61) + ($60<<1)|0);
    HEAP16[$62>>1] = $59;
    $63 = (($60) + 1)|0;
    HEAP32[$13>>2] = $63;
    $64 = HEAP32[$15>>2]|0;
    $65 = (($64) + ($60)|0);
    HEAP8[$65>>0] = $55;
    $66 = (($58) + 65535)|0;
    $67 = $54 & 255;
    $68 = (17897 + ($67)|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = $70 | 256;
    $72 = (($71) + 1)|0;
    $73 = (((($s)) + 148|0) + ($72<<2)|0);
    $74 = HEAP16[$73>>1]|0;
    $75 = (($74) + 1)<<16>>16;
    HEAP16[$73>>1] = $75;
    $76 = $66 & 65535;
    $77 = ($76>>>0)<(256);
    $78 = $76 >>> 7;
    $79 = (($78) + 256)|0;
    $$pn = $77 ? $76 : $79;
    $$sink$in = (17385 + ($$pn)|0);
    $$sink = HEAP8[$$sink$in>>0]|0;
    $80 = $$sink&255;
    $81 = (((($s)) + 2440|0) + ($80<<2)|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = (($82) + 1)<<16>>16;
    HEAP16[$81>>1] = $83;
    $84 = HEAP32[$13>>2]|0;
    $85 = HEAP32[$16>>2]|0;
    $86 = (($85) + -1)|0;
    $87 = ($84|0)==($86|0);
    $88 = $87&1;
    $89 = HEAP32[$11>>2]|0;
    $90 = HEAP32[$0>>2]|0;
    $91 = (($90) - ($89))|0;
    HEAP32[$0>>2] = $91;
    $92 = HEAP32[$17>>2]|0;
    $93 = ($89>>>0)<=($92>>>0);
    $94 = ($91>>>0)>(2);
    $or$cond2 = $94 & $93;
    if (!($or$cond2)) {
     $115 = HEAP32[$4>>2]|0;
     $116 = (($115) + ($89))|0;
     HEAP32[$4>>2] = $116;
     HEAP32[$11>>2] = 0;
     $117 = HEAP32[$5>>2]|0;
     $118 = (($117) + ($116)|0);
     $119 = HEAP8[$118>>0]|0;
     $120 = $119&255;
     HEAP32[$2>>2] = $120;
     $121 = HEAP32[$3>>2]|0;
     $122 = $120 << $121;
     $123 = (($116) + 1)|0;
     $124 = (($117) + ($123)|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&255;
     $127 = $126 ^ $122;
     $128 = HEAP32[$6>>2]|0;
     $129 = $127 & $128;
     HEAP32[$2>>2] = $129;
     $159 = $116;$bflush$0 = $88;
     break;
    }
    $95 = (($89) + -1)|0;
    HEAP32[$11>>2] = $95;
    $$pre = HEAP32[$4>>2]|0;
    $$pre9 = HEAP32[$2>>2]|0;
    $$pre10 = HEAP32[$3>>2]|0;
    $$pre11 = HEAP32[$5>>2]|0;
    $$pre12 = HEAP32[$6>>2]|0;
    $$pre13 = HEAP32[$7>>2]|0;
    $$pre14 = HEAP32[$8>>2]|0;
    $$pre15 = HEAP32[$9>>2]|0;
    $112 = $95;$97 = $$pre;$99 = $$pre9;
    while(1) {
     $96 = (($97) + 1)|0;
     HEAP32[$4>>2] = $96;
     $98 = $99 << $$pre10;
     $100 = (($97) + 3)|0;
     $101 = (($$pre11) + ($100)|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = $102&255;
     $104 = $103 ^ $98;
     $105 = $104 & $$pre12;
     HEAP32[$2>>2] = $105;
     $106 = (($$pre13) + ($105<<1)|0);
     $107 = HEAP16[$106>>1]|0;
     $108 = $$pre14 & $96;
     $109 = (($$pre15) + ($108<<1)|0);
     HEAP16[$109>>1] = $107;
     $110 = $96&65535;
     HEAP16[$106>>1] = $110;
     $111 = (($112) + -1)|0;
     HEAP32[$11>>2] = $111;
     $113 = ($111|0)==(0);
     if ($113) {
      $$lcssa = $97;
      break;
     } else {
      $112 = $111;$97 = $96;$99 = $105;
     }
    }
    $114 = (($$lcssa) + 2)|0;
    HEAP32[$4>>2] = $114;
    $159 = $114;$bflush$0 = $88;
   } else {
    $130 = HEAP32[$4>>2]|0;
    $131 = HEAP32[$5>>2]|0;
    $132 = (($131) + ($130)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = HEAP32[$13>>2]|0;
    $135 = HEAP32[$14>>2]|0;
    $136 = (($135) + ($134<<1)|0);
    HEAP16[$136>>1] = 0;
    $137 = (($134) + 1)|0;
    HEAP32[$13>>2] = $137;
    $138 = HEAP32[$15>>2]|0;
    $139 = (($138) + ($134)|0);
    HEAP8[$139>>0] = $133;
    $140 = $133&255;
    $141 = (((($s)) + 148|0) + ($140<<2)|0);
    $142 = HEAP16[$141>>1]|0;
    $143 = (($142) + 1)<<16>>16;
    HEAP16[$141>>1] = $143;
    $144 = HEAP32[$13>>2]|0;
    $145 = HEAP32[$16>>2]|0;
    $146 = (($145) + -1)|0;
    $147 = ($144|0)==($146|0);
    $148 = $147&1;
    $149 = HEAP32[$0>>2]|0;
    $150 = (($149) + -1)|0;
    HEAP32[$0>>2] = $150;
    $151 = HEAP32[$4>>2]|0;
    $152 = (($151) + 1)|0;
    HEAP32[$4>>2] = $152;
    $159 = $152;$bflush$0 = $148;
   }
  } while(0);
  $153 = ($bflush$0|0)==(0);
  if ($153) {
   continue;
  }
  $154 = HEAP32[$18>>2]|0;
  $155 = ($154|0)>(-1);
  if ($155) {
   $156 = HEAP32[$5>>2]|0;
   $157 = (($156) + ($154)|0);
   $160 = $157;
  } else {
   $160 = 0;
  }
  $158 = (($159) - ($154))|0;
  __tr_flush_block($s,$160,$158,0);
  $161 = HEAP32[$4>>2]|0;
  HEAP32[$18>>2] = $161;
  $162 = HEAP32[$s>>2]|0;
  $163 = ((($162)) + 28|0);
  $164 = HEAP32[$163>>2]|0;
  __tr_flush_bits($164);
  $165 = ((($164)) + 20|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($162)) + 16|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ($166>>>0)>($168>>>0);
  $$$i = $169 ? $168 : $166;
  $170 = ($$$i|0)==(0);
  if (!($170)) {
   $171 = ((($162)) + 12|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ((($164)) + 16|0);
   $174 = HEAP32[$173>>2]|0;
   _memcpy(($172|0),($174|0),($$$i|0))|0;
   $175 = HEAP32[$171>>2]|0;
   $176 = (($175) + ($$$i)|0);
   HEAP32[$171>>2] = $176;
   $177 = HEAP32[$173>>2]|0;
   $178 = (($177) + ($$$i)|0);
   HEAP32[$173>>2] = $178;
   $179 = ((($162)) + 20|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($180) + ($$$i))|0;
   HEAP32[$179>>2] = $181;
   $182 = HEAP32[$167>>2]|0;
   $183 = (($182) - ($$$i))|0;
   HEAP32[$167>>2] = $183;
   $184 = HEAP32[$165>>2]|0;
   $185 = (($184) - ($$$i))|0;
   HEAP32[$165>>2] = $185;
   $186 = ($184|0)==($$$i|0);
   if ($186) {
    $187 = ((($164)) + 8|0);
    $188 = HEAP32[$187>>2]|0;
    HEAP32[$173>>2] = $188;
   }
  }
  $189 = HEAP32[$s>>2]|0;
  $190 = ((($189)) + 16|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($191|0)==(0);
  if ($192) {
   $$0 = 0;
   label = 39;
   break;
  }
 }
 if ((label|0) == 24) {
  $193 = HEAP32[$4>>2]|0;
  $194 = ($193>>>0)<(2);
  $$ = $194 ? $193 : 2;
  $195 = ((($s)) + 5812|0);
  HEAP32[$195>>2] = $$;
  $196 = ($flush|0)==(4);
  if ($196) {
   $197 = HEAP32[$18>>2]|0;
   $198 = ($197|0)>(-1);
   if ($198) {
    $199 = HEAP32[$5>>2]|0;
    $200 = (($199) + ($197)|0);
    $202 = $200;
   } else {
    $202 = 0;
   }
   $201 = (($193) - ($197))|0;
   __tr_flush_block($s,$202,$201,1);
   $203 = HEAP32[$4>>2]|0;
   HEAP32[$18>>2] = $203;
   $204 = HEAP32[$s>>2]|0;
   $205 = ((($204)) + 28|0);
   $206 = HEAP32[$205>>2]|0;
   __tr_flush_bits($206);
   $207 = ((($206)) + 20|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($204)) + 16|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ($208>>>0)>($210>>>0);
   $$$i4 = $211 ? $210 : $208;
   $212 = ($$$i4|0)==(0);
   if (!($212)) {
    $213 = ((($204)) + 12|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ((($206)) + 16|0);
    $216 = HEAP32[$215>>2]|0;
    _memcpy(($214|0),($216|0),($$$i4|0))|0;
    $217 = HEAP32[$213>>2]|0;
    $218 = (($217) + ($$$i4)|0);
    HEAP32[$213>>2] = $218;
    $219 = HEAP32[$215>>2]|0;
    $220 = (($219) + ($$$i4)|0);
    HEAP32[$215>>2] = $220;
    $221 = ((($204)) + 20|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = (($222) + ($$$i4))|0;
    HEAP32[$221>>2] = $223;
    $224 = HEAP32[$209>>2]|0;
    $225 = (($224) - ($$$i4))|0;
    HEAP32[$209>>2] = $225;
    $226 = HEAP32[$207>>2]|0;
    $227 = (($226) - ($$$i4))|0;
    HEAP32[$207>>2] = $227;
    $228 = ($226|0)==($$$i4|0);
    if ($228) {
     $229 = ((($206)) + 8|0);
     $230 = HEAP32[$229>>2]|0;
     HEAP32[$215>>2] = $230;
    }
   }
   $231 = HEAP32[$s>>2]|0;
   $232 = ((($231)) + 16|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)==(0);
   $$3 = $234 ? 2 : 3;
   $$0 = $$3;
   return ($$0|0);
  }
  $235 = HEAP32[$13>>2]|0;
  $236 = ($235|0)==(0);
  if (!($236)) {
   $237 = HEAP32[$18>>2]|0;
   $238 = ($237|0)>(-1);
   if ($238) {
    $239 = HEAP32[$5>>2]|0;
    $240 = (($239) + ($237)|0);
    $242 = $240;
   } else {
    $242 = 0;
   }
   $241 = (($193) - ($237))|0;
   __tr_flush_block($s,$242,$241,0);
   $243 = HEAP32[$4>>2]|0;
   HEAP32[$18>>2] = $243;
   $244 = HEAP32[$s>>2]|0;
   $245 = ((($244)) + 28|0);
   $246 = HEAP32[$245>>2]|0;
   __tr_flush_bits($246);
   $247 = ((($246)) + 20|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ((($244)) + 16|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($248>>>0)>($250>>>0);
   $$$i6 = $251 ? $250 : $248;
   $252 = ($$$i6|0)==(0);
   if (!($252)) {
    $253 = ((($244)) + 12|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ((($246)) + 16|0);
    $256 = HEAP32[$255>>2]|0;
    _memcpy(($254|0),($256|0),($$$i6|0))|0;
    $257 = HEAP32[$253>>2]|0;
    $258 = (($257) + ($$$i6)|0);
    HEAP32[$253>>2] = $258;
    $259 = HEAP32[$255>>2]|0;
    $260 = (($259) + ($$$i6)|0);
    HEAP32[$255>>2] = $260;
    $261 = ((($244)) + 20|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (($262) + ($$$i6))|0;
    HEAP32[$261>>2] = $263;
    $264 = HEAP32[$249>>2]|0;
    $265 = (($264) - ($$$i6))|0;
    HEAP32[$249>>2] = $265;
    $266 = HEAP32[$247>>2]|0;
    $267 = (($266) - ($$$i6))|0;
    HEAP32[$247>>2] = $267;
    $268 = ($266|0)==($$$i6|0);
    if ($268) {
     $269 = ((($246)) + 8|0);
     $270 = HEAP32[$269>>2]|0;
     HEAP32[$255>>2] = $270;
    }
   }
   $271 = HEAP32[$s>>2]|0;
   $272 = ((($271)) + 16|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = ($273|0)==(0);
   if ($274) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_slow($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $$ = 0, $$$i = 0, $$$i3 = 0, $$$i5 = 0, $$$i7 = 0, $$0 = 0, $$2 = 0, $$lcssa = 0, $$lcssa20 = 0, $$neg11 = 0, $$pn = 0, $$pr = 0, $$pr9 = 0, $$pre = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 116|0);
 $1 = ($flush|0)==(0);
 $2 = ((($s)) + 72|0);
 $3 = ((($s)) + 88|0);
 $4 = ((($s)) + 108|0);
 $5 = ((($s)) + 56|0);
 $6 = ((($s)) + 84|0);
 $7 = ((($s)) + 68|0);
 $8 = ((($s)) + 52|0);
 $9 = ((($s)) + 64|0);
 $10 = ((($s)) + 96|0);
 $11 = ((($s)) + 120|0);
 $12 = ((($s)) + 112|0);
 $13 = ((($s)) + 100|0);
 $14 = ((($s)) + 5792|0);
 $15 = ((($s)) + 5796|0);
 $16 = ((($s)) + 5784|0);
 $17 = ((($s)) + 5788|0);
 $18 = ((($s)) + 104|0);
 $19 = ((($s)) + 92|0);
 $20 = ((($s)) + 128|0);
 $21 = ((($s)) + 44|0);
 $22 = ((($s)) + 136|0);
 L1: while(1) {
  $$pr = HEAP32[$0>>2]|0;
  $23 = $$pr;
  while(1) {
   $24 = ($23>>>0)<(262);
   if ($24) {
    _fill_window($s);
    $25 = HEAP32[$0>>2]|0;
    $26 = ($25>>>0)<(262);
    $or$cond = $1 & $26;
    if ($or$cond) {
     $$0 = 0;
     label = 55;
     break L1;
    }
    $27 = ($25|0)==(0);
    if ($27) {
     label = 38;
     break L1;
    }
    $28 = ($25>>>0)>(2);
    if ($28) {
     label = 8;
    } else {
     $29 = HEAP32[$10>>2]|0;
     HEAP32[$11>>2] = $29;
     $30 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $30;
     HEAP32[$10>>2] = 2;
     $348 = 2;
     label = 16;
    }
   } else {
    label = 8;
   }
   do {
    if ((label|0) == 8) {
     label = 0;
     $31 = HEAP32[$2>>2]|0;
     $32 = HEAP32[$3>>2]|0;
     $33 = $31 << $32;
     $34 = HEAP32[$4>>2]|0;
     $35 = (($34) + 2)|0;
     $36 = HEAP32[$5>>2]|0;
     $37 = (($36) + ($35)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 ^ $33;
     $41 = HEAP32[$6>>2]|0;
     $42 = $40 & $41;
     HEAP32[$2>>2] = $42;
     $43 = HEAP32[$7>>2]|0;
     $44 = (($43) + ($42<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = HEAP32[$8>>2]|0;
     $47 = $46 & $34;
     $48 = HEAP32[$9>>2]|0;
     $49 = (($48) + ($47<<1)|0);
     HEAP16[$49>>1] = $45;
     $50 = $45&65535;
     $51 = $34&65535;
     HEAP16[$44>>1] = $51;
     $52 = HEAP32[$10>>2]|0;
     HEAP32[$11>>2] = $52;
     $53 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $53;
     HEAP32[$10>>2] = 2;
     $54 = ($45<<16>>16)==(0);
     if ($54) {
      $348 = 2;
      label = 16;
     } else {
      $55 = HEAP32[$20>>2]|0;
      $56 = ($52>>>0)<($55>>>0);
      if ($56) {
       $57 = HEAP32[$4>>2]|0;
       $58 = (($57) - ($50))|0;
       $59 = HEAP32[$21>>2]|0;
       $60 = (($59) + -262)|0;
       $61 = ($58>>>0)>($60>>>0);
       if ($61) {
        $348 = 2;
        label = 16;
       } else {
        $62 = (_longest_match($s,$50)|0);
        HEAP32[$10>>2] = $62;
        $63 = ($62>>>0)<(6);
        if ($63) {
         $64 = HEAP32[$22>>2]|0;
         $65 = ($64|0)==(1);
         if (!($65)) {
          $66 = ($62|0)==(3);
          if (!($66)) {
           $348 = $62;
           label = 16;
           break;
          }
          $67 = HEAP32[$4>>2]|0;
          $68 = HEAP32[$12>>2]|0;
          $69 = (($67) - ($68))|0;
          $70 = ($69>>>0)>(4096);
          if (!($70)) {
           $348 = 3;
           label = 16;
           break;
          }
         }
         HEAP32[$10>>2] = 2;
         $348 = 2;
         label = 16;
        } else {
         $348 = $62;
         label = 16;
        }
       }
      } else {
       $71 = $52;$73 = 2;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $$pr9 = HEAP32[$11>>2]|0;
    $71 = $$pr9;$73 = $348;
   }
   $72 = ($71>>>0)<(3);
   $74 = ($73>>>0)>($71>>>0);
   $or$cond15 = $72 | $74;
   if (!($or$cond15)) {
    $$lcssa = $71;
    break;
   }
   $181 = HEAP32[$18>>2]|0;
   $182 = ($181|0)==(0);
   if ($182) {
    HEAP32[$18>>2] = 1;
    $245 = HEAP32[$4>>2]|0;
    $246 = (($245) + 1)|0;
    HEAP32[$4>>2] = $246;
    $247 = HEAP32[$0>>2]|0;
    $248 = (($247) + -1)|0;
    HEAP32[$0>>2] = $248;
    $23 = $248;
    continue;
   }
   $183 = HEAP32[$4>>2]|0;
   $184 = (($183) + -1)|0;
   $185 = HEAP32[$5>>2]|0;
   $186 = (($185) + ($184)|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = HEAP32[$14>>2]|0;
   $189 = HEAP32[$15>>2]|0;
   $190 = (($189) + ($188<<1)|0);
   HEAP16[$190>>1] = 0;
   $191 = (($188) + 1)|0;
   HEAP32[$14>>2] = $191;
   $192 = HEAP32[$16>>2]|0;
   $193 = (($192) + ($188)|0);
   HEAP8[$193>>0] = $187;
   $194 = $187&255;
   $195 = (((($s)) + 148|0) + ($194<<2)|0);
   $196 = HEAP16[$195>>1]|0;
   $197 = (($196) + 1)<<16>>16;
   HEAP16[$195>>1] = $197;
   $198 = HEAP32[$14>>2]|0;
   $199 = HEAP32[$17>>2]|0;
   $200 = (($199) + -1)|0;
   $201 = ($198|0)==($200|0);
   if ($201) {
    $202 = HEAP32[$19>>2]|0;
    $203 = ($202|0)>(-1);
    if ($203) {
     $204 = HEAP32[$5>>2]|0;
     $205 = (($204) + ($202)|0);
     $208 = $205;
    } else {
     $208 = 0;
    }
    $206 = HEAP32[$4>>2]|0;
    $207 = (($206) - ($202))|0;
    __tr_flush_block($s,$208,$207,0);
    $209 = HEAP32[$4>>2]|0;
    HEAP32[$19>>2] = $209;
    $210 = HEAP32[$s>>2]|0;
    $211 = ((($210)) + 28|0);
    $212 = HEAP32[$211>>2]|0;
    __tr_flush_bits($212);
    $213 = ((($212)) + 20|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ((($210)) + 16|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($214>>>0)>($216>>>0);
    $$$i3 = $217 ? $216 : $214;
    $218 = ($$$i3|0)==(0);
    if (!($218)) {
     $219 = ((($210)) + 12|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ((($212)) + 16|0);
     $222 = HEAP32[$221>>2]|0;
     _memcpy(($220|0),($222|0),($$$i3|0))|0;
     $223 = HEAP32[$219>>2]|0;
     $224 = (($223) + ($$$i3)|0);
     HEAP32[$219>>2] = $224;
     $225 = HEAP32[$221>>2]|0;
     $226 = (($225) + ($$$i3)|0);
     HEAP32[$221>>2] = $226;
     $227 = ((($210)) + 20|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (($228) + ($$$i3))|0;
     HEAP32[$227>>2] = $229;
     $230 = HEAP32[$215>>2]|0;
     $231 = (($230) - ($$$i3))|0;
     HEAP32[$215>>2] = $231;
     $232 = HEAP32[$213>>2]|0;
     $233 = (($232) - ($$$i3))|0;
     HEAP32[$213>>2] = $233;
     $234 = ($232|0)==($$$i3|0);
     if ($234) {
      $235 = ((($212)) + 8|0);
      $236 = HEAP32[$235>>2]|0;
      HEAP32[$221>>2] = $236;
     }
    }
   }
   $237 = HEAP32[$4>>2]|0;
   $238 = (($237) + 1)|0;
   HEAP32[$4>>2] = $238;
   $239 = HEAP32[$0>>2]|0;
   $240 = (($239) + -1)|0;
   HEAP32[$0>>2] = $240;
   $241 = HEAP32[$s>>2]|0;
   $242 = ((($241)) + 16|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)==(0);
   if ($244) {
    $$0 = 0;
    label = 55;
    break L1;
   } else {
    $23 = $240;
   }
  }
  $75 = HEAP32[$4>>2]|0;
  $76 = HEAP32[$0>>2]|0;
  $77 = (($75) + -3)|0;
  $78 = (($77) + ($76))|0;
  $79 = (($$lcssa) + 253)|0;
  $80 = $79&255;
  $81 = (($75) + 65535)|0;
  $82 = HEAP32[$13>>2]|0;
  $83 = (($81) - ($82))|0;
  $84 = $83&65535;
  $85 = HEAP32[$14>>2]|0;
  $86 = HEAP32[$15>>2]|0;
  $87 = (($86) + ($85<<1)|0);
  HEAP16[$87>>1] = $84;
  $88 = (($85) + 1)|0;
  HEAP32[$14>>2] = $88;
  $89 = HEAP32[$16>>2]|0;
  $90 = (($89) + ($85)|0);
  HEAP8[$90>>0] = $80;
  $91 = (($83) + 65535)|0;
  $92 = $79 & 255;
  $93 = (17897 + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $95 | 256;
  $97 = (($96) + 1)|0;
  $98 = (((($s)) + 148|0) + ($97<<2)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = (($99) + 1)<<16>>16;
  HEAP16[$98>>1] = $100;
  $101 = $91 & 65535;
  $102 = ($101>>>0)<(256);
  $103 = $101 >>> 7;
  $104 = (($103) + 256)|0;
  $$pn = $102 ? $101 : $104;
  $$sink$in = (17385 + ($$pn)|0);
  $$sink = HEAP8[$$sink$in>>0]|0;
  $105 = $$sink&255;
  $106 = (((($s)) + 2440|0) + ($105<<2)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = (($107) + 1)<<16>>16;
  HEAP16[$106>>1] = $108;
  $109 = HEAP32[$14>>2]|0;
  $110 = HEAP32[$17>>2]|0;
  $111 = (($110) + -1)|0;
  $112 = HEAP32[$11>>2]|0;
  $113 = HEAP32[$0>>2]|0;
  $$neg11 = (1 - ($112))|0;
  $114 = (($$neg11) + ($113))|0;
  HEAP32[$0>>2] = $114;
  $115 = (($112) + -2)|0;
  HEAP32[$11>>2] = $115;
  $$pre = HEAP32[$4>>2]|0;
  $117 = $$pre;$139 = $115;
  while(1) {
   $116 = (($117) + 1)|0;
   HEAP32[$4>>2] = $116;
   $118 = ($116>>>0)>($78>>>0);
   if (!($118)) {
    $119 = HEAP32[$2>>2]|0;
    $120 = HEAP32[$3>>2]|0;
    $121 = $119 << $120;
    $122 = (($117) + 3)|0;
    $123 = HEAP32[$5>>2]|0;
    $124 = (($123) + ($122)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = $126 ^ $121;
    $128 = HEAP32[$6>>2]|0;
    $129 = $127 & $128;
    HEAP32[$2>>2] = $129;
    $130 = HEAP32[$7>>2]|0;
    $131 = (($130) + ($129<<1)|0);
    $132 = HEAP16[$131>>1]|0;
    $133 = HEAP32[$8>>2]|0;
    $134 = $133 & $116;
    $135 = HEAP32[$9>>2]|0;
    $136 = (($135) + ($134<<1)|0);
    HEAP16[$136>>1] = $132;
    $137 = $116&65535;
    HEAP16[$131>>1] = $137;
   }
   $138 = (($139) + -1)|0;
   HEAP32[$11>>2] = $138;
   $140 = ($138|0)==(0);
   if ($140) {
    $$lcssa20 = $117;
    break;
   } else {
    $117 = $116;$139 = $138;
   }
  }
  $141 = ($109|0)==($111|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$10>>2] = 2;
  $142 = (($$lcssa20) + 2)|0;
  HEAP32[$4>>2] = $142;
  if (!($141)) {
   continue;
  }
  $143 = HEAP32[$19>>2]|0;
  $144 = ($143|0)>(-1);
  if ($144) {
   $145 = HEAP32[$5>>2]|0;
   $146 = (($145) + ($143)|0);
   $148 = $146;
  } else {
   $148 = 0;
  }
  $147 = (($142) - ($143))|0;
  __tr_flush_block($s,$148,$147,0);
  $149 = HEAP32[$4>>2]|0;
  HEAP32[$19>>2] = $149;
  $150 = HEAP32[$s>>2]|0;
  $151 = ((($150)) + 28|0);
  $152 = HEAP32[$151>>2]|0;
  __tr_flush_bits($152);
  $153 = ((($152)) + 20|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ((($150)) + 16|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($154>>>0)>($156>>>0);
  $$$i = $157 ? $156 : $154;
  $158 = ($$$i|0)==(0);
  if (!($158)) {
   $159 = ((($150)) + 12|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ((($152)) + 16|0);
   $162 = HEAP32[$161>>2]|0;
   _memcpy(($160|0),($162|0),($$$i|0))|0;
   $163 = HEAP32[$159>>2]|0;
   $164 = (($163) + ($$$i)|0);
   HEAP32[$159>>2] = $164;
   $165 = HEAP32[$161>>2]|0;
   $166 = (($165) + ($$$i)|0);
   HEAP32[$161>>2] = $166;
   $167 = ((($150)) + 20|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + ($$$i))|0;
   HEAP32[$167>>2] = $169;
   $170 = HEAP32[$155>>2]|0;
   $171 = (($170) - ($$$i))|0;
   HEAP32[$155>>2] = $171;
   $172 = HEAP32[$153>>2]|0;
   $173 = (($172) - ($$$i))|0;
   HEAP32[$153>>2] = $173;
   $174 = ($172|0)==($$$i|0);
   if ($174) {
    $175 = ((($152)) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    HEAP32[$161>>2] = $176;
   }
  }
  $177 = HEAP32[$s>>2]|0;
  $178 = ((($177)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)==(0);
  if ($180) {
   $$0 = 0;
   label = 55;
   break;
  }
 }
 if ((label|0) == 38) {
  $249 = HEAP32[$18>>2]|0;
  $250 = ($249|0)==(0);
  if (!($250)) {
   $251 = HEAP32[$4>>2]|0;
   $252 = (($251) + -1)|0;
   $253 = HEAP32[$5>>2]|0;
   $254 = (($253) + ($252)|0);
   $255 = HEAP8[$254>>0]|0;
   $256 = HEAP32[$14>>2]|0;
   $257 = HEAP32[$15>>2]|0;
   $258 = (($257) + ($256<<1)|0);
   HEAP16[$258>>1] = 0;
   $259 = (($256) + 1)|0;
   HEAP32[$14>>2] = $259;
   $260 = HEAP32[$16>>2]|0;
   $261 = (($260) + ($256)|0);
   HEAP8[$261>>0] = $255;
   $262 = $255&255;
   $263 = (((($s)) + 148|0) + ($262<<2)|0);
   $264 = HEAP16[$263>>1]|0;
   $265 = (($264) + 1)<<16>>16;
   HEAP16[$263>>1] = $265;
   HEAP32[$18>>2] = 0;
  }
  $266 = HEAP32[$4>>2]|0;
  $267 = ($266>>>0)<(2);
  $$ = $267 ? $266 : 2;
  $268 = ((($s)) + 5812|0);
  HEAP32[$268>>2] = $$;
  $269 = ($flush|0)==(4);
  if ($269) {
   $270 = HEAP32[$19>>2]|0;
   $271 = ($270|0)>(-1);
   if ($271) {
    $272 = HEAP32[$5>>2]|0;
    $273 = (($272) + ($270)|0);
    $275 = $273;
   } else {
    $275 = 0;
   }
   $274 = (($266) - ($270))|0;
   __tr_flush_block($s,$275,$274,1);
   $276 = HEAP32[$4>>2]|0;
   HEAP32[$19>>2] = $276;
   $277 = HEAP32[$s>>2]|0;
   $278 = ((($277)) + 28|0);
   $279 = HEAP32[$278>>2]|0;
   __tr_flush_bits($279);
   $280 = ((($279)) + 20|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ((($277)) + 16|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = ($281>>>0)>($283>>>0);
   $$$i5 = $284 ? $283 : $281;
   $285 = ($$$i5|0)==(0);
   if (!($285)) {
    $286 = ((($277)) + 12|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = ((($279)) + 16|0);
    $289 = HEAP32[$288>>2]|0;
    _memcpy(($287|0),($289|0),($$$i5|0))|0;
    $290 = HEAP32[$286>>2]|0;
    $291 = (($290) + ($$$i5)|0);
    HEAP32[$286>>2] = $291;
    $292 = HEAP32[$288>>2]|0;
    $293 = (($292) + ($$$i5)|0);
    HEAP32[$288>>2] = $293;
    $294 = ((($277)) + 20|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + ($$$i5))|0;
    HEAP32[$294>>2] = $296;
    $297 = HEAP32[$282>>2]|0;
    $298 = (($297) - ($$$i5))|0;
    HEAP32[$282>>2] = $298;
    $299 = HEAP32[$280>>2]|0;
    $300 = (($299) - ($$$i5))|0;
    HEAP32[$280>>2] = $300;
    $301 = ($299|0)==($$$i5|0);
    if ($301) {
     $302 = ((($279)) + 8|0);
     $303 = HEAP32[$302>>2]|0;
     HEAP32[$288>>2] = $303;
    }
   }
   $304 = HEAP32[$s>>2]|0;
   $305 = ((($304)) + 16|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)==(0);
   $$2 = $307 ? 2 : 3;
   $$0 = $$2;
   return ($$0|0);
  }
  $308 = HEAP32[$14>>2]|0;
  $309 = ($308|0)==(0);
  if (!($309)) {
   $310 = HEAP32[$19>>2]|0;
   $311 = ($310|0)>(-1);
   if ($311) {
    $312 = HEAP32[$5>>2]|0;
    $313 = (($312) + ($310)|0);
    $315 = $313;
   } else {
    $315 = 0;
   }
   $314 = (($266) - ($310))|0;
   __tr_flush_block($s,$315,$314,0);
   $316 = HEAP32[$4>>2]|0;
   HEAP32[$19>>2] = $316;
   $317 = HEAP32[$s>>2]|0;
   $318 = ((($317)) + 28|0);
   $319 = HEAP32[$318>>2]|0;
   __tr_flush_bits($319);
   $320 = ((($319)) + 20|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = ((($317)) + 16|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = ($321>>>0)>($323>>>0);
   $$$i7 = $324 ? $323 : $321;
   $325 = ($$$i7|0)==(0);
   if (!($325)) {
    $326 = ((($317)) + 12|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ((($319)) + 16|0);
    $329 = HEAP32[$328>>2]|0;
    _memcpy(($327|0),($329|0),($$$i7|0))|0;
    $330 = HEAP32[$326>>2]|0;
    $331 = (($330) + ($$$i7)|0);
    HEAP32[$326>>2] = $331;
    $332 = HEAP32[$328>>2]|0;
    $333 = (($332) + ($$$i7)|0);
    HEAP32[$328>>2] = $333;
    $334 = ((($317)) + 20|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = (($335) + ($$$i7))|0;
    HEAP32[$334>>2] = $336;
    $337 = HEAP32[$322>>2]|0;
    $338 = (($337) - ($$$i7))|0;
    HEAP32[$322>>2] = $338;
    $339 = HEAP32[$320>>2]|0;
    $340 = (($339) - ($$$i7))|0;
    HEAP32[$320>>2] = $340;
    $341 = ($339|0)==($$$i7|0);
    if ($341) {
     $342 = ((($319)) + 8|0);
     $343 = HEAP32[$342>>2]|0;
     HEAP32[$328>>2] = $343;
    }
   }
   $344 = HEAP32[$s>>2]|0;
   $345 = ((($344)) + 16|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = ($346|0)==(0);
   if ($347) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 55) {
  return ($$0|0);
 }
 return (0)|0;
}
function _longest_match($s,$cur_match) {
 $s = $s|0;
 $cur_match = $cur_match|0;
 var $$ = 0, $$09 = 0, $$19 = 0, $$best_len$2 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum17 = 0, $$sum18 = 0, $$sum20 = 0, $$sum21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best_len$0 = 0, $best_len$1 = 0, $best_len$2 = 0, $chain_length$0 = 0, $chain_length$1 = 0, $match$0 = 0, $or$cond = 0, $scan$1 = 0, $scan$2 = 0, $scan_end$0 = 0, $scan_end$1 = 0, $scan_end1$0 = 0, $scan_end1$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 124|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($s)) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 $7 = ((($s)) + 120|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($s)) + 144|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($s)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -262)|0;
 $14 = ($5>>>0)>($13>>>0);
 $15 = (($5) - ($13))|0;
 $$ = $14 ? $15 : 0;
 $16 = ((($s)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($s)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum = (($5) + 258)|0;
 $20 = (($3) + ($$sum)|0);
 $21 = (($5) + -1)|0;
 $$sum10 = (($21) + ($8))|0;
 $22 = (($3) + ($$sum10)|0);
 $23 = HEAP8[$22>>0]|0;
 $$sum11 = (($8) + ($5))|0;
 $24 = (($3) + ($$sum11)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ((($s)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($8>>>0)<($27>>>0);
 $29 = $1 >>> 2;
 $chain_length$0 = $28 ? $1 : $29;
 $30 = ((($s)) + 116|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($10>>>0)>($31>>>0);
 $$19 = $32 ? $31 : $10;
 $33 = ((($s)) + 112|0);
 $$sum20 = (($5) + 1)|0;
 $34 = (($3) + ($$sum20)|0);
 $$sum21 = (($5) + 2)|0;
 $35 = (($3) + ($$sum21)|0);
 $36 = $20;
 $37 = (($5) + 257)|0;
 $$09 = $cur_match;$best_len$0 = $8;$chain_length$1 = $chain_length$0;$scan_end$0 = $25;$scan_end1$0 = $23;
 while(1) {
  $38 = (($3) + ($$09)|0);
  $$sum12 = (($$09) + ($best_len$0))|0;
  $39 = (($3) + ($$sum12)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==($scan_end$0<<24>>24);
  if ($41) {
   $42 = (($best_len$0) + -1)|0;
   $$sum13 = (($42) + ($$09))|0;
   $43 = (($3) + ($$sum13)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==($scan_end1$0<<24>>24);
   if ($45) {
    $46 = HEAP8[$38>>0]|0;
    $47 = HEAP8[$6>>0]|0;
    $48 = ($46<<24>>24)==($47<<24>>24);
    if ($48) {
     $$sum14 = (($$09) + 1)|0;
     $49 = (($3) + ($$sum14)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP8[$34>>0]|0;
     $52 = ($50<<24>>24)==($51<<24>>24);
     if ($52) {
      $$sum15 = (($$09) + 2)|0;
      $53 = (($3) + ($$sum15)|0);
      $match$0 = $53;$scan$1 = $35;
      while(1) {
       $54 = ((($scan$1)) + 1|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = ((($match$0)) + 1|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = ($55<<24>>24)==($57<<24>>24);
       if (!($58)) {
        $scan$2 = $54;
        break;
       }
       $59 = ((($scan$1)) + 2|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = ((($match$0)) + 2|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = ($60<<24>>24)==($62<<24>>24);
       if (!($63)) {
        $scan$2 = $59;
        break;
       }
       $64 = ((($scan$1)) + 3|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = ((($match$0)) + 3|0);
       $67 = HEAP8[$66>>0]|0;
       $68 = ($65<<24>>24)==($67<<24>>24);
       if (!($68)) {
        $scan$2 = $64;
        break;
       }
       $69 = ((($scan$1)) + 4|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = ((($match$0)) + 4|0);
       $72 = HEAP8[$71>>0]|0;
       $73 = ($70<<24>>24)==($72<<24>>24);
       if (!($73)) {
        $scan$2 = $69;
        break;
       }
       $74 = ((($scan$1)) + 5|0);
       $75 = HEAP8[$74>>0]|0;
       $76 = ((($match$0)) + 5|0);
       $77 = HEAP8[$76>>0]|0;
       $78 = ($75<<24>>24)==($77<<24>>24);
       if (!($78)) {
        $scan$2 = $74;
        break;
       }
       $79 = ((($scan$1)) + 6|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = ((($match$0)) + 6|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($80<<24>>24)==($82<<24>>24);
       if (!($83)) {
        $scan$2 = $79;
        break;
       }
       $84 = ((($scan$1)) + 7|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = ((($match$0)) + 7|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($85<<24>>24)==($87<<24>>24);
       if (!($88)) {
        $scan$2 = $84;
        break;
       }
       $89 = ((($scan$1)) + 8|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ((($match$0)) + 8|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = ($90<<24>>24)==($92<<24>>24);
       $94 = ($89>>>0)<($20>>>0);
       $or$cond = $94 & $93;
       if ($or$cond) {
        $match$0 = $91;$scan$1 = $89;
       } else {
        $scan$2 = $89;
        break;
       }
      }
      $95 = $scan$2;
      $96 = (($95) - ($36))|0;
      $97 = (($96) + 258)|0;
      $98 = ($97|0)>($best_len$0|0);
      if ($98) {
       HEAP32[$33>>2] = $$09;
       $99 = ($97|0)<($$19|0);
       if (!($99)) {
        $best_len$2 = $97;
        label = 20;
        break;
       }
       $$sum17 = (($37) + ($96))|0;
       $100 = (($3) + ($$sum17)|0);
       $101 = HEAP8[$100>>0]|0;
       $$sum18 = (($97) + ($5))|0;
       $102 = (($3) + ($$sum18)|0);
       $103 = HEAP8[$102>>0]|0;
       $best_len$1 = $97;$scan_end$1 = $103;$scan_end1$1 = $101;
      } else {
       $best_len$1 = $best_len$0;$scan_end$1 = $scan_end$0;$scan_end1$1 = $scan_end1$0;
      }
     } else {
      $best_len$1 = $best_len$0;$scan_end$1 = $scan_end$0;$scan_end1$1 = $scan_end1$0;
     }
    } else {
     $best_len$1 = $best_len$0;$scan_end$1 = $scan_end$0;$scan_end1$1 = $scan_end1$0;
    }
   } else {
    $best_len$1 = $best_len$0;$scan_end$1 = $scan_end$0;$scan_end1$1 = $scan_end1$0;
   }
  } else {
   $best_len$1 = $best_len$0;$scan_end$1 = $scan_end$0;$scan_end1$1 = $scan_end1$0;
  }
  $104 = $$09 & $19;
  $105 = (($17) + ($104<<1)|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106&65535;
  $108 = ($107>>>0)>($$>>>0);
  if (!($108)) {
   $best_len$2 = $best_len$1;
   label = 20;
   break;
  }
  $109 = (($chain_length$1) + -1)|0;
  $110 = ($109|0)==(0);
  if ($110) {
   $best_len$2 = $best_len$1;
   label = 20;
   break;
  } else {
   $$09 = $107;$best_len$0 = $best_len$1;$chain_length$1 = $109;$scan_end$0 = $scan_end$1;$scan_end1$0 = $scan_end1$1;
  }
 }
 if ((label|0) == 20) {
  $111 = ($best_len$2>>>0)>($31>>>0);
  $$best_len$2 = $111 ? $31 : $best_len$2;
  return ($$best_len$2|0);
 }
 return (0)|0;
}
function __tr_init($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 148|0);
 $1 = ((($s)) + 2840|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($s)) + 2848|0);
 HEAP32[$2>>2] = 8800;
 $3 = ((($s)) + 2440|0);
 $4 = ((($s)) + 2852|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($s)) + 2860|0);
 HEAP32[$5>>2] = 8820;
 $6 = ((($s)) + 2684|0);
 $7 = ((($s)) + 2864|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($s)) + 2872|0);
 HEAP32[$8>>2] = 8840;
 $9 = ((($s)) + 5816|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($s)) + 5820|0);
 HEAP32[$10>>2] = 0;
 _init_block($s);
 return;
}
function __tr_stored_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $$011$i = 0, $$02$i = 0, $$off0 = 0, $$off0$in = 0, $$pre$phi$iZ2D = 0, $$pre$phi4$iZ2D = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5820|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(13);
 $3 = $last & 65535;
 $4 = $3 << $1;
 $5 = ((($s)) + 5816|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 | $4;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 if ($2) {
  $10 = $8&255;
  $11 = ((($s)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$11>>2] = $13;
  $14 = ((($s)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  HEAP8[$16>>0] = $10;
  $17 = HEAP16[$5>>1]|0;
  $18 = ($17&65535) >>> 8;
  $19 = $18&255;
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$14>>2]|0;
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = HEAP32[$0>>2]|0;
  $25 = (16 - ($24))|0;
  $26 = $3 >>> $25;
  $27 = $26&65535;
  HEAP16[$5>>1] = $27;
  $28 = (($24) + -13)|0;
  $$off0$in = $26;$storemerge = $28;
 } else {
  $29 = (($1) + 3)|0;
  $$off0$in = $8;$storemerge = $29;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$0>>2] = $storemerge;
 $30 = ($storemerge|0)>(8);
 do {
  if ($30) {
   $31 = ((($s)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$31>>2] = $33;
   $34 = ((($s)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32)|0);
   HEAP8[$36>>0] = $$off0;
   $37 = HEAP16[$5>>1]|0;
   $38 = ($37&65535) >>> 8;
   $39 = $38&255;
   $40 = HEAP32[$31>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$31>>2] = $41;
   $42 = HEAP32[$34>>2]|0;
   $43 = (($42) + ($40)|0);
   HEAP8[$43>>0] = $39;
   $$pre$phi$iZ2D = $31;$$pre$phi4$iZ2D = $34;
  } else {
   $44 = ($storemerge|0)>(0);
   $45 = ((($s)) + 20|0);
   if ($44) {
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[$45>>2] = $47;
    $48 = ((($s)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + ($46)|0);
    HEAP8[$50>>0] = $$off0;
    $$pre$phi$iZ2D = $45;$$pre$phi4$iZ2D = $48;
    break;
   } else {
    $$pre3$i = ((($s)) + 8|0);
    $$pre$phi$iZ2D = $45;$$pre$phi4$iZ2D = $$pre3$i;
    break;
   }
  }
 } while(0);
 HEAP16[$5>>1] = 0;
 HEAP32[$0>>2] = 0;
 $51 = $stored_len&255;
 $52 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$$pre$phi$iZ2D>>2] = $53;
 $54 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $55 = (($54) + ($52)|0);
 HEAP8[$55>>0] = $51;
 $56 = $stored_len >>> 8;
 $57 = $56&255;
 $58 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[$$pre$phi$iZ2D>>2] = $59;
 $60 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $61 = (($60) + ($58)|0);
 HEAP8[$61>>0] = $57;
 $62 = $stored_len & 65535;
 $63 = $62 ^ 65535;
 $64 = $63&255;
 $65 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$$pre$phi$iZ2D>>2] = $66;
 $67 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $68 = (($67) + ($65)|0);
 HEAP8[$68>>0] = $64;
 $69 = $63 >>> 8;
 $70 = $69&255;
 $71 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $72 = (($71) + 1)|0;
 HEAP32[$$pre$phi$iZ2D>>2] = $72;
 $73 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $74 = (($73) + ($71)|0);
 HEAP8[$74>>0] = $70;
 $75 = ($stored_len|0)==(0);
 if ($75) {
  return;
 } else {
  $$011$i = $stored_len;$$02$i = $buf;
 }
 while(1) {
  $76 = (($$011$i) + -1)|0;
  $77 = ((($$02$i)) + 1|0);
  $78 = HEAP8[$$02$i>>0]|0;
  $79 = HEAP32[$$pre$phi$iZ2D>>2]|0;
  $80 = (($79) + 1)|0;
  HEAP32[$$pre$phi$iZ2D>>2] = $80;
  $81 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
  $82 = (($81) + ($79)|0);
  HEAP8[$82>>0] = $78;
  $83 = ($76|0)==(0);
  if ($83) {
   break;
  } else {
   $$011$i = $76;$$02$i = $77;
  }
 }
 return;
}
function __tr_flush_bits($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5820|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(16);
 if ($2) {
  $3 = ((($s)) + 5816|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&255;
  $6 = ((($s)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $9 = ((($s)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7)|0);
  HEAP8[$11>>0] = $5;
  $12 = HEAP16[$3>>1]|0;
  $13 = ($12&65535) >>> 8;
  $14 = $13&255;
  $15 = HEAP32[$6>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$6>>2] = $16;
  $17 = HEAP32[$9>>2]|0;
  $18 = (($17) + ($15)|0);
  HEAP8[$18>>0] = $14;
  HEAP16[$3>>1] = 0;
  HEAP32[$0>>2] = 0;
  return;
 }
 $19 = ($1|0)>(7);
 if (!($19)) {
  return;
 }
 $20 = ((($s)) + 5816|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&255;
 $23 = ((($s)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$23>>2] = $25;
 $26 = ((($s)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24)|0);
 HEAP8[$28>>0] = $22;
 $29 = HEAP16[$20>>1]|0;
 $30 = ($29&65535) >>> 8;
 HEAP16[$20>>1] = $30;
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + -8)|0;
 HEAP32[$0>>2] = $32;
 return;
}
function __tr_align($s) {
 $s = $s|0;
 var $$off0 = 0, $$off0$in = 0, $$off03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5820|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(13);
 $3 = 2 << $1;
 $4 = ((($s)) + 5816|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 | $3;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 if ($2) {
  $9 = $7&255;
  $10 = ((($s)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$10>>2] = $12;
  $13 = ((($s)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11)|0);
  HEAP8[$15>>0] = $9;
  $16 = HEAP16[$4>>1]|0;
  $17 = ($16&65535) >>> 8;
  $18 = $17&255;
  $19 = HEAP32[$10>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$10>>2] = $20;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + ($19)|0);
  HEAP8[$22>>0] = $18;
  $23 = HEAP32[$0>>2]|0;
  $24 = (16 - ($23))|0;
  $25 = 2 >>> $24;
  $26 = $25&65535;
  HEAP16[$4>>1] = $26;
  $27 = (($23) + -13)|0;
  $$off0$in = $25;$storemerge = $27;
 } else {
  $28 = (($1) + 3)|0;
  $$off0$in = $7;$storemerge = $28;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$0>>2] = $storemerge;
 $29 = ($storemerge|0)>(9);
 if ($29) {
  $30 = ((($s)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$30>>2] = $32;
  $33 = ((($s)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31)|0);
  HEAP8[$35>>0] = $$off0;
  $36 = HEAP16[$4>>1]|0;
  $37 = ($36&65535) >>> 8;
  $38 = $37&255;
  $39 = HEAP32[$30>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$30>>2] = $40;
  $41 = HEAP32[$33>>2]|0;
  $42 = (($41) + ($39)|0);
  HEAP8[$42>>0] = $38;
  HEAP16[$4>>1] = 0;
  $43 = HEAP32[$0>>2]|0;
  $44 = (($43) + -9)|0;
  $$off03 = 0;$storemerge1 = $44;
 } else {
  $45 = (($storemerge) + 7)|0;
  $$off03 = $$off0;$storemerge1 = $45;
 }
 HEAP32[$0>>2] = $storemerge1;
 $46 = ($storemerge1|0)==(16);
 if ($46) {
  $47 = ((($s)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$47>>2] = $49;
  $50 = ((($s)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48)|0);
  HEAP8[$52>>0] = $$off03;
  $53 = HEAP16[$4>>1]|0;
  $54 = ($53&65535) >>> 8;
  $55 = $54&255;
  $56 = HEAP32[$47>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[$47>>2] = $57;
  $58 = HEAP32[$50>>2]|0;
  $59 = (($58) + ($56)|0);
  HEAP8[$59>>0] = $55;
  HEAP16[$4>>1] = 0;
  HEAP32[$0>>2] = 0;
  return;
 }
 $60 = ($storemerge1|0)>(7);
 if (!($60)) {
  return;
 }
 $61 = ((($s)) + 20|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 1)|0;
 HEAP32[$61>>2] = $63;
 $64 = ((($s)) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($62)|0);
 HEAP8[$66>>0] = $$off03;
 $67 = HEAP16[$4>>1]|0;
 $68 = ($67&65535) >>> 8;
 HEAP16[$4>>1] = $68;
 $69 = HEAP32[$0>>2]|0;
 $70 = (($69) + -8)|0;
 HEAP32[$0>>2] = $70;
 return;
}
function __tr_flush_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $$ = 0, $$$i = 0, $$$i$i = 0, $$$i1$i = 0, $$0$i = 0, $$1$i$i = 0, $$1$i2$i = 0, $$2$i$i = 0, $$2$i12$i = 0, $$lcssa = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$lcssa59 = 0, $$lcssa60 = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$pre = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $black_mask$03$i = 0, $count$0$i$i = 0, $count$0$i10$i = 0, $exitcond$i = 0, $max_blindex$0 = 0, $max_blindex$0$lcssa$i = 0, $max_count$1$ph$be$i$i = 0;
 var $max_count$1$ph$be$i13$i = 0, $max_count$1$ph$i$i = 0, $max_count$1$ph$i6$i = 0, $min_count$1$ph$be$i$i = 0, $min_count$1$ph$be$i14$i = 0, $min_count$1$ph$i$i = 0, $min_count$1$ph$i7$i = 0, $n$0$i$i = 0, $n$0$i9$i = 0, $n$0$ph$i$i = 0, $n$0$ph$i4$i = 0, $n$04$i = 0, $n$12$i = 0, $nextlen$0$ph$i$i = 0, $nextlen$0$ph$i5$i = 0, $opt_lenb$0 = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond$i11$i = 0, $or$cond3 = 0;
 var $prevlen$0$ph$i$i = 0, $prevlen$0$ph$i$i$phi = 0, $prevlen$0$ph$i3$i = 0, $prevlen$0$ph$i3$i$phi = 0, $rank$04$i = 0, $static_lenb$0 = 0, $storemerge = 0, $storemerge2 = 0, $storemerge2$i = 0, $storemerge3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[$s>>2]|0;
  $4 = ((($3)) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(2);
  if ($6) {
   $black_mask$03$i = -201342849;$n$04$i = 0;
   while(1) {
    $7 = $black_mask$03$i & 1;
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = (((($s)) + 148|0) + ($n$04$i<<2)|0);
     $10 = HEAP16[$9>>1]|0;
     $11 = ($10<<16>>16)==(0);
     if (!($11)) {
      $$0$i = 0;
      break;
     }
    }
    $12 = (($n$04$i) + 1)|0;
    $13 = $black_mask$03$i >>> 1;
    $14 = ($12|0)<(32);
    if ($14) {
     $black_mask$03$i = $13;$n$04$i = $12;
    } else {
     label = 6;
     break;
    }
   }
   L9: do {
    if ((label|0) == 6) {
     $15 = ((($s)) + 184|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = ($16<<16>>16)==(0);
     if ($17) {
      $18 = ((($s)) + 188|0);
      $19 = HEAP16[$18>>1]|0;
      $20 = ($19<<16>>16)==(0);
      if ($20) {
       $21 = ((($s)) + 200|0);
       $22 = HEAP16[$21>>1]|0;
       $23 = ($22<<16>>16)==(0);
       if ($23) {
        $n$12$i = 32;
        while(1) {
         $26 = (((($s)) + 148|0) + ($n$12$i<<2)|0);
         $27 = HEAP16[$26>>1]|0;
         $28 = ($27<<16>>16)==(0);
         $24 = (($n$12$i) + 1)|0;
         if (!($28)) {
          $$0$i = 1;
          break L9;
         }
         $25 = ($24|0)<(256);
         if ($25) {
          $n$12$i = $24;
         } else {
          $$0$i = 0;
          break;
         }
        }
       } else {
        $$0$i = 1;
       }
      } else {
       $$0$i = 1;
      }
     } else {
      $$0$i = 1;
     }
    }
   } while(0);
   HEAP32[$4>>2] = $$0$i;
  }
  $29 = ((($s)) + 2840|0);
  _build_tree($s,$29);
  $30 = ((($s)) + 2852|0);
  _build_tree($s,$30);
  $31 = ((($s)) + 2844|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($s)) + 150|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = ($34<<16>>16)==(0);
  $$$i$i = $36 ? 138 : 7;
  $$1$i$i = $36 ? 3 : 4;
  $37 = (($32) + 1)|0;
  $38 = (((((($s)) + 148|0) + ($37<<2)|0)) + 2|0);
  HEAP16[$38>>1] = -1;
  $39 = ((($s)) + 2752|0);
  $40 = ((($s)) + 2756|0);
  $41 = ((($s)) + 2748|0);
  $max_count$1$ph$i$i = $$$i$i;$min_count$1$ph$i$i = $$1$i$i;$n$0$ph$i$i = 0;$nextlen$0$ph$i$i = $35;$prevlen$0$ph$i$i = -1;
  L18: while(1) {
   $count$0$i$i = 0;$n$0$i$i = $n$0$ph$i$i;
   while(1) {
    $42 = ($n$0$i$i|0)>($32|0);
    if ($42) {
     break L18;
    }
    $43 = (($n$0$i$i) + 1)|0;
    $44 = (((((($s)) + 148|0) + ($43<<2)|0)) + 2|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45&65535;
    $47 = (($count$0$i$i) + 1)|0;
    $48 = ($47|0)<($max_count$1$ph$i$i|0);
    $49 = ($nextlen$0$ph$i$i|0)==($46|0);
    $or$cond$i$i = $48 & $49;
    if ($or$cond$i$i) {
     $count$0$i$i = $47;$n$0$i$i = $43;
    } else {
     $$lcssa59 = $43;$$lcssa60 = $45;$$lcssa61 = $46;$$lcssa62 = $47;$$lcssa63 = $49;
     break;
    }
   }
   $50 = ($$lcssa62|0)<($min_count$1$ph$i$i|0);
   do {
    if ($50) {
     $51 = (((($s)) + 2684|0) + ($nextlen$0$ph$i$i<<2)|0);
     $52 = HEAP16[$51>>1]|0;
     $53 = $52&65535;
     $54 = (($53) + ($$lcssa62))|0;
     $55 = $54&65535;
     HEAP16[$51>>1] = $55;
    } else {
     $56 = ($nextlen$0$ph$i$i|0)==(0);
     if ($56) {
      $63 = ($$lcssa62|0)<(11);
      if ($63) {
       $64 = HEAP16[$39>>1]|0;
       $65 = (($64) + 1)<<16>>16;
       HEAP16[$39>>1] = $65;
       break;
      } else {
       $66 = HEAP16[$40>>1]|0;
       $67 = (($66) + 1)<<16>>16;
       HEAP16[$40>>1] = $67;
       break;
      }
     } else {
      $57 = ($nextlen$0$ph$i$i|0)==($prevlen$0$ph$i$i|0);
      if (!($57)) {
       $58 = (((($s)) + 2684|0) + ($nextlen$0$ph$i$i<<2)|0);
       $59 = HEAP16[$58>>1]|0;
       $60 = (($59) + 1)<<16>>16;
       HEAP16[$58>>1] = $60;
      }
      $61 = HEAP16[$41>>1]|0;
      $62 = (($61) + 1)<<16>>16;
      HEAP16[$41>>1] = $62;
      break;
     }
    }
   } while(0);
   $68 = ($$lcssa60<<16>>16)==(0);
   $$2$i$i = $$lcssa63 ? 6 : 7;
   $max_count$1$ph$be$i$i = $68 ? 138 : $$2$i$i;
   $69 = $68 | $$lcssa63;
   $min_count$1$ph$be$i$i = $69 ? 3 : 4;
   $prevlen$0$ph$i$i$phi = $nextlen$0$ph$i$i;$max_count$1$ph$i$i = $max_count$1$ph$be$i$i;$min_count$1$ph$i$i = $min_count$1$ph$be$i$i;$n$0$ph$i$i = $$lcssa59;$nextlen$0$ph$i$i = $$lcssa61;$prevlen$0$ph$i$i = $prevlen$0$ph$i$i$phi;
  }
  $70 = ((($s)) + 2856|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($s)) + 2442|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73&65535;
  $75 = ($73<<16>>16)==(0);
  $$$i1$i = $75 ? 138 : 7;
  $$1$i2$i = $75 ? 3 : 4;
  $76 = (($71) + 1)|0;
  $77 = (((((($s)) + 2440|0) + ($76<<2)|0)) + 2|0);
  HEAP16[$77>>1] = -1;
  $max_count$1$ph$i6$i = $$$i1$i;$min_count$1$ph$i7$i = $$1$i2$i;$n$0$ph$i4$i = 0;$nextlen$0$ph$i5$i = $74;$prevlen$0$ph$i3$i = -1;
  L38: while(1) {
   $count$0$i10$i = 0;$n$0$i9$i = $n$0$ph$i4$i;
   while(1) {
    $78 = ($n$0$i9$i|0)>($71|0);
    if ($78) {
     break L38;
    }
    $79 = (($n$0$i9$i) + 1)|0;
    $80 = (((((($s)) + 2440|0) + ($79<<2)|0)) + 2|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = (($count$0$i10$i) + 1)|0;
    $84 = ($83|0)<($max_count$1$ph$i6$i|0);
    $85 = ($nextlen$0$ph$i5$i|0)==($82|0);
    $or$cond$i11$i = $84 & $85;
    if ($or$cond$i11$i) {
     $count$0$i10$i = $83;$n$0$i9$i = $79;
    } else {
     $$lcssa = $79;$$lcssa55 = $81;$$lcssa56 = $82;$$lcssa57 = $83;$$lcssa58 = $85;
     break;
    }
   }
   $86 = ($$lcssa57|0)<($min_count$1$ph$i7$i|0);
   do {
    if ($86) {
     $87 = (((($s)) + 2684|0) + ($nextlen$0$ph$i5$i<<2)|0);
     $88 = HEAP16[$87>>1]|0;
     $89 = $88&65535;
     $90 = (($89) + ($$lcssa57))|0;
     $91 = $90&65535;
     HEAP16[$87>>1] = $91;
    } else {
     $92 = ($nextlen$0$ph$i5$i|0)==(0);
     if ($92) {
      $99 = ($$lcssa57|0)<(11);
      if ($99) {
       $100 = HEAP16[$39>>1]|0;
       $101 = (($100) + 1)<<16>>16;
       HEAP16[$39>>1] = $101;
       break;
      } else {
       $102 = HEAP16[$40>>1]|0;
       $103 = (($102) + 1)<<16>>16;
       HEAP16[$40>>1] = $103;
       break;
      }
     } else {
      $93 = ($nextlen$0$ph$i5$i|0)==($prevlen$0$ph$i3$i|0);
      if (!($93)) {
       $94 = (((($s)) + 2684|0) + ($nextlen$0$ph$i5$i<<2)|0);
       $95 = HEAP16[$94>>1]|0;
       $96 = (($95) + 1)<<16>>16;
       HEAP16[$94>>1] = $96;
      }
      $97 = HEAP16[$41>>1]|0;
      $98 = (($97) + 1)<<16>>16;
      HEAP16[$41>>1] = $98;
      break;
     }
    }
   } while(0);
   $104 = ($$lcssa55<<16>>16)==(0);
   $$2$i12$i = $$lcssa58 ? 6 : 7;
   $max_count$1$ph$be$i13$i = $104 ? 138 : $$2$i12$i;
   $105 = $104 | $$lcssa58;
   $min_count$1$ph$be$i14$i = $105 ? 3 : 4;
   $prevlen$0$ph$i3$i$phi = $nextlen$0$ph$i5$i;$max_count$1$ph$i6$i = $max_count$1$ph$be$i13$i;$min_count$1$ph$i7$i = $min_count$1$ph$be$i14$i;$n$0$ph$i4$i = $$lcssa;$nextlen$0$ph$i5$i = $$lcssa56;$prevlen$0$ph$i3$i = $prevlen$0$ph$i3$i$phi;
  }
  $106 = ((($s)) + 2864|0);
  _build_tree($s,$106);
  $107 = ((($s)) + 2746|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = ($108<<16>>16)==(0);
  if ($109) {
   $110 = ((($s)) + 2690|0);
   $111 = HEAP16[$110>>1]|0;
   $112 = ($111<<16>>16)==(0);
   if ($112) {
    $113 = ((($s)) + 2742|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = ($114<<16>>16)==(0);
    if ($115) {
     $116 = ((($s)) + 2694|0);
     $117 = HEAP16[$116>>1]|0;
     $118 = ($117<<16>>16)==(0);
     if ($118) {
      $119 = ((($s)) + 2738|0);
      $120 = HEAP16[$119>>1]|0;
      $121 = ($120<<16>>16)==(0);
      if ($121) {
       $122 = ((($s)) + 2698|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = ($123<<16>>16)==(0);
       if ($124) {
        $125 = ((($s)) + 2734|0);
        $126 = HEAP16[$125>>1]|0;
        $127 = ($126<<16>>16)==(0);
        if ($127) {
         $128 = ((($s)) + 2702|0);
         $129 = HEAP16[$128>>1]|0;
         $130 = ($129<<16>>16)==(0);
         if ($130) {
          $131 = ((($s)) + 2730|0);
          $132 = HEAP16[$131>>1]|0;
          $133 = ($132<<16>>16)==(0);
          if ($133) {
           $134 = ((($s)) + 2706|0);
           $135 = HEAP16[$134>>1]|0;
           $136 = ($135<<16>>16)==(0);
           if ($136) {
            $137 = ((($s)) + 2726|0);
            $138 = HEAP16[$137>>1]|0;
            $139 = ($138<<16>>16)==(0);
            if ($139) {
             $140 = ((($s)) + 2710|0);
             $141 = HEAP16[$140>>1]|0;
             $142 = ($141<<16>>16)==(0);
             if ($142) {
              $143 = ((($s)) + 2722|0);
              $144 = HEAP16[$143>>1]|0;
              $145 = ($144<<16>>16)==(0);
              if ($145) {
               $146 = ((($s)) + 2714|0);
               $147 = HEAP16[$146>>1]|0;
               $148 = ($147<<16>>16)==(0);
               if ($148) {
                $149 = ((($s)) + 2718|0);
                $150 = HEAP16[$149>>1]|0;
                $151 = ($150<<16>>16)==(0);
                if ($151) {
                 $152 = ((($s)) + 2686|0);
                 $153 = HEAP16[$152>>1]|0;
                 $154 = ($153<<16>>16)==(0);
                 $$$i = $154 ? 2 : 3;
                 $max_blindex$0$lcssa$i = $$$i;
                } else {
                 $max_blindex$0$lcssa$i = 4;
                }
               } else {
                $max_blindex$0$lcssa$i = 5;
               }
              } else {
               $max_blindex$0$lcssa$i = 6;
              }
             } else {
              $max_blindex$0$lcssa$i = 7;
             }
            } else {
             $max_blindex$0$lcssa$i = 8;
            }
           } else {
            $max_blindex$0$lcssa$i = 9;
           }
          } else {
           $max_blindex$0$lcssa$i = 10;
          }
         } else {
          $max_blindex$0$lcssa$i = 11;
         }
        } else {
         $max_blindex$0$lcssa$i = 12;
        }
       } else {
        $max_blindex$0$lcssa$i = 13;
       }
      } else {
       $max_blindex$0$lcssa$i = 14;
      }
     } else {
      $max_blindex$0$lcssa$i = 15;
     }
    } else {
     $max_blindex$0$lcssa$i = 16;
    }
   } else {
    $max_blindex$0$lcssa$i = 17;
   }
  } else {
   $max_blindex$0$lcssa$i = 18;
  }
  $155 = ($max_blindex$0$lcssa$i*3)|0;
  $156 = (($155) + 17)|0;
  $157 = ((($s)) + 5800|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($156) + ($158))|0;
  HEAP32[$157>>2] = $159;
  $160 = (($159) + 10)|0;
  $161 = $160 >>> 3;
  $162 = ((($s)) + 5804|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + 10)|0;
  $165 = $164 >>> 3;
  $166 = ($165>>>0)>($161>>>0);
  $$ = $166 ? $161 : $165;
  $max_blindex$0 = $max_blindex$0$lcssa$i;$opt_lenb$0 = $$;$static_lenb$0 = $165;
 } else {
  $167 = (($stored_len) + 5)|0;
  $max_blindex$0 = 0;$opt_lenb$0 = $167;$static_lenb$0 = $167;
 }
 $168 = (($stored_len) + 4)|0;
 $169 = ($168>>>0)<=($opt_lenb$0>>>0);
 $170 = ($buf|0)!=(0|0);
 $or$cond = $170 & $169;
 do {
  if ($or$cond) {
   __tr_stored_block($s,$buf,$stored_len,$last);
  } else {
   $171 = ((($s)) + 136|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($172|0)==(4);
   $174 = ($static_lenb$0|0)==($opt_lenb$0|0);
   $or$cond3 = $174 | $173;
   $175 = ((($s)) + 5820|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($176|0)>(13);
   if ($or$cond3) {
    $178 = (($last) + 2)|0;
    $179 = $178 & 65535;
    $180 = $179 << $176;
    $181 = ((($s)) + 5816|0);
    $182 = HEAP16[$181>>1]|0;
    $183 = $182&65535;
    $184 = $183 | $180;
    $185 = $184&65535;
    HEAP16[$181>>1] = $185;
    if ($177) {
     $186 = $184&255;
     $187 = ((($s)) + 20|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + 1)|0;
     HEAP32[$187>>2] = $189;
     $190 = ((($s)) + 8|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($191) + ($188)|0);
     HEAP8[$192>>0] = $186;
     $193 = HEAP16[$181>>1]|0;
     $194 = ($193&65535) >>> 8;
     $195 = $194&255;
     $196 = HEAP32[$187>>2]|0;
     $197 = (($196) + 1)|0;
     HEAP32[$187>>2] = $197;
     $198 = HEAP32[$190>>2]|0;
     $199 = (($198) + ($196)|0);
     HEAP8[$199>>0] = $195;
     $200 = HEAP32[$175>>2]|0;
     $201 = (16 - ($200))|0;
     $202 = $179 >>> $201;
     $203 = $202&65535;
     HEAP16[$181>>1] = $203;
     $204 = (($200) + -13)|0;
     $storemerge2 = $204;
    } else {
     $205 = (($176) + 3)|0;
     $storemerge2 = $205;
    }
    HEAP32[$175>>2] = $storemerge2;
    _compress_block($s,10452,11604);
    break;
   }
   $206 = (($last) + 4)|0;
   $207 = $206 & 65535;
   $208 = $207 << $176;
   $209 = ((($s)) + 5816|0);
   $210 = HEAP16[$209>>1]|0;
   $211 = $210&65535;
   $212 = $211 | $208;
   $213 = $212&65535;
   HEAP16[$209>>1] = $213;
   if ($177) {
    $214 = $212&255;
    $215 = ((($s)) + 20|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (($216) + 1)|0;
    HEAP32[$215>>2] = $217;
    $218 = ((($s)) + 8|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216)|0);
    HEAP8[$220>>0] = $214;
    $221 = HEAP16[$209>>1]|0;
    $222 = ($221&65535) >>> 8;
    $223 = $222&255;
    $224 = HEAP32[$215>>2]|0;
    $225 = (($224) + 1)|0;
    HEAP32[$215>>2] = $225;
    $226 = HEAP32[$218>>2]|0;
    $227 = (($226) + ($224)|0);
    HEAP8[$227>>0] = $223;
    $228 = HEAP32[$175>>2]|0;
    $229 = (16 - ($228))|0;
    $230 = $207 >>> $229;
    $231 = $230&65535;
    HEAP16[$209>>1] = $231;
    $232 = (($228) + -13)|0;
    $243 = $230;$storemerge = $232;
   } else {
    $233 = (($176) + 3)|0;
    $243 = $212;$storemerge = $233;
   }
   HEAP32[$175>>2] = $storemerge;
   $234 = ((($s)) + 2844|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ((($s)) + 2856|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($storemerge|0)>(11);
   $239 = (($235) + 65280)|0;
   $240 = $239 & 65535;
   $241 = $240 << $storemerge;
   $242 = $243 & 65535;
   $244 = $242 | $241;
   $245 = $244&65535;
   HEAP16[$209>>1] = $245;
   if ($238) {
    $246 = $244&255;
    $247 = ((($s)) + 20|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) + 1)|0;
    HEAP32[$247>>2] = $249;
    $250 = ((($s)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = (($251) + ($248)|0);
    HEAP8[$252>>0] = $246;
    $253 = HEAP16[$209>>1]|0;
    $254 = ($253&65535) >>> 8;
    $255 = $254&255;
    $256 = HEAP32[$247>>2]|0;
    $257 = (($256) + 1)|0;
    HEAP32[$247>>2] = $257;
    $258 = HEAP32[$250>>2]|0;
    $259 = (($258) + ($256)|0);
    HEAP8[$259>>0] = $255;
    $260 = HEAP32[$175>>2]|0;
    $261 = (16 - ($260))|0;
    $262 = $240 >>> $261;
    $263 = $262&65535;
    HEAP16[$209>>1] = $263;
    $264 = (($260) + -11)|0;
    $266 = $264;$271 = $262;
   } else {
    $265 = (($storemerge) + 5)|0;
    $266 = $265;$271 = $244;
   }
   HEAP32[$175>>2] = $266;
   $267 = ($266|0)>(11);
   $268 = $237 & 65535;
   $269 = $268 << $266;
   $270 = $271 & 65535;
   $272 = $269 | $270;
   $273 = $272&65535;
   HEAP16[$209>>1] = $273;
   if ($267) {
    $274 = $272&255;
    $275 = ((($s)) + 20|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + 1)|0;
    HEAP32[$275>>2] = $277;
    $278 = ((($s)) + 8|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (($279) + ($276)|0);
    HEAP8[$280>>0] = $274;
    $281 = HEAP16[$209>>1]|0;
    $282 = ($281&65535) >>> 8;
    $283 = $282&255;
    $284 = HEAP32[$275>>2]|0;
    $285 = (($284) + 1)|0;
    HEAP32[$275>>2] = $285;
    $286 = HEAP32[$278>>2]|0;
    $287 = (($286) + ($284)|0);
    HEAP8[$287>>0] = $283;
    $288 = HEAP32[$175>>2]|0;
    $289 = (16 - ($288))|0;
    $290 = $268 >>> $289;
    $291 = $290&65535;
    HEAP16[$209>>1] = $291;
    $292 = (($288) + -11)|0;
    $294 = $292;$300 = $290;
   } else {
    $293 = (($266) + 5)|0;
    $294 = $293;$300 = $272;
   }
   HEAP32[$175>>2] = $294;
   $295 = ($294|0)>(12);
   $296 = (($max_blindex$0) + 65533)|0;
   $297 = $296 & 65535;
   $298 = $297 << $294;
   $299 = $300 & 65535;
   $301 = $298 | $299;
   $302 = $301&65535;
   HEAP16[$209>>1] = $302;
   if ($295) {
    $303 = $301&255;
    $304 = ((($s)) + 20|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (($305) + 1)|0;
    HEAP32[$304>>2] = $306;
    $307 = ((($s)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + ($305)|0);
    HEAP8[$309>>0] = $303;
    $310 = HEAP16[$209>>1]|0;
    $311 = ($310&65535) >>> 8;
    $312 = $311&255;
    $313 = HEAP32[$304>>2]|0;
    $314 = (($313) + 1)|0;
    HEAP32[$304>>2] = $314;
    $315 = HEAP32[$307>>2]|0;
    $316 = (($315) + ($313)|0);
    HEAP8[$316>>0] = $312;
    $317 = HEAP32[$175>>2]|0;
    $318 = (16 - ($317))|0;
    $319 = $297 >>> $318;
    $320 = $319&65535;
    HEAP16[$209>>1] = $320;
    $321 = (($317) + -12)|0;
    $$pre$phi24Z2D = $307;$$pre$phiZ2D = $304;$387 = $319;$storemerge2$i = $321;
   } else {
    $322 = (($294) + 4)|0;
    $$pre = ((($s)) + 20|0);
    $$pre23 = ((($s)) + 8|0);
    $$pre$phi24Z2D = $$pre23;$$pre$phiZ2D = $$pre;$387 = $301;$storemerge2$i = $322;
   }
   HEAP32[$175>>2] = $storemerge2$i;
   $323 = $storemerge2$i;$333 = $387;$rank$04$i = 0;
   while(1) {
    $324 = ($323|0)>(13);
    $325 = (18153 + ($rank$04$i)|0);
    $326 = HEAP8[$325>>0]|0;
    $327 = $326&255;
    $328 = (((((($s)) + 2684|0) + ($327<<2)|0)) + 2|0);
    $329 = HEAP16[$328>>1]|0;
    $330 = $329&65535;
    $331 = $330 << $323;
    $332 = $333 & 65535;
    $334 = $331 | $332;
    $335 = $334&65535;
    HEAP16[$209>>1] = $335;
    if ($324) {
     $336 = $334&255;
     $337 = HEAP32[$$pre$phiZ2D>>2]|0;
     $338 = (($337) + 1)|0;
     HEAP32[$$pre$phiZ2D>>2] = $338;
     $339 = HEAP32[$$pre$phi24Z2D>>2]|0;
     $340 = (($339) + ($337)|0);
     HEAP8[$340>>0] = $336;
     $341 = HEAP16[$209>>1]|0;
     $342 = ($341&65535) >>> 8;
     $343 = $342&255;
     $344 = HEAP32[$$pre$phiZ2D>>2]|0;
     $345 = (($344) + 1)|0;
     HEAP32[$$pre$phiZ2D>>2] = $345;
     $346 = HEAP32[$$pre$phi24Z2D>>2]|0;
     $347 = (($346) + ($344)|0);
     HEAP8[$347>>0] = $343;
     $348 = HEAP32[$175>>2]|0;
     $349 = (16 - ($348))|0;
     $350 = $330 >>> $349;
     $351 = $350&65535;
     HEAP16[$209>>1] = $351;
     $352 = (($348) + -13)|0;
     $388 = $350;$storemerge3$i = $352;
    } else {
     $353 = (($323) + 3)|0;
     $388 = $334;$storemerge3$i = $353;
    }
    HEAP32[$175>>2] = $storemerge3$i;
    $354 = (($rank$04$i) + 1)|0;
    $exitcond$i = ($rank$04$i|0)==($max_blindex$0|0);
    if ($exitcond$i) {
     break;
    } else {
     $323 = $storemerge3$i;$333 = $388;$rank$04$i = $354;
    }
   }
   $355 = ((($s)) + 148|0);
   _send_tree($s,$355,$235);
   $356 = ((($s)) + 2440|0);
   _send_tree($s,$356,$237);
   _compress_block($s,$355,$356);
  }
 } while(0);
 _init_block($s);
 $357 = ($last|0)==(0);
 if ($357) {
  return;
 }
 $358 = ((($s)) + 5820|0);
 $359 = HEAP32[$358>>2]|0;
 $360 = ($359|0)>(8);
 if ($360) {
  $361 = ((($s)) + 5816|0);
  $362 = HEAP16[$361>>1]|0;
  $363 = $362&255;
  $364 = ((($s)) + 20|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = (($365) + 1)|0;
  HEAP32[$364>>2] = $366;
  $367 = ((($s)) + 8|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($368) + ($365)|0);
  HEAP8[$369>>0] = $363;
  $370 = HEAP16[$361>>1]|0;
  $371 = ($370&65535) >>> 8;
  $372 = $371&255;
  $373 = HEAP32[$364>>2]|0;
  $374 = (($373) + 1)|0;
  HEAP32[$364>>2] = $374;
  $375 = HEAP32[$367>>2]|0;
  $376 = (($375) + ($373)|0);
  HEAP8[$376>>0] = $372;
  $$pre$phi$iZ2D = $361;
 } else {
  $377 = ($359|0)>(0);
  $378 = ((($s)) + 5816|0);
  if ($377) {
   $379 = HEAP16[$378>>1]|0;
   $380 = $379&255;
   $381 = ((($s)) + 20|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = (($382) + 1)|0;
   HEAP32[$381>>2] = $383;
   $384 = ((($s)) + 8|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = (($385) + ($382)|0);
   HEAP8[$386>>0] = $380;
   $$pre$phi$iZ2D = $378;
  } else {
   $$pre$phi$iZ2D = $378;
  }
 }
 HEAP16[$$pre$phi$iZ2D>>1] = 0;
 HEAP32[$358>>2] = 0;
 return;
}
function _init_block($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $n$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $n$04 = 0;
 while(1) {
  $54 = (((($s)) + 148|0) + ($n$04<<2)|0);
  HEAP16[$54>>1] = 0;
  $55 = (($n$04) + 1)|0;
  $exitcond = ($55|0)==(286);
  if ($exitcond) {
   break;
  } else {
   $n$04 = $55;
  }
 }
 $0 = ((($s)) + 2440|0);
 HEAP16[$0>>1] = 0;
 $1 = ((($s)) + 2444|0);
 HEAP16[$1>>1] = 0;
 $2 = ((($s)) + 2448|0);
 HEAP16[$2>>1] = 0;
 $3 = ((($s)) + 2452|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($s)) + 2456|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($s)) + 2460|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($s)) + 2464|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($s)) + 2468|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($s)) + 2472|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($s)) + 2476|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($s)) + 2480|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($s)) + 2484|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($s)) + 2488|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($s)) + 2492|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($s)) + 2496|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($s)) + 2500|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($s)) + 2504|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($s)) + 2508|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($s)) + 2512|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($s)) + 2516|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($s)) + 2520|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($s)) + 2524|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($s)) + 2528|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($s)) + 2532|0);
 HEAP16[$23>>1] = 0;
 $24 = ((($s)) + 2536|0);
 HEAP16[$24>>1] = 0;
 $25 = ((($s)) + 2540|0);
 HEAP16[$25>>1] = 0;
 $26 = ((($s)) + 2544|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($s)) + 2548|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($s)) + 2552|0);
 HEAP16[$28>>1] = 0;
 $29 = ((($s)) + 2556|0);
 HEAP16[$29>>1] = 0;
 $30 = ((($s)) + 2684|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($s)) + 2688|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($s)) + 2692|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($s)) + 2696|0);
 HEAP16[$33>>1] = 0;
 $34 = ((($s)) + 2700|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($s)) + 2704|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($s)) + 2708|0);
 HEAP16[$36>>1] = 0;
 $37 = ((($s)) + 2712|0);
 HEAP16[$37>>1] = 0;
 $38 = ((($s)) + 2716|0);
 HEAP16[$38>>1] = 0;
 $39 = ((($s)) + 2720|0);
 HEAP16[$39>>1] = 0;
 $40 = ((($s)) + 2724|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($s)) + 2728|0);
 HEAP16[$41>>1] = 0;
 $42 = ((($s)) + 2732|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($s)) + 2736|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($s)) + 2740|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($s)) + 2744|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($s)) + 2748|0);
 HEAP16[$46>>1] = 0;
 $47 = ((($s)) + 2752|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($s)) + 2756|0);
 HEAP16[$48>>1] = 0;
 $49 = ((($s)) + 1172|0);
 HEAP16[$49>>1] = 1;
 $50 = ((($s)) + 5804|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($s)) + 5800|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($s)) + 5808|0);
 HEAP32[$52>>2] = 0;
 $53 = ((($s)) + 5792|0);
 HEAP32[$53>>2] = 0;
 return;
}
function _build_tree($s,$desc) {
 $s = $s|0;
 $desc = $desc|0;
 var $$ = 0, $$$i = 0, $$$us = 0, $$$us$i = 0, $$0$i$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i13 = 0, $$0$lcssa$i21 = 0, $$01$i$i = 0, $$02$i = 0, $$02$i10 = 0, $$02$i18 = 0, $$1 = 0, $$lcssa = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$max_code$2 = 0;
 var $$max_code$2$us = 0, $$ph = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert28$i = 0, $$pre = 0, $$pre$i = 0, $$pre29$i = 0, $$pre48 = 0, $$pre49$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$03$i = 0, $bits$2$i = 0, $bits$2$in$i = 0;
 var $bits$2$in$i$lcssa = 0, $bits$37$i = 0, $code$04$i = 0, $desc$idx$val = 0, $desc$idx2$val = 0, $desc$idx3$val = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i5 = 0, $exitcond26$i = 0, $exitcond5$i = 0, $h$0$i = 0, $h$0$us$i = 0, $h$010$i = 0, $h$012$i = 0, $h$012$us$i = 0, $h$19$i = 0, $h$2$i = 0, $h$2$ph$i$lcssa = 0, $h$2$ph$i33 = 0;
 var $j$0$i = 0, $j$0$i12 = 0, $j$0$i20 = 0, $j$01$i = 0, $j$03$i = 0, $j$03$i17 = 0, $j$03$i9 = 0, $j$1$i = 0, $j$1$i11 = 0, $j$1$i19 = 0, $max_code$0$lcssa51 = 0, $max_code$039 = 0, $max_code$1 = 0, $max_code$1$lcssa = 0, $max_code$2$lcssa$ph = 0, $max_code$235 = 0, $max_code$235$us = 0, $n$0$ph$i32 = 0, $n$01$i = 0, $n$038 = 0;
 var $n$134 = 0, $next_code$i = 0, $node$0 = 0, $overflow$0$$i = 0, $overflow$0$$us$i = 0, $overflow$0$lcssa$i = 0, $overflow$011$i = 0, $overflow$011$us$i = 0, $overflow$2$i = 0, $res$0$i$i = 0, $scevgep$i = 0, $xbits$0$i = 0, $xbits$0$us$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code$i = sp;
 $0 = HEAP32[$desc>>2]|0;
 $1 = ((($desc)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($s)) + 5200|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($s)) + 5204|0);
 HEAP32[$7>>2] = 573;
 $8 = ($5|0)>(0);
 if ($8) {
  $max_code$039 = -1;$n$038 = 0;
  while(1) {
   $24 = (($0) + ($n$038<<2)|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = ($25<<16>>16)==(0);
   if ($26) {
    $31 = (((($0) + ($n$038<<2)|0)) + 2|0);
    HEAP16[$31>>1] = 0;
    $max_code$1 = $max_code$039;
   } else {
    $27 = HEAP32[$6>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$6>>2] = $28;
    $29 = (((($s)) + 2908|0) + ($28<<2)|0);
    HEAP32[$29>>2] = $n$038;
    $30 = (((($s)) + 5208|0) + ($n$038)|0);
    HEAP8[$30>>0] = 0;
    $max_code$1 = $n$038;
   }
   $32 = (($n$038) + 1)|0;
   $exitcond = ($32|0)==($5|0);
   if ($exitcond) {
    $max_code$1$lcssa = $max_code$1;
    break;
   } else {
    $max_code$039 = $max_code$1;$n$038 = $32;
   }
  }
  $$pre = HEAP32[$6>>2]|0;
  $9 = ($$pre|0)<(2);
  if ($9) {
   $347 = $$pre;$max_code$0$lcssa51 = $max_code$1$lcssa;
   label = 3;
  } else {
   $$ph = $$pre;$max_code$2$lcssa$ph = $max_code$1$lcssa;
  }
 } else {
  $347 = 0;$max_code$0$lcssa51 = -1;
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($s)) + 5800|0);
  $11 = ($3|0)==(0|0);
  $12 = ((($s)) + 5804|0);
  if ($11) {
   $16 = $347;$max_code$235$us = $max_code$0$lcssa51;
   while(1) {
    $13 = ($max_code$235$us|0)<(2);
    $14 = (($max_code$235$us) + 1)|0;
    $$max_code$2$us = $13 ? $14 : $max_code$235$us;
    $$$us = $13 ? $14 : 0;
    $15 = (($16) + 1)|0;
    HEAP32[$6>>2] = $15;
    $17 = (((($s)) + 2908|0) + ($15<<2)|0);
    HEAP32[$17>>2] = $$$us;
    $18 = (($0) + ($$$us<<2)|0);
    HEAP16[$18>>1] = 1;
    $19 = (((($s)) + 5208|0) + ($$$us)|0);
    HEAP8[$19>>0] = 0;
    $20 = HEAP32[$10>>2]|0;
    $21 = (($20) + -1)|0;
    HEAP32[$10>>2] = $21;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)<(2);
    if ($23) {
     $16 = $22;$max_code$235$us = $$max_code$2$us;
    } else {
     $$ph = $22;$max_code$2$lcssa$ph = $$max_code$2$us;
     break;
    }
   }
  } else {
   $36 = $347;$max_code$235 = $max_code$0$lcssa51;
   while(1) {
    $33 = ($max_code$235|0)<(2);
    $34 = (($max_code$235) + 1)|0;
    $$max_code$2 = $33 ? $34 : $max_code$235;
    $$ = $33 ? $34 : 0;
    $35 = (($36) + 1)|0;
    HEAP32[$6>>2] = $35;
    $37 = (((($s)) + 2908|0) + ($35<<2)|0);
    HEAP32[$37>>2] = $$;
    $38 = (($0) + ($$<<2)|0);
    HEAP16[$38>>1] = 1;
    $39 = (((($s)) + 5208|0) + ($$)|0);
    HEAP8[$39>>0] = 0;
    $40 = HEAP32[$10>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$10>>2] = $41;
    $42 = (((($3) + ($$<<2)|0)) + 2|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43&65535;
    $45 = HEAP32[$12>>2]|0;
    $46 = (($45) - ($44))|0;
    HEAP32[$12>>2] = $46;
    $47 = HEAP32[$6>>2]|0;
    $48 = ($47|0)<(2);
    if ($48) {
     $36 = $47;$max_code$235 = $$max_code$2;
    } else {
     $$ph = $47;$max_code$2$lcssa$ph = $$max_code$2;
     break;
    }
   }
  }
 }
 $49 = ((($desc)) + 4|0);
 HEAP32[$49>>2] = $max_code$2$lcssa$ph;
 $50 = (($$ph|0) / 2)&-1;
 $56 = $$ph;$n$134 = $50;
 while(1) {
  $52 = (((($s)) + 2908|0) + ($n$134<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (((($s)) + 5208|0) + ($53)|0);
  $j$01$i = $n$134 << 1;
  $55 = ($j$01$i|0)>($56|0);
  L19: do {
   if ($55) {
    $$0$lcssa$i = $n$134;
   } else {
    $57 = (($0) + ($53<<2)|0);
    $$02$i = $n$134;$59 = $56;$j$03$i = $j$01$i;
    while(1) {
     $58 = ($j$03$i|0)<($59|0);
     do {
      if ($58) {
       $60 = $j$03$i | 1;
       $61 = (((($s)) + 2908|0) + ($60<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($0) + ($62<<2)|0);
       $64 = HEAP16[$63>>1]|0;
       $65 = (((($s)) + 2908|0) + ($j$03$i<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($0) + ($66<<2)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = ($64&65535)<($68&65535);
       if (!($69)) {
        $70 = ($64<<16>>16)==($68<<16>>16);
        if (!($70)) {
         $j$1$i = $j$03$i;
         break;
        }
        $71 = (((($s)) + 5208|0) + ($62)|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = (((($s)) + 5208|0) + ($66)|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = ($72&255)>($74&255);
        if ($75) {
         $j$1$i = $j$03$i;
         break;
        }
       }
       $j$1$i = $60;
      } else {
       $j$1$i = $j$03$i;
      }
     } while(0);
     $76 = HEAP16[$57>>1]|0;
     $77 = (((($s)) + 2908|0) + ($j$1$i<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($0) + ($78<<2)|0);
     $80 = HEAP16[$79>>1]|0;
     $81 = ($76&65535)<($80&65535);
     if ($81) {
      $$0$lcssa$i = $$02$i;
      break L19;
     }
     $82 = ($76<<16>>16)==($80<<16>>16);
     if ($82) {
      $83 = HEAP8[$54>>0]|0;
      $84 = (((($s)) + 5208|0) + ($78)|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = ($83&255)>($85&255);
      if (!($86)) {
       $$0$lcssa$i = $$02$i;
       break L19;
      }
     }
     $87 = (((($s)) + 2908|0) + ($$02$i<<2)|0);
     HEAP32[$87>>2] = $78;
     $j$0$i = $j$1$i << 1;
     $88 = HEAP32[$6>>2]|0;
     $89 = ($j$0$i|0)>($88|0);
     if ($89) {
      $$0$lcssa$i = $j$1$i;
      break;
     } else {
      $$02$i = $j$1$i;$59 = $88;$j$03$i = $j$0$i;
     }
    }
   }
  } while(0);
  $90 = (((($s)) + 2908|0) + ($$0$lcssa$i<<2)|0);
  HEAP32[$90>>2] = $53;
  $91 = ($n$134|0)>(1);
  if (!($91)) {
   break;
  }
  $92 = (($n$134) + -1)|0;
  $$pre48 = HEAP32[$6>>2]|0;
  $56 = $$pre48;$n$134 = $92;
 }
 $$pre49$pre = HEAP32[$6>>2]|0;
 $51 = ((($s)) + 2912|0);
 $95 = $$pre49$pre;$node$0 = $5;
 while(1) {
  $93 = HEAP32[$51>>2]|0;
  $94 = (($95) + -1)|0;
  HEAP32[$6>>2] = $94;
  $96 = (((($s)) + 2908|0) + ($95<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$51>>2] = $97;
  $98 = (((($s)) + 5208|0) + ($97)|0);
  $99 = ($95|0)<(3);
  L39: do {
   if ($99) {
    $$0$lcssa$i21 = 1;
   } else {
    $100 = (($0) + ($97<<2)|0);
    $$02$i18 = 1;$102 = $94;$j$03$i17 = 2;
    while(1) {
     $101 = ($j$03$i17|0)<($102|0);
     do {
      if ($101) {
       $103 = $j$03$i17 | 1;
       $104 = (((($s)) + 2908|0) + ($103<<2)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($0) + ($105<<2)|0);
       $107 = HEAP16[$106>>1]|0;
       $108 = (((($s)) + 2908|0) + ($j$03$i17<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($0) + ($109<<2)|0);
       $111 = HEAP16[$110>>1]|0;
       $112 = ($107&65535)<($111&65535);
       if (!($112)) {
        $113 = ($107<<16>>16)==($111<<16>>16);
        if (!($113)) {
         $j$1$i19 = $j$03$i17;
         break;
        }
        $114 = (((($s)) + 5208|0) + ($105)|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = (((($s)) + 5208|0) + ($109)|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = ($115&255)>($117&255);
        if ($118) {
         $j$1$i19 = $j$03$i17;
         break;
        }
       }
       $j$1$i19 = $103;
      } else {
       $j$1$i19 = $j$03$i17;
      }
     } while(0);
     $119 = HEAP16[$100>>1]|0;
     $120 = (((($s)) + 2908|0) + ($j$1$i19<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($0) + ($121<<2)|0);
     $123 = HEAP16[$122>>1]|0;
     $124 = ($119&65535)<($123&65535);
     if ($124) {
      $$0$lcssa$i21 = $$02$i18;
      break L39;
     }
     $125 = ($119<<16>>16)==($123<<16>>16);
     if ($125) {
      $126 = HEAP8[$98>>0]|0;
      $127 = (((($s)) + 5208|0) + ($121)|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = ($126&255)>($128&255);
      if (!($129)) {
       $$0$lcssa$i21 = $$02$i18;
       break L39;
      }
     }
     $130 = (((($s)) + 2908|0) + ($$02$i18<<2)|0);
     HEAP32[$130>>2] = $121;
     $j$0$i20 = $j$1$i19 << 1;
     $131 = HEAP32[$6>>2]|0;
     $132 = ($j$0$i20|0)>($131|0);
     if ($132) {
      $$0$lcssa$i21 = $j$1$i19;
      break;
     } else {
      $$02$i18 = $j$1$i19;$102 = $131;$j$03$i17 = $j$0$i20;
     }
    }
   }
  } while(0);
  $133 = (((($s)) + 2908|0) + ($$0$lcssa$i21<<2)|0);
  HEAP32[$133>>2] = $97;
  $134 = HEAP32[$51>>2]|0;
  $135 = HEAP32[$7>>2]|0;
  $136 = (($135) + -1)|0;
  HEAP32[$7>>2] = $136;
  $137 = (((($s)) + 2908|0) + ($136<<2)|0);
  HEAP32[$137>>2] = $93;
  $138 = HEAP32[$7>>2]|0;
  $139 = (($138) + -1)|0;
  HEAP32[$7>>2] = $139;
  $140 = (((($s)) + 2908|0) + ($139<<2)|0);
  HEAP32[$140>>2] = $134;
  $141 = (($0) + ($93<<2)|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $142&65535;
  $144 = (($0) + ($134<<2)|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = (($146) + ($143))|0;
  $148 = $147&65535;
  $149 = (($0) + ($node$0<<2)|0);
  HEAP16[$149>>1] = $148;
  $150 = (((($s)) + 5208|0) + ($93)|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = (((($s)) + 5208|0) + ($134)|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = ($151&255)<($153&255);
  $$1 = $154 ? $153 : $151;
  $155 = $$1&255;
  $156 = (($155) + 1)|0;
  $157 = $156&255;
  $158 = (((($s)) + 5208|0) + ($node$0)|0);
  HEAP8[$158>>0] = $157;
  $159 = $node$0&65535;
  $160 = (((($0) + ($134<<2)|0)) + 2|0);
  HEAP16[$160>>1] = $159;
  $161 = (((($0) + ($93<<2)|0)) + 2|0);
  HEAP16[$161>>1] = $159;
  $162 = (($node$0) + 1)|0;
  HEAP32[$51>>2] = $node$0;
  $163 = HEAP32[$6>>2]|0;
  $164 = ($163|0)<(2);
  L55: do {
   if ($164) {
    $$0$lcssa$i13 = 1;
   } else {
    $$02$i10 = 1;$166 = $163;$j$03$i9 = 2;
    while(1) {
     $165 = ($j$03$i9|0)<($166|0);
     do {
      if ($165) {
       $167 = $j$03$i9 | 1;
       $168 = (((($s)) + 2908|0) + ($167<<2)|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = (($0) + ($169<<2)|0);
       $171 = HEAP16[$170>>1]|0;
       $172 = (((($s)) + 2908|0) + ($j$03$i9<<2)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (($0) + ($173<<2)|0);
       $175 = HEAP16[$174>>1]|0;
       $176 = ($171&65535)<($175&65535);
       if (!($176)) {
        $177 = ($171<<16>>16)==($175<<16>>16);
        if (!($177)) {
         $j$1$i11 = $j$03$i9;
         break;
        }
        $178 = (((($s)) + 5208|0) + ($169)|0);
        $179 = HEAP8[$178>>0]|0;
        $180 = (((($s)) + 5208|0) + ($173)|0);
        $181 = HEAP8[$180>>0]|0;
        $182 = ($179&255)>($181&255);
        if ($182) {
         $j$1$i11 = $j$03$i9;
         break;
        }
       }
       $j$1$i11 = $167;
      } else {
       $j$1$i11 = $j$03$i9;
      }
     } while(0);
     $183 = HEAP16[$149>>1]|0;
     $184 = (((($s)) + 2908|0) + ($j$1$i11<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (($0) + ($185<<2)|0);
     $187 = HEAP16[$186>>1]|0;
     $188 = ($183&65535)<($187&65535);
     if ($188) {
      $$0$lcssa$i13 = $$02$i10;
      break L55;
     }
     $189 = ($183<<16>>16)==($187<<16>>16);
     if ($189) {
      $190 = HEAP8[$158>>0]|0;
      $191 = (((($s)) + 5208|0) + ($185)|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = ($190&255)>($192&255);
      if (!($193)) {
       $$0$lcssa$i13 = $$02$i10;
       break L55;
      }
     }
     $194 = (((($s)) + 2908|0) + ($$02$i10<<2)|0);
     HEAP32[$194>>2] = $185;
     $j$0$i12 = $j$1$i11 << 1;
     $195 = HEAP32[$6>>2]|0;
     $196 = ($j$0$i12|0)>($195|0);
     if ($196) {
      $$0$lcssa$i13 = $j$1$i11;
      break;
     } else {
      $$02$i10 = $j$1$i11;$166 = $195;$j$03$i9 = $j$0$i12;
     }
    }
   }
  } while(0);
  $197 = (((($s)) + 2908|0) + ($$0$lcssa$i13<<2)|0);
  HEAP32[$197>>2] = $node$0;
  $198 = HEAP32[$6>>2]|0;
  $199 = ($198|0)>(1);
  if ($199) {
   $95 = $198;$node$0 = $162;
  } else {
   break;
  }
 }
 $200 = HEAP32[$51>>2]|0;
 $201 = HEAP32[$7>>2]|0;
 $202 = (($201) + -1)|0;
 HEAP32[$7>>2] = $202;
 $203 = (((($s)) + 2908|0) + ($202<<2)|0);
 HEAP32[$203>>2] = $200;
 $desc$idx$val = HEAP32[$desc>>2]|0;
 $desc$idx2$val = HEAP32[$49>>2]|0;
 $desc$idx3$val = HEAP32[$1>>2]|0;
 $204 = HEAP32[$desc$idx3$val>>2]|0;
 $205 = ((($desc$idx3$val)) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ((($desc$idx3$val)) + 8|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ((($desc$idx3$val)) + 16|0);
 $210 = HEAP32[$209>>2]|0;
 $scevgep$i = ((($s)) + 2876|0);
 dest=$scevgep$i; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $211 = HEAP32[$7>>2]|0;
 $212 = (((($s)) + 2908|0) + ($211<<2)|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (((($desc$idx$val) + ($213<<2)|0)) + 2|0);
 HEAP16[$214>>1] = 0;
 $h$010$i = (($211) + 1)|0;
 $215 = ($h$010$i|0)<(573);
 L71: do {
  if ($215) {
   $216 = ((($s)) + 5800|0);
   $217 = ($204|0)==(0|0);
   $218 = ((($s)) + 5804|0);
   if ($217) {
    $h$012$us$i = $h$010$i;$overflow$011$us$i = 0;
    while(1) {
     $219 = (((($s)) + 2908|0) + ($h$012$us$i<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (((($desc$idx$val) + ($220<<2)|0)) + 2|0);
     $222 = HEAP16[$221>>1]|0;
     $223 = $222&65535;
     $224 = (((($desc$idx$val) + ($223<<2)|0)) + 2|0);
     $225 = HEAP16[$224>>1]|0;
     $226 = $225&65535;
     $227 = (($226) + 1)|0;
     $228 = ($226|0)<($210|0);
     $$$us$i = $228 ? $227 : $210;
     $229 = $228&1;
     $230 = $229 ^ 1;
     $overflow$0$$us$i = (($230) + ($overflow$011$us$i))|0;
     $231 = $$$us$i&65535;
     HEAP16[$221>>1] = $231;
     $232 = ($220|0)>($desc$idx2$val|0);
     if (!($232)) {
      $233 = (((($s)) + 2876|0) + ($$$us$i<<1)|0);
      $234 = HEAP16[$233>>1]|0;
      $235 = (($234) + 1)<<16>>16;
      HEAP16[$233>>1] = $235;
      $236 = ($220|0)<($208|0);
      if ($236) {
       $xbits$0$us$i = 0;
      } else {
       $237 = (($220) - ($208))|0;
       $238 = (($206) + ($237<<2)|0);
       $239 = HEAP32[$238>>2]|0;
       $xbits$0$us$i = $239;
      }
      $240 = (($desc$idx$val) + ($220<<2)|0);
      $241 = HEAP16[$240>>1]|0;
      $242 = $241&65535;
      $243 = (($xbits$0$us$i) + ($$$us$i))|0;
      $244 = Math_imul($242, $243)|0;
      $245 = HEAP32[$216>>2]|0;
      $246 = (($244) + ($245))|0;
      HEAP32[$216>>2] = $246;
     }
     $h$0$us$i = (($h$012$us$i) + 1)|0;
     $exitcond26$i = ($h$0$us$i|0)==(573);
     if ($exitcond26$i) {
      $overflow$0$lcssa$i = $overflow$0$$us$i;
      break;
     } else {
      $h$012$us$i = $h$0$us$i;$overflow$011$us$i = $overflow$0$$us$i;
     }
    }
   } else {
    $h$012$i = $h$010$i;$overflow$011$i = 0;
    while(1) {
     $247 = (((($s)) + 2908|0) + ($h$012$i<<2)|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = (((($desc$idx$val) + ($248<<2)|0)) + 2|0);
     $250 = HEAP16[$249>>1]|0;
     $251 = $250&65535;
     $252 = (((($desc$idx$val) + ($251<<2)|0)) + 2|0);
     $253 = HEAP16[$252>>1]|0;
     $254 = $253&65535;
     $255 = (($254) + 1)|0;
     $256 = ($254|0)<($210|0);
     $$$i = $256 ? $255 : $210;
     $257 = $256&1;
     $258 = $257 ^ 1;
     $overflow$0$$i = (($258) + ($overflow$011$i))|0;
     $259 = $$$i&65535;
     HEAP16[$249>>1] = $259;
     $260 = ($248|0)>($desc$idx2$val|0);
     if (!($260)) {
      $261 = (((($s)) + 2876|0) + ($$$i<<1)|0);
      $262 = HEAP16[$261>>1]|0;
      $263 = (($262) + 1)<<16>>16;
      HEAP16[$261>>1] = $263;
      $264 = ($248|0)<($208|0);
      if ($264) {
       $xbits$0$i = 0;
      } else {
       $265 = (($248) - ($208))|0;
       $266 = (($206) + ($265<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $xbits$0$i = $267;
      }
      $268 = (($desc$idx$val) + ($248<<2)|0);
      $269 = HEAP16[$268>>1]|0;
      $270 = $269&65535;
      $271 = (($xbits$0$i) + ($$$i))|0;
      $272 = Math_imul($270, $271)|0;
      $273 = HEAP32[$216>>2]|0;
      $274 = (($272) + ($273))|0;
      HEAP32[$216>>2] = $274;
      $275 = (((($204) + ($248<<2)|0)) + 2|0);
      $276 = HEAP16[$275>>1]|0;
      $277 = $276&65535;
      $278 = (($277) + ($xbits$0$i))|0;
      $279 = Math_imul($278, $270)|0;
      $280 = HEAP32[$218>>2]|0;
      $281 = (($279) + ($280))|0;
      HEAP32[$218>>2] = $281;
     }
     $h$0$i = (($h$012$i) + 1)|0;
     $exitcond$i5 = ($h$0$i|0)==(573);
     if ($exitcond$i5) {
      $overflow$0$lcssa$i = $overflow$0$$i;
      break;
     } else {
      $h$012$i = $h$0$i;$overflow$011$i = $overflow$0$$i;
     }
    }
   }
   $282 = ($overflow$0$lcssa$i|0)==(0);
   if (!($282)) {
    $283 = (((($s)) + 2876|0) + ($210<<1)|0);
    $overflow$2$i = $overflow$0$lcssa$i;
    while(1) {
     $bits$2$in$i = $210;
     while(1) {
      $bits$2$i = (($bits$2$in$i) + -1)|0;
      $284 = (((($s)) + 2876|0) + ($bits$2$i<<1)|0);
      $285 = HEAP16[$284>>1]|0;
      $286 = ($285<<16>>16)==(0);
      if ($286) {
       $bits$2$in$i = $bits$2$i;
      } else {
       $$lcssa83 = $284;$$lcssa84 = $285;$bits$2$in$i$lcssa = $bits$2$in$i;
       break;
      }
     }
     $287 = (($$lcssa84) + -1)<<16>>16;
     HEAP16[$$lcssa83>>1] = $287;
     $288 = (((($s)) + 2876|0) + ($bits$2$in$i$lcssa<<1)|0);
     $289 = HEAP16[$288>>1]|0;
     $290 = $289&65535;
     $291 = (($290) + 2)|0;
     $292 = $291&65535;
     HEAP16[$288>>1] = $292;
     $293 = HEAP16[$283>>1]|0;
     $294 = (($293) + -1)<<16>>16;
     HEAP16[$283>>1] = $294;
     $295 = (($overflow$2$i) + -2)|0;
     $296 = ($overflow$2$i|0)>(2);
     if ($296) {
      $overflow$2$i = $295;
     } else {
      $$lcssa85 = $294;
      break;
     }
    }
    $297 = ($210|0)==(0);
    if (!($297)) {
     $299 = $$lcssa85;$bits$37$i = $210;$h$19$i = 573;
     while(1) {
      $298 = $bits$37$i&65535;
      $300 = ($299<<16>>16)==(0);
      if ($300) {
       $h$2$ph$i$lcssa = $h$19$i;
      } else {
       $301 = $299&65535;
       $h$2$ph$i33 = $h$19$i;$n$0$ph$i32 = $301;
       while(1) {
        $h$2$i = $h$2$ph$i33;
        while(1) {
         $302 = (($h$2$i) + -1)|0;
         $303 = (((($s)) + 2908|0) + ($302<<2)|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = ($304|0)>($desc$idx2$val|0);
         if ($305) {
          $h$2$i = $302;
         } else {
          $$lcssa81 = $302;$$lcssa82 = $304;
          break;
         }
        }
        $$phi$trans$insert28$i = (((($desc$idx$val) + ($$lcssa82<<2)|0)) + 2|0);
        $$pre29$i = HEAP16[$$phi$trans$insert28$i>>1]|0;
        $306 = $$pre29$i&65535;
        $307 = ($bits$37$i|0)==($306|0);
        if (!($307)) {
         $308 = (($bits$37$i) - ($306))|0;
         $309 = (($desc$idx$val) + ($$lcssa82<<2)|0);
         $310 = HEAP16[$309>>1]|0;
         $311 = $310&65535;
         $312 = Math_imul($311, $308)|0;
         $313 = HEAP32[$216>>2]|0;
         $314 = (($312) + ($313))|0;
         HEAP32[$216>>2] = $314;
         HEAP16[$$phi$trans$insert28$i>>1] = $298;
        }
        $315 = (($n$0$ph$i32) + -1)|0;
        $316 = ($315|0)==(0);
        if ($316) {
         $h$2$ph$i$lcssa = $$lcssa81;
         break;
        } else {
         $h$2$ph$i33 = $$lcssa81;$n$0$ph$i32 = $315;
        }
       }
      }
      $317 = (($bits$37$i) + -1)|0;
      $318 = ($317|0)==(0);
      if ($318) {
       break L71;
      }
      $$phi$trans$insert$i = (((($s)) + 2876|0) + ($317<<1)|0);
      $$pre$i = HEAP16[$$phi$trans$insert$i>>1]|0;
      $299 = $$pre$i;$bits$37$i = $317;$h$19$i = $h$2$ph$i$lcssa;
     }
    }
   }
  }
 } while(0);
 $bits$03$i = 1;$code$04$i = 0;
 while(1) {
  $320 = $code$04$i & 65534;
  $321 = (($bits$03$i) + -1)|0;
  $322 = (((($s)) + 2876|0) + ($321<<1)|0);
  $323 = HEAP16[$322>>1]|0;
  $324 = $323&65535;
  $325 = (($324) + ($320))|0;
  $326 = $325 << 1;
  $327 = $326&65535;
  $328 = (($next_code$i) + ($bits$03$i<<1)|0);
  HEAP16[$328>>1] = $327;
  $329 = (($bits$03$i) + 1)|0;
  $exitcond5$i = ($329|0)==(16);
  if ($exitcond5$i) {
   break;
  } else {
   $bits$03$i = $329;$code$04$i = $326;
  }
 }
 $319 = ($max_code$2$lcssa$ph|0)<(0);
 if ($319) {
  STACKTOP = sp;return;
 } else {
  $n$01$i = 0;
 }
 while(1) {
  $330 = (((($0) + ($n$01$i<<2)|0)) + 2|0);
  $331 = HEAP16[$330>>1]|0;
  $332 = $331&65535;
  $333 = ($331<<16>>16)==(0);
  if (!($333)) {
   $334 = (($next_code$i) + ($332<<1)|0);
   $335 = HEAP16[$334>>1]|0;
   $336 = (($335) + 1)<<16>>16;
   HEAP16[$334>>1] = $336;
   $337 = $335&65535;
   $$0$i$i = $332;$$01$i$i = $337;$res$0$i$i = 0;
   while(1) {
    $338 = $$01$i$i & 1;
    $339 = $res$0$i$i | $338;
    $340 = $$01$i$i >>> 1;
    $341 = $339 << 1;
    $342 = (($$0$i$i) + -1)|0;
    $343 = ($$0$i$i|0)>(1);
    if ($343) {
     $$0$i$i = $342;$$01$i$i = $340;$res$0$i$i = $341;
    } else {
     $$lcssa = $339;
     break;
    }
   }
   $344 = $$lcssa&65535;
   $345 = (($0) + ($n$01$i<<2)|0);
   HEAP16[$345>>1] = $344;
  }
  $346 = (($n$01$i) + 1)|0;
  $exitcond$i = ($n$01$i|0)==($max_code$2$lcssa$ph|0);
  if ($exitcond$i) {
   break;
  } else {
   $n$01$i = $346;
  }
 }
 STACKTOP = sp;return;
}
function _compress_block($s,$ltree,$dtree) {
 $s = $s|0;
 $ltree = $ltree|0;
 $dtree = $dtree|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pn = 0, $$pre = 0, $$pre$phi5Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lx$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5792|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$phi$trans$insert = ((($s)) + 5820|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert3 = ((($s)) + 5816|0);
  $$pre4 = HEAP16[$$phi$trans$insert3>>1]|0;
  $$pre$phi5Z2D = $$phi$trans$insert3;$$pre$phiZ2D = $$phi$trans$insert;$204 = $$pre;$211 = $$pre4;
 } else {
  $3 = ((($s)) + 5796|0);
  $4 = ((($s)) + 5784|0);
  $5 = ((($s)) + 5820|0);
  $6 = ((($s)) + 5816|0);
  $7 = ((($s)) + 20|0);
  $8 = ((($s)) + 8|0);
  $lx$0 = 0;
  while(1) {
   $9 = HEAP32[$3>>2]|0;
   $10 = (($9) + ($lx$0<<1)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($lx$0) + 1)|0;
   $14 = HEAP32[$4>>2]|0;
   $15 = (($14) + ($lx$0)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($11<<16>>16)==(0);
   do {
    if ($18) {
     $19 = (((($ltree) + ($17<<2)|0)) + 2|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = $20&65535;
     $22 = HEAP32[$5>>2]|0;
     $23 = (16 - ($21))|0;
     $24 = ($22|0)>($23|0);
     $25 = (($ltree) + ($17<<2)|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = $26&65535;
     $28 = $27 << $22;
     $29 = HEAP16[$6>>1]|0;
     $30 = $29&65535;
     $31 = $30 | $28;
     $32 = $31&65535;
     HEAP16[$6>>1] = $32;
     if ($24) {
      $33 = $31&255;
      $34 = HEAP32[$7>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$7>>2] = $35;
      $36 = HEAP32[$8>>2]|0;
      $37 = (($36) + ($34)|0);
      HEAP8[$37>>0] = $33;
      $38 = HEAP16[$6>>1]|0;
      $39 = ($38&65535) >>> 8;
      $40 = $39&255;
      $41 = HEAP32[$7>>2]|0;
      $42 = (($41) + 1)|0;
      HEAP32[$7>>2] = $42;
      $43 = HEAP32[$8>>2]|0;
      $44 = (($43) + ($41)|0);
      HEAP8[$44>>0] = $40;
      $45 = HEAP32[$5>>2]|0;
      $46 = (16 - ($45))|0;
      $47 = $27 >>> $46;
      $48 = $47&65535;
      HEAP16[$6>>1] = $48;
      $49 = (($21) + -16)|0;
      $50 = (($49) + ($45))|0;
      HEAP32[$5>>2] = $50;
      $235 = $48;$236 = $50;
      break;
     } else {
      $51 = (($22) + ($21))|0;
      HEAP32[$5>>2] = $51;
      $235 = $32;$236 = $51;
      break;
     }
    } else {
     $52 = (17897 + ($17)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = $54 | 256;
     $56 = (($55) + 1)|0;
     $57 = (((($ltree) + ($56<<2)|0)) + 2|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58&65535;
     $60 = HEAP32[$5>>2]|0;
     $61 = (16 - ($59))|0;
     $62 = ($60|0)>($61|0);
     $63 = (($ltree) + ($56<<2)|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = $64&65535;
     $66 = $65 << $60;
     $67 = HEAP16[$6>>1]|0;
     $68 = $67&65535;
     $69 = $68 | $66;
     $70 = $69&65535;
     HEAP16[$6>>1] = $70;
     if ($62) {
      $71 = $69&255;
      $72 = HEAP32[$7>>2]|0;
      $73 = (($72) + 1)|0;
      HEAP32[$7>>2] = $73;
      $74 = HEAP32[$8>>2]|0;
      $75 = (($74) + ($72)|0);
      HEAP8[$75>>0] = $71;
      $76 = HEAP16[$6>>1]|0;
      $77 = ($76&65535) >>> 8;
      $78 = $77&255;
      $79 = HEAP32[$7>>2]|0;
      $80 = (($79) + 1)|0;
      HEAP32[$7>>2] = $80;
      $81 = HEAP32[$8>>2]|0;
      $82 = (($81) + ($79)|0);
      HEAP8[$82>>0] = $78;
      $83 = HEAP32[$5>>2]|0;
      $84 = (16 - ($83))|0;
      $85 = $65 >>> $84;
      $86 = $85&65535;
      HEAP16[$6>>1] = $86;
      $87 = (($59) + -16)|0;
      $88 = (($87) + ($83))|0;
      $103 = $86;$90 = $88;
     } else {
      $89 = (($60) + ($59))|0;
      $103 = $70;$90 = $89;
     }
     HEAP32[$5>>2] = $90;
     $91 = (8860 + ($54<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($54) + -8)|0;
     $94 = ($93>>>0)<(20);
     do {
      if ($94) {
       $95 = (8976 + ($54<<2)|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (($17) - ($96))|0;
       $98 = (16 - ($92))|0;
       $99 = ($90|0)>($98|0);
       $100 = $97 & 65535;
       $101 = $100 << $90;
       $102 = $103&65535;
       $104 = $101 | $102;
       $105 = $104&65535;
       HEAP16[$6>>1] = $105;
       if ($99) {
        $106 = $104&255;
        $107 = HEAP32[$7>>2]|0;
        $108 = (($107) + 1)|0;
        HEAP32[$7>>2] = $108;
        $109 = HEAP32[$8>>2]|0;
        $110 = (($109) + ($107)|0);
        HEAP8[$110>>0] = $106;
        $111 = HEAP16[$6>>1]|0;
        $112 = ($111&65535) >>> 8;
        $113 = $112&255;
        $114 = HEAP32[$7>>2]|0;
        $115 = (($114) + 1)|0;
        HEAP32[$7>>2] = $115;
        $116 = HEAP32[$8>>2]|0;
        $117 = (($116) + ($114)|0);
        HEAP8[$117>>0] = $113;
        $118 = HEAP32[$5>>2]|0;
        $119 = (16 - ($118))|0;
        $120 = $100 >>> $119;
        $121 = $120&65535;
        HEAP16[$6>>1] = $121;
        $122 = (($92) + -16)|0;
        $123 = (($122) + ($118))|0;
        HEAP32[$5>>2] = $123;
        $134 = $123;$141 = $121;
        break;
       } else {
        $124 = (($90) + ($92))|0;
        HEAP32[$5>>2] = $124;
        $134 = $124;$141 = $105;
        break;
       }
      } else {
       $134 = $90;$141 = $103;
      }
     } while(0);
     $125 = (($12) + -1)|0;
     $126 = ($125>>>0)<(256);
     $127 = $125 >>> 7;
     $128 = (($127) + 256)|0;
     $$pn = $126 ? $125 : $128;
     $$sink$in = (17385 + ($$pn)|0);
     $$sink = HEAP8[$$sink$in>>0]|0;
     $129 = $$sink&255;
     $130 = (((($dtree) + ($129<<2)|0)) + 2|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = (16 - ($132))|0;
     $135 = ($134|0)>($133|0);
     $136 = (($dtree) + ($129<<2)|0);
     $137 = HEAP16[$136>>1]|0;
     $138 = $137&65535;
     $139 = $138 << $134;
     $140 = $141&65535;
     $142 = $140 | $139;
     $143 = $142&65535;
     HEAP16[$6>>1] = $143;
     if ($135) {
      $144 = $142&255;
      $145 = HEAP32[$7>>2]|0;
      $146 = (($145) + 1)|0;
      HEAP32[$7>>2] = $146;
      $147 = HEAP32[$8>>2]|0;
      $148 = (($147) + ($145)|0);
      HEAP8[$148>>0] = $144;
      $149 = HEAP16[$6>>1]|0;
      $150 = ($149&65535) >>> 8;
      $151 = $150&255;
      $152 = HEAP32[$7>>2]|0;
      $153 = (($152) + 1)|0;
      HEAP32[$7>>2] = $153;
      $154 = HEAP32[$8>>2]|0;
      $155 = (($154) + ($152)|0);
      HEAP8[$155>>0] = $151;
      $156 = HEAP32[$5>>2]|0;
      $157 = (16 - ($156))|0;
      $158 = $138 >>> $157;
      $159 = $158&65535;
      HEAP16[$6>>1] = $159;
      $160 = (($132) + -16)|0;
      $161 = (($160) + ($156))|0;
      $163 = $161;$176 = $159;
     } else {
      $162 = (($134) + ($132))|0;
      $163 = $162;$176 = $143;
     }
     HEAP32[$5>>2] = $163;
     $164 = (9092 + ($129<<2)|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($129) + -4)|0;
     $167 = ($166>>>0)<(26);
     if ($167) {
      $168 = (9212 + ($129<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (($125) - ($169))|0;
      $171 = (16 - ($165))|0;
      $172 = ($163|0)>($171|0);
      $173 = $170 & 65535;
      $174 = $173 << $163;
      $175 = $176&65535;
      $177 = $174 | $175;
      $178 = $177&65535;
      HEAP16[$6>>1] = $178;
      if ($172) {
       $179 = $177&255;
       $180 = HEAP32[$7>>2]|0;
       $181 = (($180) + 1)|0;
       HEAP32[$7>>2] = $181;
       $182 = HEAP32[$8>>2]|0;
       $183 = (($182) + ($180)|0);
       HEAP8[$183>>0] = $179;
       $184 = HEAP16[$6>>1]|0;
       $185 = ($184&65535) >>> 8;
       $186 = $185&255;
       $187 = HEAP32[$7>>2]|0;
       $188 = (($187) + 1)|0;
       HEAP32[$7>>2] = $188;
       $189 = HEAP32[$8>>2]|0;
       $190 = (($189) + ($187)|0);
       HEAP8[$190>>0] = $186;
       $191 = HEAP32[$5>>2]|0;
       $192 = (16 - ($191))|0;
       $193 = $173 >>> $192;
       $194 = $193&65535;
       HEAP16[$6>>1] = $194;
       $195 = (($165) + -16)|0;
       $196 = (($195) + ($191))|0;
       HEAP32[$5>>2] = $196;
       $235 = $194;$236 = $196;
       break;
      } else {
       $197 = (($163) + ($165))|0;
       HEAP32[$5>>2] = $197;
       $235 = $178;$236 = $197;
       break;
      }
     } else {
      $235 = $176;$236 = $163;
     }
    }
   } while(0);
   $198 = HEAP32[$0>>2]|0;
   $199 = ($13>>>0)<($198>>>0);
   if ($199) {
    $lx$0 = $13;
   } else {
    $$pre$phi5Z2D = $6;$$pre$phiZ2D = $5;$204 = $236;$211 = $235;
    break;
   }
  }
 }
 $200 = ((($ltree)) + 1026|0);
 $201 = HEAP16[$200>>1]|0;
 $202 = $201&65535;
 $203 = (16 - ($202))|0;
 $205 = ($204|0)>($203|0);
 $206 = ((($ltree)) + 1024|0);
 $207 = HEAP16[$206>>1]|0;
 $208 = $207&65535;
 $209 = $208 << $204;
 $210 = $211&65535;
 $212 = $210 | $209;
 $213 = $212&65535;
 HEAP16[$$pre$phi5Z2D>>1] = $213;
 if ($205) {
  $214 = $212&255;
  $215 = ((($s)) + 20|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + 1)|0;
  HEAP32[$215>>2] = $217;
  $218 = ((($s)) + 8|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + ($216)|0);
  HEAP8[$220>>0] = $214;
  $221 = HEAP16[$$pre$phi5Z2D>>1]|0;
  $222 = ($221&65535) >>> 8;
  $223 = $222&255;
  $224 = HEAP32[$215>>2]|0;
  $225 = (($224) + 1)|0;
  HEAP32[$215>>2] = $225;
  $226 = HEAP32[$218>>2]|0;
  $227 = (($226) + ($224)|0);
  HEAP8[$227>>0] = $223;
  $228 = HEAP32[$$pre$phiZ2D>>2]|0;
  $229 = (16 - ($228))|0;
  $230 = $208 >>> $229;
  $231 = $230&65535;
  HEAP16[$$pre$phi5Z2D>>1] = $231;
  $232 = (($202) + -16)|0;
  $233 = (($232) + ($228))|0;
  $storemerge = $233;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 } else {
  $234 = (($204) + ($202))|0;
  $storemerge = $234;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 }
}
function _send_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $$ = 0, $$5 = 0, $$7 = 0, $$lcssa = 0, $$lcssa39 = 0, $$lcssa40 = 0, $$lcssa41 = 0, $$lcssa42 = 0, $$pre = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$0 = 0, $count$0$lcssa38 = 0, $count$1 = 0, $count$2 = 0, $max_count$1$ph = 0, $max_count$1$ph$be = 0, $min_count$1$ph = 0, $min_count$1$ph$be = 0, $n$0 = 0, $n$0$ph = 0, $nextlen$0$ph = 0, $or$cond = 0, $prevlen$0$ph = 0, $prevlen$0$ph$phi = 0, $storemerge3 = 0, $storemerge4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tree)) + 2|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($1<<16>>16)==(0);
 $$ = $3 ? 3 : 4;
 $$5 = $3 ? 138 : 7;
 $4 = ((($s)) + 2754|0);
 $5 = ((($s)) + 5820|0);
 $6 = ((($s)) + 2752|0);
 $7 = ((($s)) + 5816|0);
 $8 = ((($s)) + 20|0);
 $9 = ((($s)) + 8|0);
 $10 = ((($s)) + 2758|0);
 $11 = ((($s)) + 2756|0);
 $12 = ((($s)) + 2750|0);
 $13 = ((($s)) + 2748|0);
 $max_count$1$ph = $$5;$min_count$1$ph = $$;$n$0$ph = 0;$nextlen$0$ph = $2;$prevlen$0$ph = -1;
 L1: while(1) {
  $count$0 = 0;$n$0 = $n$0$ph;
  while(1) {
   $14 = ($n$0|0)>($max_code|0);
   if ($14) {
    break L1;
   }
   $15 = (($n$0) + 1)|0;
   $16 = (((($tree) + ($15<<2)|0)) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = (($count$0) + 1)|0;
   $20 = ($19|0)<($max_count$1$ph|0);
   $21 = ($nextlen$0$ph|0)==($18|0);
   $or$cond = $20 & $21;
   if ($or$cond) {
    $count$0 = $19;$n$0 = $15;
   } else {
    $$lcssa = $15;$$lcssa39 = $17;$$lcssa40 = $18;$$lcssa41 = $19;$$lcssa42 = $21;$count$0$lcssa38 = $count$0;
    break;
   }
  }
  $22 = ($$lcssa41|0)<($min_count$1$ph|0);
  do {
   if ($22) {
    $23 = (((((($s)) + 2684|0) + ($nextlen$0$ph<<2)|0)) + 2|0);
    $24 = (((($s)) + 2684|0) + ($nextlen$0$ph<<2)|0);
    $$pre21 = HEAP32[$5>>2]|0;
    $$pre22 = HEAP16[$7>>1]|0;
    $28 = $$pre21;$34 = $$pre22;$count$1 = $$lcssa41;
    while(1) {
     $25 = HEAP16[$23>>1]|0;
     $26 = $25&65535;
     $27 = (16 - ($26))|0;
     $29 = ($28|0)>($27|0);
     $30 = HEAP16[$24>>1]|0;
     $31 = $30&65535;
     $32 = $31 << $28;
     $33 = $34&65535;
     $35 = $33 | $32;
     $36 = $35&65535;
     HEAP16[$7>>1] = $36;
     if ($29) {
      $37 = $35&255;
      $38 = HEAP32[$8>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$8>>2] = $39;
      $40 = HEAP32[$9>>2]|0;
      $41 = (($40) + ($38)|0);
      HEAP8[$41>>0] = $37;
      $42 = HEAP16[$7>>1]|0;
      $43 = ($42&65535) >>> 8;
      $44 = $43&255;
      $45 = HEAP32[$8>>2]|0;
      $46 = (($45) + 1)|0;
      HEAP32[$8>>2] = $46;
      $47 = HEAP32[$9>>2]|0;
      $48 = (($47) + ($45)|0);
      HEAP8[$48>>0] = $44;
      $49 = HEAP32[$5>>2]|0;
      $50 = (16 - ($49))|0;
      $51 = $31 >>> $50;
      $52 = $51&65535;
      HEAP16[$7>>1] = $52;
      $53 = (($26) + -16)|0;
      $54 = (($53) + ($49))|0;
      $270 = $52;$storemerge4 = $54;
     } else {
      $55 = (($28) + ($26))|0;
      $270 = $36;$storemerge4 = $55;
     }
     HEAP32[$5>>2] = $storemerge4;
     $56 = (($count$1) + -1)|0;
     $57 = ($56|0)==(0);
     if ($57) {
      break;
     } else {
      $28 = $storemerge4;$34 = $270;$count$1 = $56;
     }
    }
   } else {
    $58 = ($nextlen$0$ph|0)==(0);
    if (!($58)) {
     $59 = ($nextlen$0$ph|0)==($prevlen$0$ph|0);
     if ($59) {
      $$pre = HEAP32[$5>>2]|0;
      $$pre20 = HEAP16[$7>>1]|0;
      $102 = $$pre20;$96 = $$pre;$count$2 = $$lcssa41;
     } else {
      $60 = (((((($s)) + 2684|0) + ($nextlen$0$ph<<2)|0)) + 2|0);
      $61 = HEAP16[$60>>1]|0;
      $62 = $61&65535;
      $63 = HEAP32[$5>>2]|0;
      $64 = (16 - ($62))|0;
      $65 = ($63|0)>($64|0);
      $66 = (((($s)) + 2684|0) + ($nextlen$0$ph<<2)|0);
      $67 = HEAP16[$66>>1]|0;
      $68 = $67&65535;
      $69 = $68 << $63;
      $70 = HEAP16[$7>>1]|0;
      $71 = $70&65535;
      $72 = $71 | $69;
      $73 = $72&65535;
      HEAP16[$7>>1] = $73;
      if ($65) {
       $74 = $72&255;
       $75 = HEAP32[$8>>2]|0;
       $76 = (($75) + 1)|0;
       HEAP32[$8>>2] = $76;
       $77 = HEAP32[$9>>2]|0;
       $78 = (($77) + ($75)|0);
       HEAP8[$78>>0] = $74;
       $79 = HEAP16[$7>>1]|0;
       $80 = ($79&65535) >>> 8;
       $81 = $80&255;
       $82 = HEAP32[$8>>2]|0;
       $83 = (($82) + 1)|0;
       HEAP32[$8>>2] = $83;
       $84 = HEAP32[$9>>2]|0;
       $85 = (($84) + ($82)|0);
       HEAP8[$85>>0] = $81;
       $86 = HEAP32[$5>>2]|0;
       $87 = (16 - ($86))|0;
       $88 = $68 >>> $87;
       $89 = $88&65535;
       HEAP16[$7>>1] = $89;
       $90 = (($62) + -16)|0;
       $91 = (($90) + ($86))|0;
       $271 = $89;$storemerge3 = $91;
      } else {
       $92 = (($63) + ($62))|0;
       $271 = $73;$storemerge3 = $92;
      }
      HEAP32[$5>>2] = $storemerge3;
      $102 = $271;$96 = $storemerge3;$count$2 = $count$0$lcssa38;
     }
     $93 = HEAP16[$12>>1]|0;
     $94 = $93&65535;
     $95 = (16 - ($94))|0;
     $97 = ($96|0)>($95|0);
     $98 = HEAP16[$13>>1]|0;
     $99 = $98&65535;
     $100 = $99 << $96;
     $101 = $102&65535;
     $103 = $101 | $100;
     $104 = $103&65535;
     HEAP16[$7>>1] = $104;
     if ($97) {
      $105 = $103&255;
      $106 = HEAP32[$8>>2]|0;
      $107 = (($106) + 1)|0;
      HEAP32[$8>>2] = $107;
      $108 = HEAP32[$9>>2]|0;
      $109 = (($108) + ($106)|0);
      HEAP8[$109>>0] = $105;
      $110 = HEAP16[$7>>1]|0;
      $111 = ($110&65535) >>> 8;
      $112 = $111&255;
      $113 = HEAP32[$8>>2]|0;
      $114 = (($113) + 1)|0;
      HEAP32[$8>>2] = $114;
      $115 = HEAP32[$9>>2]|0;
      $116 = (($115) + ($113)|0);
      HEAP8[$116>>0] = $112;
      $117 = HEAP32[$5>>2]|0;
      $118 = (16 - ($117))|0;
      $119 = $99 >>> $118;
      $120 = $119&65535;
      HEAP16[$7>>1] = $120;
      $121 = (($94) + -16)|0;
      $122 = (($121) + ($117))|0;
      $124 = $122;$130 = $119;
     } else {
      $123 = (($96) + ($94))|0;
      $124 = $123;$130 = $103;
     }
     HEAP32[$5>>2] = $124;
     $125 = ($124|0)>(14);
     $126 = (($count$2) + 65533)|0;
     $127 = $126 & 65535;
     $128 = $127 << $124;
     $129 = $130 & 65535;
     $131 = $129 | $128;
     $132 = $131&65535;
     HEAP16[$7>>1] = $132;
     if ($125) {
      $133 = $131&255;
      $134 = HEAP32[$8>>2]|0;
      $135 = (($134) + 1)|0;
      HEAP32[$8>>2] = $135;
      $136 = HEAP32[$9>>2]|0;
      $137 = (($136) + ($134)|0);
      HEAP8[$137>>0] = $133;
      $138 = HEAP16[$7>>1]|0;
      $139 = ($138&65535) >>> 8;
      $140 = $139&255;
      $141 = HEAP32[$8>>2]|0;
      $142 = (($141) + 1)|0;
      HEAP32[$8>>2] = $142;
      $143 = HEAP32[$9>>2]|0;
      $144 = (($143) + ($141)|0);
      HEAP8[$144>>0] = $140;
      $145 = HEAP32[$5>>2]|0;
      $146 = (16 - ($145))|0;
      $147 = $127 >>> $146;
      $148 = $147&65535;
      HEAP16[$7>>1] = $148;
      $149 = (($145) + -14)|0;
      HEAP32[$5>>2] = $149;
      break;
     } else {
      $150 = (($124) + 2)|0;
      HEAP32[$5>>2] = $150;
      break;
     }
    }
    $151 = ($$lcssa41|0)<(11);
    if ($151) {
     $152 = HEAP16[$4>>1]|0;
     $153 = $152&65535;
     $154 = HEAP32[$5>>2]|0;
     $155 = (16 - ($153))|0;
     $156 = ($154|0)>($155|0);
     $157 = HEAP16[$6>>1]|0;
     $158 = $157&65535;
     $159 = $158 << $154;
     $160 = HEAP16[$7>>1]|0;
     $161 = $160&65535;
     $162 = $161 | $159;
     $163 = $162&65535;
     HEAP16[$7>>1] = $163;
     if ($156) {
      $164 = $162&255;
      $165 = HEAP32[$8>>2]|0;
      $166 = (($165) + 1)|0;
      HEAP32[$8>>2] = $166;
      $167 = HEAP32[$9>>2]|0;
      $168 = (($167) + ($165)|0);
      HEAP8[$168>>0] = $164;
      $169 = HEAP16[$7>>1]|0;
      $170 = ($169&65535) >>> 8;
      $171 = $170&255;
      $172 = HEAP32[$8>>2]|0;
      $173 = (($172) + 1)|0;
      HEAP32[$8>>2] = $173;
      $174 = HEAP32[$9>>2]|0;
      $175 = (($174) + ($172)|0);
      HEAP8[$175>>0] = $171;
      $176 = HEAP32[$5>>2]|0;
      $177 = (16 - ($176))|0;
      $178 = $158 >>> $177;
      $179 = $178&65535;
      HEAP16[$7>>1] = $179;
      $180 = (($153) + -16)|0;
      $181 = (($180) + ($176))|0;
      $183 = $181;$189 = $178;
     } else {
      $182 = (($154) + ($153))|0;
      $183 = $182;$189 = $162;
     }
     HEAP32[$5>>2] = $183;
     $184 = ($183|0)>(13);
     $185 = (($count$0$lcssa38) + 65534)|0;
     $186 = $185 & 65535;
     $187 = $186 << $183;
     $188 = $189 & 65535;
     $190 = $188 | $187;
     $191 = $190&65535;
     HEAP16[$7>>1] = $191;
     if ($184) {
      $192 = $190&255;
      $193 = HEAP32[$8>>2]|0;
      $194 = (($193) + 1)|0;
      HEAP32[$8>>2] = $194;
      $195 = HEAP32[$9>>2]|0;
      $196 = (($195) + ($193)|0);
      HEAP8[$196>>0] = $192;
      $197 = HEAP16[$7>>1]|0;
      $198 = ($197&65535) >>> 8;
      $199 = $198&255;
      $200 = HEAP32[$8>>2]|0;
      $201 = (($200) + 1)|0;
      HEAP32[$8>>2] = $201;
      $202 = HEAP32[$9>>2]|0;
      $203 = (($202) + ($200)|0);
      HEAP8[$203>>0] = $199;
      $204 = HEAP32[$5>>2]|0;
      $205 = (16 - ($204))|0;
      $206 = $186 >>> $205;
      $207 = $206&65535;
      HEAP16[$7>>1] = $207;
      $208 = (($204) + -13)|0;
      HEAP32[$5>>2] = $208;
      break;
     } else {
      $209 = (($183) + 3)|0;
      HEAP32[$5>>2] = $209;
      break;
     }
    } else {
     $210 = HEAP16[$10>>1]|0;
     $211 = $210&65535;
     $212 = HEAP32[$5>>2]|0;
     $213 = (16 - ($211))|0;
     $214 = ($212|0)>($213|0);
     $215 = HEAP16[$11>>1]|0;
     $216 = $215&65535;
     $217 = $216 << $212;
     $218 = HEAP16[$7>>1]|0;
     $219 = $218&65535;
     $220 = $219 | $217;
     $221 = $220&65535;
     HEAP16[$7>>1] = $221;
     if ($214) {
      $222 = $220&255;
      $223 = HEAP32[$8>>2]|0;
      $224 = (($223) + 1)|0;
      HEAP32[$8>>2] = $224;
      $225 = HEAP32[$9>>2]|0;
      $226 = (($225) + ($223)|0);
      HEAP8[$226>>0] = $222;
      $227 = HEAP16[$7>>1]|0;
      $228 = ($227&65535) >>> 8;
      $229 = $228&255;
      $230 = HEAP32[$8>>2]|0;
      $231 = (($230) + 1)|0;
      HEAP32[$8>>2] = $231;
      $232 = HEAP32[$9>>2]|0;
      $233 = (($232) + ($230)|0);
      HEAP8[$233>>0] = $229;
      $234 = HEAP32[$5>>2]|0;
      $235 = (16 - ($234))|0;
      $236 = $216 >>> $235;
      $237 = $236&65535;
      HEAP16[$7>>1] = $237;
      $238 = (($211) + -16)|0;
      $239 = (($238) + ($234))|0;
      $241 = $239;$247 = $236;
     } else {
      $240 = (($212) + ($211))|0;
      $241 = $240;$247 = $220;
     }
     HEAP32[$5>>2] = $241;
     $242 = ($241|0)>(9);
     $243 = (($count$0$lcssa38) + 65526)|0;
     $244 = $243 & 65535;
     $245 = $244 << $241;
     $246 = $247 & 65535;
     $248 = $246 | $245;
     $249 = $248&65535;
     HEAP16[$7>>1] = $249;
     if ($242) {
      $250 = $248&255;
      $251 = HEAP32[$8>>2]|0;
      $252 = (($251) + 1)|0;
      HEAP32[$8>>2] = $252;
      $253 = HEAP32[$9>>2]|0;
      $254 = (($253) + ($251)|0);
      HEAP8[$254>>0] = $250;
      $255 = HEAP16[$7>>1]|0;
      $256 = ($255&65535) >>> 8;
      $257 = $256&255;
      $258 = HEAP32[$8>>2]|0;
      $259 = (($258) + 1)|0;
      HEAP32[$8>>2] = $259;
      $260 = HEAP32[$9>>2]|0;
      $261 = (($260) + ($258)|0);
      HEAP8[$261>>0] = $257;
      $262 = HEAP32[$5>>2]|0;
      $263 = (16 - ($262))|0;
      $264 = $244 >>> $263;
      $265 = $264&65535;
      HEAP16[$7>>1] = $265;
      $266 = (($262) + -9)|0;
      HEAP32[$5>>2] = $266;
      break;
     } else {
      $267 = (($241) + 7)|0;
      HEAP32[$5>>2] = $267;
      break;
     }
    }
   }
  } while(0);
  $268 = ($$lcssa39<<16>>16)==(0);
  $$7 = $$lcssa42 ? 6 : 7;
  $269 = $268 | $$lcssa42;
  $min_count$1$ph$be = $269 ? 3 : 4;
  $max_count$1$ph$be = $268 ? 138 : $$7;
  $prevlen$0$ph$phi = $nextlen$0$ph;$max_count$1$ph = $max_count$1$ph$be;$min_count$1$ph = $min_count$1$ph$be;$n$0$ph = $$lcssa;$nextlen$0$ph = $$lcssa40;$prevlen$0$ph = $prevlen$0$ph$phi;
 }
 return;
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($size, $items)|0;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[9720>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((18639|0),(18662|0),303,(18732|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((9668|0),(69|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[9664>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(18753,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 127]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (9460);
   ___cxa_throw(($7|0),(192|0),(5|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18802|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(70,(18817|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(70,(18857|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(71);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(72)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[2362]|0;HEAP32[2362] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9472>>2]|0;HEAP32[9472>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9484);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12domain_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,256,272,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 63]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 63]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 31]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 31]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 31]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 31]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 31]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 31]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 31]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 127]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,256,304,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[9672>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(19245,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[208>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 127](208,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[9672>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 127]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(19159,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[9672>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(19204,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(19283,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((9664|0),(73|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18907,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[9664>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18957,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((19010|0),(19039|0),1164,(18732|0));
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((19109|0),(19039|0),1175,(19138|0));
 // unreachable;
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (19304 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 19392;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 19392;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 19392;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9676>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 9728;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[9724>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[9724>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((9704)|0));
   $$012 = HEAP32[(9700)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((9704)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 127]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 127]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[9676>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((74|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 31;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 127]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((22236 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 22716;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 22716;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 22716;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 22716 : (22718);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (22717);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 22716;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 22716;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 22726;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 22733;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (22734) : (22739);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (22736);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (22700 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(22768,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(22768,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 22752 : 22756;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 22760 : 22764;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22716;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22716;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (22700 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22716;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (22716 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 22716;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[9956>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (9996 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (9996 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[9956>>2] = $22;
     } else {
      $23 = HEAP32[(9972)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(9964)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (9996 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (9996 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[9956>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(9972)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(9964)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(9976)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (9996 + ($92<<2)|0);
      $94 = HEAP32[9956>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[9956>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (9996 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (9996 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(9972)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(9964)>>2] = $81;
     HEAP32[(9976)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(9960)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (10260 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(9972)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (10260 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(9960)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(9960)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(9972)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(9972)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(9972)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(9964)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(9976)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (9996 + ($229<<2)|0);
       $231 = HEAP32[9956>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[9956>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (9996 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (9996 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(9972)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(9964)>>2] = $rsize$0$i$lcssa;
      HEAP32[(9976)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(9960)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (10260 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (10260 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(9964)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(9972)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (10260 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(9960)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(9960)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(9972)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(9972)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(9972)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (9996 + ($424<<2)|0);
          $426 = HEAP32[9956>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[9956>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (9996 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (9996 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(9972)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (10260 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(9960)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(9960)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(9972)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(9972)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(9964)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(9976)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(9976)>>2] = $514;
   HEAP32[(9964)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(9964)>>2] = 0;
   HEAP32[(9976)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(9968)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(9968)>>2] = $528;
  $529 = HEAP32[(9980)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(9980)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[10428>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(10436)>>2] = $538;
    HEAP32[(10432)>>2] = $538;
    HEAP32[(10440)>>2] = -1;
    HEAP32[(10444)>>2] = -1;
    HEAP32[(10448)>>2] = 0;
    HEAP32[(10400)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[10428>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(10436)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(10396)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(10388)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(10400)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(9980)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (10404);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(9968)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(10432)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(10388)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(10396)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(10436)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(10400)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(10400)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(10388)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(10388)>>2] = $632;
  $633 = HEAP32[(10392)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(10392)>>2] = $632;
  }
  $635 = HEAP32[(9980)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(9972)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(9972)>>2] = $tbase$255$i;
    }
    HEAP32[(10404)>>2] = $tbase$255$i;
    HEAP32[(10408)>>2] = $tsize$254$i;
    HEAP32[(10416)>>2] = 0;
    $640 = HEAP32[10428>>2]|0;
    HEAP32[(9992)>>2] = $640;
    HEAP32[(9988)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (9996 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (9996 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (9996 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(9980)>>2] = $654;
    HEAP32[(9968)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(10444)>>2]|0;
    HEAP32[(9984)>>2] = $659;
   } else {
    $sp$084$i = (10404);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(9968)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(9980)>>2] = $684;
       HEAP32[(9968)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(10444)>>2]|0;
       HEAP32[(9984)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(9972)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(9972)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (10404);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (10404);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(9968)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(9968)>>2] = $730;
        HEAP32[(9980)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(9976)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(9964)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(9964)>>2] = $736;
         HEAP32[(9976)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (9996 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[9956>>2]|0;
            $763 = $762 & $761;
            HEAP32[9956>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (10260 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(9960)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(9960)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(9972)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(9972)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(9972)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (9996 + ($840<<2)|0);
         $842 = HEAP32[9956>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[9956>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (9996 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (9996 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(9972)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (10260 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(9960)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(9960)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(9972)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(9972)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (10404);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(9980)>>2] = $953;
    HEAP32[(9968)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(10444)>>2]|0;
    HEAP32[(9984)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(10404)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(10404)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(10404)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(10404)+12>>2]|0;
    HEAP32[(10404)>>2] = $tbase$255$i;
    HEAP32[(10408)>>2] = $tsize$254$i;
    HEAP32[(10416)>>2] = 0;
    HEAP32[(10412)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (9996 + ($977<<2)|0);
      $979 = HEAP32[9956>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[9956>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (9996 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (9996 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(9972)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (10260 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(9960)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(9960)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(9972)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(9972)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(9968)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(9968)>>2] = $1062;
   $1063 = HEAP32[(9980)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(9980)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(9972)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(9976)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(9964)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (9996 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[9956>>2]|0;
     $36 = $35 & $34;
     HEAP32[9956>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (10260 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(9960)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(9960)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(9972)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(9972)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(9972)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(9980)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(9968)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(9968)>>2] = $120;
   HEAP32[(9980)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(9976)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(9976)>>2] = 0;
   HEAP32[(9964)>>2] = 0;
   return;
  }
  $125 = HEAP32[(9976)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(9964)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(9964)>>2] = $128;
   HEAP32[(9976)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (9996 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(9972)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[9956>>2]|0;
     $152 = $151 & $150;
     HEAP32[9956>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(9972)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(9972)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(9972)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (10260 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(9960)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(9960)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(9972)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(9972)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(9972)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(9976)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(9964)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (9996 + ($233<<2)|0);
  $235 = HEAP32[9956>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[9956>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (9996 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (9996 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(9972)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (10260 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(9960)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(9960)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(9972)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(9972)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(9988)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(9988)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (10412);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(9988)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(9972)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(10436)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(9980)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(9968)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(9980)>>2] = $36;
  HEAP32[(9968)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(9976)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(9964)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(9964)>>2] = $storemerge21;
  HEAP32[(9976)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (9996 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[9956>>2]|0;
    $88 = $87 & $86;
    HEAP32[9956>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (10260 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(9960)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(9960)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(9972)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(9972)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(9972)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(9972)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(9976)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(9964)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (9996 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[9956>>2]|0;
     $32 = $31 & $30;
     HEAP32[9956>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (10260 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(9960)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(9960)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(9972)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(9972)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(9972)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(9972)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(9980)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(9968)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(9968)>>2] = $115;
   HEAP32[(9980)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(9976)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(9976)>>2] = 0;
   HEAP32[(9964)>>2] = 0;
   return;
  }
  $120 = HEAP32[(9976)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(9964)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(9964)>>2] = $123;
   HEAP32[(9976)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (9996 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[9956>>2]|0;
     $146 = $145 & $144;
     HEAP32[9956>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (10260 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(9960)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(9960)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(9972)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(9972)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(9972)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(9976)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(9964)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (9996 + ($224<<2)|0);
  $226 = HEAP32[9956>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[9956>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (9996 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (9996 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(9972)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (10260 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(9960)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(9960)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(9972)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(9972)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9484);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(75,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(76,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1)|0);
  _memcpy(($24|0),($25|0),($23|0))|0;
 }
 $26 = ($__old_cap|0)==(10);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = ((($this)) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($this,$__pos,$__s,$__n) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $13 = 10;$17 = $0;
 } else {
  $9 = HEAP32[$this>>2]|0;
  $10 = $9 & -2;
  $phitmp$i = (($10) + -1)|0;
  $11 = $9&255;
  $13 = $phitmp$i;$17 = $11;
 }
 $12 = (($13) - ($7))|0;
 $14 = ($12>>>0)<($__n>>>0);
 if ($14) {
  $39 = (($7) + ($__n))|0;
  $40 = (($39) - ($13))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$40,$7,$__pos,0,$__n,$__s);
 } else {
  $15 = ($__n|0)==(0);
  if (!($15)) {
   $16 = $17 & 1;
   $18 = ($16<<24>>24)==(0);
   if ($18) {
    $21 = ((($this)) + 1|0);
    $23 = $21;
   } else {
    $19 = ((($this)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   }
   $22 = ($7|0)==($__pos|0);
   if ($22) {
    $$pre = (($23) + ($__pos)|0);
    $$1 = $__s;$$pre$phiZ2D = $$pre;
   } else {
    $24 = (($7) - ($__pos))|0;
    $25 = (($23) + ($__pos)|0);
    $26 = ($25>>>0)<=($__s>>>0);
    $27 = (($23) + ($7)|0);
    $28 = ($27>>>0)>($__s>>>0);
    $or$cond = $26 & $28;
    $29 = (($__s) + ($__n)|0);
    $$0 = $or$cond ? $29 : $__s;
    $$sum = (($__n) + ($__pos))|0;
    $30 = (($23) + ($$sum)|0);
    _memmove(($30|0),($25|0),($24|0))|0;
    $$1 = $$0;$$pre$phiZ2D = $25;
   }
   _memmove(($$pre$phiZ2D|0),($$1|0),($__n|0))|0;
   $31 = (($7) + ($__n))|0;
   $32 = HEAP8[$this>>0]|0;
   $33 = $32 & 1;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $36 = $31 << 1;
    $37 = $36&255;
    HEAP8[$this>>0] = $37;
   } else {
    $35 = ((($this)) + 4|0);
    HEAP32[$35>>2] = $31;
   }
   $38 = (($23) + ($31)|0);
   HEAP8[$38>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($this,$__pos,$__s) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($this,$__pos,$__s,$0)|0);
 return ($1|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(5);
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8() {
 ; nullFunc_v(8);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,___stdio_write,___stdio_seek,___stdout_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc,b0,b0,b0,b0,b0,b0,__ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EEPh,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,_png_zalloc,b0,b0,b0,b0,_zcalloc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE17binary_block_sizeEv,__ZN8cppcodec6detail6base64INS0_14base64_rfc4648EE18encoded_block_sizeEv,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt12domain_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,__ZN10__cxxabiv117__class_type_infoD0Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,_png_default_flush,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup526,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZN14TPngDestructorC2EP14png_struct_def,b4,b4,__ZNSt3__16vectorIPhNS_9allocatorIS1_EEEC2Ej,b4,b4,b4,b4,__ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6vectorIhNSB_IhEEEEEET_RKT0_,b4,__ZNSt3__16vectorIPhNS_9allocatorIS1_EEE8allocateEj,__ZNSt3__16vectorIPhNS_9allocatorIS1_EEE18__construct_at_endEj,_png_destroy_write_struct,b4,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,b4,b4,b4,b4,b4
,_emscripten_longjmp__wrapper,b4,b4,b4,_png_zfree,_png_free,b4,b4,b4,_zcfree,b4,_abort_message,b4,b4,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,_png_set_IHDR,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,___stdio_close,b6,b6,b6,b6,b6,_png_create_info_struct,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Znwj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_png_set_rows,b7,__ZL16PngWriteCallbackP14png_struct_defPhj,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_,b7,__ZN8cppcodec6detail5codecINS0_6base64INS0_14base64_rfc4648EEEE6encodeINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEvRT_PKhj,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,_png_default_write_data,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,__ZL25default_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8,___cxa_end_catch__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,_png_create_write_struct,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJjjjEE6invokeEPFS8_jjjEjjj,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10
,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,_deflate_stored,_deflate_fast,_deflate_slow,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,_png_user_version_check,_png_malloc_warn,b11,b11];
var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12
,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_png_set_write_fn,b12,_png_write_png,b12,b12,b12,b12,b12,__Z16WritePngToMemoryjjj,b12,b12,b12,b12,b12,b12,b12,b12,_png_set_mem_fn,_png_set_error_fn
,b12,b12,b12,b12,b12];

  return { _testSetjmp: _testSetjmp, ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _realloc: _realloc, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _i64Subtract: _i64Subtract, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_function_cpp: __GLOBAL__sub_I_function_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real___GLOBAL__sub_I_function_cpp = asm["__GLOBAL__sub_I_function_cpp"]; asm["__GLOBAL__sub_I_function_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_function_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var __GLOBAL__sub_I_function_cpp = Module["__GLOBAL__sub_I_function_cpp"] = asm["__GLOBAL__sub_I_function_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



